<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="103"
           errors="3"
           failures="22"
           skip="0">
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon (Test #1)" name="0" time="117.71579456329346">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [racon::Polisher::initialize] loaded target sequences 0.000955 s[racon::Polisher::initialize] loaded sequences 0.019881 s[racon::Polisher::initialize] loaded overlaps 0.012749 s[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.012900 s[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.013657 s[racon::Polisher::initialize] aligning overlaps [===>                ] 0.014311 s[racon::Polisher::initialize] aligning overlaps [====>               ] 0.014945 s[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.015284 s[racon::Polisher::initialize] aligning overlaps [======>             ] 0.015755 s[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.016372 s[racon::Polisher::initialize] aligning overlaps [========>           ] 0.016815 s[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.017312 s[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.017759 s[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.018356 s[racon::Polisher::initialize] aligning overlaps [============>       ] 0.019018 s[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.019636 s[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.020099 s[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.020663 s[racon::Polisher::initialize] aligning overlaps [================>   ] 0.021272 s[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.021625 s[racon::Polisher::initialize] aligning overlaps [==================> ] 0.022176 s[racon::Polisher::initialize] aligning overlaps [===================>] 0.022885 s[racon::Polisher::initialize] aligning overlaps [====================] 0.023467 s[racon::Polisher::initialize] transformed data into windows 0.000446 s[racon::Polisher::polish] generating consensus [=>                  ] 0.171498 s[racon::Polisher::polish] generating consensus [==>                 ] 0.340568 s[racon::Polisher::polish] generating consensus [===>                ] 0.468129 s[racon::Polisher::polish] generating consensus [====>               ] 0.549873 s[racon::Polisher::polish] generating consensus [=====>              ] 0.631529 s[racon::Polisher::polish] generating consensus [======>             ] 0.724936 s[racon::Polisher::polish] generating consensus [=======>            ] 0.826350 s[racon::Polisher::polish] generating consensus [========>           ] 0.959396 s[racon::Polisher::polish] generating consensus [=========>          ] 1.179727 s[racon::Polisher::polish] generating consensus [==========>         ] 1.418571 s[racon::Polisher::polish] generating consensus [===========>        ] 1.808227 s[racon::Polisher::polish] generating consensus [============>       ] 2.119411 s[racon::Polisher::polish] generating consensus [=============>      ] 2.389411 s[racon::Polisher::polish] generating consensus [==============>     ] 2.636430 s[racon::Polisher::polish] generating consensus [===============>    ] 2.774024 s[racon::Polisher::polish] generating consensus [================>   ] 2.998656 s[racon::Polisher::polish] generating consensus [=================>  ] 3.082932 s[racon::Polisher::polish] generating consensus [==================> ] 3.312829 s[racon::Polisher::polish] generating consensus [===================>] 3.537251 s[racon::Polisher::polish] generating consensus [====================] 3.695786 s[racon::Polisher::] total = 3.754314 s
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon (Test #2)" name="1" time="103.62662434577942">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [racon::Polisher::initialize] loaded target sequences 0.000935 s[racon::Polisher::initialize] loaded sequences 0.012512 s[racon::Polisher::initialize] loaded overlaps 0.000551 s[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.061597 s[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.106143 s[racon::Polisher::initialize] aligning overlaps [===>                ] 0.148116 s[racon::Polisher::initialize] aligning overlaps [====>               ] 0.173849 s[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.223290 s[racon::Polisher::initialize] aligning overlaps [======>             ] 0.250751 s[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.289696 s[racon::Polisher::initialize] aligning overlaps [========>           ] 0.340448 s[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.415396 s[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.461624 s[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.490418 s[racon::Polisher::initialize] aligning overlaps [============>       ] 0.541011 s[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.606515 s[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.660111 s[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.713088 s[racon::Polisher::initialize] aligning overlaps [================>   ] 0.777017 s[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.829891 s[racon::Polisher::initialize] aligning overlaps [==================> ] 0.862455 s[racon::Polisher::initialize] aligning overlaps [===================>] 0.904618 s[racon::Polisher::initialize] aligning overlaps [====================] 1.040252 s[racon::Polisher::initialize] transformed data into windows 0.000324 s[racon::Polisher::polish] generating consensus [=>                  ] 0.084920 s[racon::Polisher::polish] generating consensus [==>                 ] 0.172187 s[racon::Polisher::polish] generating consensus [===>                ] 0.248683 s[racon::Polisher::polish] generating consensus [====>               ] 0.303173 s[racon::Polisher::polish] generating consensus [=====>              ] 0.344207 s[racon::Polisher::polish] generating consensus [======>             ] 0.376042 s[racon::Polisher::polish] generating consensus [=======>            ] 0.416952 s[racon::Polisher::polish] generating consensus [========>           ] 0.460960 s[racon::Polisher::polish] generating consensus [=========>          ] 0.504335 s[racon::Polisher::polish] generating consensus [==========>         ] 0.565704 s[racon::Polisher::polish] generating consensus [===========>        ] 0.673802 s[racon::Polisher::polish] generating consensus [============>       ] 0.788032 s[racon::Polisher::polish] generating consensus [=============>      ] 0.945573 s[racon::Polisher::polish] generating consensus [==============>     ] 1.122865 s[racon::Polisher::polish] generating consensus [===============>    ] 1.258401 s[racon::Polisher::polish] generating consensus [================>   ] 1.381403 s[racon::Polisher::polish] generating consensus [=================>  ] 1.508722 s[racon::Polisher::polish] generating consensus [==================> ] 1.582277 s[racon::Polisher::polish] generating consensus [===================>] 1.688669 s[racon::Polisher::polish] generating consensus [====================] 2.225211 s[racon::Polisher::] total = 3.280675 s
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #1)" name="0" time="141.62308645248413">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "fe357194c6f85345",   "src": "hda"  },  "library|input_2": {   "id": "35733a138213779d",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "68356403b69dda26",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/a/1/c/dataset_a1c543b9-e1a1-4eed-89ed-f6d688ab3f59.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/a/1/c/dataset_a1c543b9-e1a1-4eed-89ed-f6d688ab3f59.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/d/b/8/dataset_db80db96-72e7-490a-9acc-4a2f96435976.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/1/c/c/dataset_1cc605d8-c1da-405b-9b00-57e17062135a.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/d/0/8/dataset_d086393e-475e-4aea-bb49-1c1e5e7bca2f.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:42:15.300174",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qgnxj",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "58ab3b468b230576",  "inputs": {   "input_1": {    "id": "fe357194c6f85345",    "src": "hda",    "uuid": "db80db96-72e7-490a-9acc-4a2f96435976"   },   "input_2": {    "id": "35733a138213779d",    "src": "hda",    "uuid": "1cc605d8-c1da-405b-9b00-57e17062135a"   },   "own_file": {    "id": "68356403b69dda26",    "src": "hda",    "uuid": "a1c543b9-e1a1-4eed-89ed-f6d688ab3f59"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173033.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:43:53"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173033.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:43:53"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/1/c/dataset_a1c543b9-e1a1-4eed-89ed-f6d688ab3f59.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  bucket 12: 70%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 2 of 15\nGetting block 1 of 15\n  Reserving size (1554) for bucket 2\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  bucket 7: 90%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "55216237fb7f601b",    "src": "hda",    "uuid": "d086393e-475e-4aea-bb49-1c1e5e7bca2f"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 150, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 152, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/1/c/dataset_a1c543b9-e1a1-4eed-89ed-f6d688ab3f59.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  bucket 12: 70%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 2 of 15\nGetting block 1 of 15\n  Reserving size (1554) for bucket 2\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  bucket 7: 90%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:44:02.806633",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_ggft8lv8.sam v. /tmp/history_bam_converted_to_sam_92us7r6o.sam )\n--- local_file\n+++ history_data\n@@ -1,74 +1,75 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/116/tmp -O bam -o /galaxy/server/database/objects/d/0/8/dataset_d086393e-475e-4aea-bb49-1c1e5e7bca2f.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D\u003eFFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-\u003cCCBGHHHGEFFFFHH.C/\u003cAEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1\u003e\u003e1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG\u003cGDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB\u003e--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB\u003eFFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF-\u003e@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@\u003eEAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF\u003c..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C\u003cEGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@\u003cFGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0\u003cC;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t\u003eA33\u003eFFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 0, "time_seconds": 141.62308645248413, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/a/1/c/dataset_a1c543b9-e1a1-4eed-89ed-f6d688ab3f59.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 3: 40%  bucket 4: 20%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 3: 70%  bucket 4: 40%  bucket 3: 80%  bucket 4: 50%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Entering block accumulator loop for bucket 9:  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 30%  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 12: 10%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 12: 30%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 12: 60%  bucket 11: 100%  bucket 12: 70%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 2 of 15Getting block 1 of 15  Reserving size (1554) for bucket 2  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 1: 50%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 8: 60%  bucket 7: 50%  bucket 8: 70%  bucket 7: 60%  bucket 8: 80%  bucket 7: 70%  bucket 8: 90%  bucket 7: 80%  bucket 8: 100%  bucket 7: 90%  Sorting block of length 1179 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 13: 90%  bucket 14: 60%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #2)" name="1" time="143.9078643321991">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "96bd6afb2fffcd64",   "src": "hdca"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired_collection",  "library|unaligned_file": true,  "reference_genome|own_file": {   "id": "20c5c55659137a85",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\u0027 genome.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/5/4/e/dataset_54e8d533-28e3-4291-af4c-e6efbaca3100.dat\u0027 input_f.fastq \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/f/7/7/dataset_f7769fb4-a73b-49d8-b4b8-c0398fdee756.dat\u0027 input_r.fastq \u0026\u0026    bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027 --un-conc \u0027/galaxy/server/database/objects/f/c/0/dataset_fc0e207c-0472-4ace-b86e-2977a622617b.dat\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/0/8/c/dataset_08c68136-e108-4694-9a37-6acab4c9a3da.dat\u0027  \u0026\u0026 mv \u0027/galaxy/server/database/objects/f/c/0/dataset_fc0e207c-0472-4ace-b86e-2977a622617b.1.dat\u0027 \u0027/galaxy/server/database/objects/f/c/0/dataset_fc0e207c-0472-4ace-b86e-2977a622617b.dat\u0027 \u0026\u0026 mv \u0027/galaxy/server/database/objects/f/c/0/dataset_fc0e207c-0472-4ace-b86e-2977a622617b.2.dat\u0027 \u0027/galaxy/server/database/objects/1/0/6/dataset_10607bfe-aaab-41b9-aa7d-8e1a8b2cdfa0.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:42:35.849623",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-xhk9k",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "453f011387975b99",  "inputs": {   "input_11": {    "id": "c0822a612a0cfc62",    "src": "hda",    "uuid": "54e8d533-28e3-4291-af4c-e6efbaca3100"   },   "input_12": {    "id": "c9b5b31cdbf10a05",    "src": "hda",    "uuid": "f7769fb4-a73b-49d8-b4b8-c0398fdee756"   },   "own_file": {    "id": "20c5c55659137a85",    "src": "hda",    "uuid": "a417955a-8714-49ba-a2fa-c552daca6ae0"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173036.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:43:56"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173035.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:43:55"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "bf0d9f4ae7c260b3",    "src": "hda",    "uuid": "08c68136-e108-4694-9a37-6acab4c9a3da"   },   "output_unaligned_reads_l": {    "id": "664320d9b6d15825",    "src": "hda",    "uuid": "fc0e207c-0472-4ace-b86e-2977a622617b"   },   "output_unaligned_reads_r": {    "id": "525e808c95ea0e63",    "src": "hda",    "uuid": "10607bfe-aaab-41b9-aa7d-8e1a8b2cdfa0"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:44:07.269928",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_px0d4lxa.sam v. /tmp/history_bam_converted_to_sam_h3dqnm0a.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome --passthrough -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/120/tmp -O bam -o /galaxy/server/database/objects/0/8/c/dataset_08c68136-e108-4694-9a37-6acab4c9a3da.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n@@ -107,24 +126,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF\u003cGGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//\u003e\u003e1F10\u003eB?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11\u003c/?//\u003c@?/F\u003c\u003c\u003cA-\u003cFBGH0.00=G0\u003c\u003cC//./0;;GC....\u003cC.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA\u003e\u003eABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10\u003eGGFGHHGHFFBGFGB2\u003eF\u003cEEF0@C@9:AAF00;9@-9.;FBBBBB-\u003e@;-A@FF\u003c-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0\u003cEFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD\u003eD\u003eD9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3\u003e\u003eA@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE\u003c/ECDFHHBF1DGBFBFGFH\u003c1GHGDGGFDFE0/\u003c--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?-\u003e;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C\u003c-\u003e.ADDGE1GA\u003cDBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA\u003eABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF\u003c@-9?BDEFFF?B--?DFFFB9FA\u003eB;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG\u003cC???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tABBAAFFF@FFFGGGGGGGGGGHHHHHHGHHHHHGGGGGHHHHHHHHGHGHHHHHHHHHHHGHGHFHFGE?CGDGGHHGGGGGGGHHHHGHGGGGGGFGGGHGHGGGGGGGGGGGGGGGGGGDGAFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFB/9FFBFFFFFFFFFFFFFD@D=BEFFF;FDDB////B=CF-.;BAFFFFFF;;BFE/BFFFFB:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tBBBBBFFFFFDFGGGGGGGFGGGGHGGHHHHHHHGFFHHCHGGGGGHHHHHHFHFFGFGHHHHHG0EEEHHGHFFGFFHGGGCFGEFHGGGGGHGFEEGEFHGHFFGFGGGGFGDGGGG?DCCCCCDDFGHHFHCGHGHHGHHFBAFGGHE.\u003cDCDD\u003cCD;GFFEFHH.@?A//B0F0/;09CFFBBCF0;;F;B0;009FBFFB9.9ADDFFFFAACAC;-9;BB/B././9//;//...-;///---;9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tBBBBBFFFFFFFGGGGGGGGGGGGHHHGGGGGGHHHGGGGGFCEGGHHHGHHGGGEGGHHHAFGGGGGGAFG//EGHHHHCGEHHHHEEHHFHGHFHHGGEF/FGGC?FDFH2DHHFFGGFGHHHHGGHHFGHHGHGHHGFHDHBGBBGHHFHHGGCCDC\u003c=D\u003cDGHHC;CGFCCFBECDG?FGGA-;EB9FBGFFBBF\u003eDFFFE?FFF/--;;9/:BFFFBA///9----;B.//////;...---9---\tYT:Z:UP\n" ], "status": "failure", "test_index": 1, "time_seconds": 143.9078643321991, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 2: 10%  bucket 1: 10%  bucket 2: 20%  bucket 1: 20%  bucket 2: 30%  bucket 2: 40%  bucket 1: 30%  bucket 2: 50%  bucket 1: 40%  bucket 2: 60%  bucket 1: 50%  bucket 1: 60%  bucket 2: 70%  bucket 1: 70%  bucket 2: 80%  bucket 1: 80%  bucket 2: 90%  bucket 1: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 4: 40%  bucket 3: 30%  bucket 4: 50%  bucket 3: 40%  bucket 4: 60%  bucket 3: 50%  bucket 4: 70%  bucket 3: 60%  bucket 4: 80%  bucket 3: 70%  bucket 4: 90%  bucket 3: 80%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 12: 40%  bucket 11: 70%  bucket 12: 50%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 1: 50%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 2: 70%  bucket 1: 70%  bucket 2: 80%  bucket 1: 80%  bucket 1: 90%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 90%  Entering block accumulator loop for bucket 10:  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  bucket 13: 80%  bucket 14: 40%  bucket 13: 90%  bucket 14: 50%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #3)" name="2" time="116.20453000068665">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "c0822a612a0cfc62",   "src": "hda"  },  "library|input_2": {   "id": "c9b5b31cdbf10a05",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "20c5c55659137a85",   "src": "hda"  },  "reference_genome|source": "history",  "rg|PL": "CAPILLARY",  "rg|read_group_id_conditional|ID": "rg1",  "rg|rg_selector": "set" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/5/4/e/dataset_54e8d533-28e3-4291-af4c-e6efbaca3100.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/f/7/7/dataset_f7769fb4-a73b-49d8-b4b8-c0398fdee756.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/5/3/9/dataset_5390993a-f6dc-4ff6-8305-c457017c3cb6.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:42:48.649384",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-xj9zq",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "90efedfd5755dcd3",  "inputs": {   "input_1": {    "id": "c0822a612a0cfc62",    "src": "hda",    "uuid": "54e8d533-28e3-4291-af4c-e6efbaca3100"   },   "input_2": {    "id": "c9b5b31cdbf10a05",    "src": "hda",    "uuid": "f7769fb4-a73b-49d8-b4b8-c0398fdee756"   },   "own_file": {    "id": "20c5c55659137a85",    "src": "hda",    "uuid": "a417955a-8714-49ba-a2fa-c552daca6ae0"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173040.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:44:00"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173039.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:43:59"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\nGetting block 6 of 15\n  Reserving size (1554) for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  bucket 11: 10%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 15\n  Entering block accumulator loop for bucket 1:\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\nGetting block 6 of 15\n  Reserving size (1554) for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Entering block accumulator loop for bucket 7:\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 50%\n  bucket 12: 80%\n  bucket 11: 60%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "1a46d403cb66b7b1",    "src": "hda",    "uuid": "5390993a-f6dc-4ff6-8305-c457017c3cb6"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\nGetting block 6 of 15\n  Reserving size (1554) for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  bucket 11: 10%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 15\n  Entering block accumulator loop for bucket 1:\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\nGetting block 6 of 15\n  Reserving size (1554) for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Entering block accumulator loop for bucket 7:\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 50%\n  bucket 12: 80%\n  bucket 11: 60%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:44:13.274439",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_awdu7fbs.sam v. /tmp/history_bam_converted_to_sam_y9_pzdss.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/121/tmp -O bam -o /galaxy/server/database/objects/5/3/9/dataset_5390993a-f6dc-4ff6-8305-c457017c3cb6.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n********\n*SNIP *\n********\n@@ -108,24 +127,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF\u003cGGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//\u003e\u003e1F10\u003eB?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11\u003c/?//\u003c@?/F\u003c\u003c\u003cA-\u003cFBGH0.00=G0\u003c\u003cC//./0;;GC....\u003cC.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA\u003e\u003eABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10\u003eGGFGHHGHFFBGFGB2\u003eF\u003cEEF0@C@9:AAF00;9@-9.;FBBBBB-\u003e@;-A@FF\u003c-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0\u003cEFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD\u003eD\u003eD9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3\u003e\u003eA@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE\u003c/ECDFHHBF1DGBFBFGFH\u003c1GHGDGGFDFE0/\u003c--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?-\u003e;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C\u003c-\u003e.ADDGE1GA\u003cDBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA\u003eABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF\u003c@-9?BDEFFF?B--?DFFFB9FA\u003eB;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG\u003cC???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tABBAAFFF@FFFGGGGGGGGGGHHHHHHGHHHHHGGGGGHHHHHHHHGHGHHHHHHHHHHHGHGHFHFGE?CGDGGHHGGGGGGGHHHHGHGGGGGGFGGGHGHGGGGGGGGGGGGGGGGGGDGAFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFB/9FFBFFFFFFFFFFFFFD@D=BEFFF;FDDB////B=CF-.;BAFFFFFF;;BFE/BFFFFB:\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tBBBBBFFFFFDFGGGGGGGFGGGGHGGHHHHHHHGFFHHCHGGGGGHHHHHHFHFFGFGHHHHHG0EEEHHGHFFGFFHGGGCFGEFHGGGGGHGFEEGEFHGHFFGFGGGGFGDGGGG?DCCCCCDDFGHHFHCGHGHHGHHFBAFGGHE.\u003cDCDD\u003cCD;GFFEFHH.@?A//B0F0/;09CFFBBCF0;;F;B0;009FBFFB9.9ADDFFFFAACAC;-9;BB/B././9//;//...-;///---;9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tBBBBBFFFFFFFGGGGGGGGGGGGHHHGGGGGGHHHGGGGGFCEGGHHHGHHGGGEGGHHHAFGGGGGGAFG//EGHHHHCGEHHHHEEHHFHGHFHHGGEF/FGGC?FDFH2DHHFFGGFGHHHHGGHHFGHHGHGHHGFHDHBGBBGHHFHHGGCCDC\u003c=D\u003cDGHHC;CGFCCFBECDG?FGGA-;EB9FBGFFBBF\u003eDFFFE?FFF/--;;9/:BFFFBA///9----;B.//////;...---9---\tYT:Z:UP\tRG:Z:rg1\n" ], "status": "failure", "test_index": 2, "time_seconds": 116.20453000068665, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/a/4/1/dataset_a417955a-8714-49ba-a2fa-c552daca6ae0.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 1: 60%  bucket 2: 30%  bucket 1: 70%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 50%  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 3: 100%  bucket 4: 90%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15Getting block 6 of 15  Reserving size (1554) for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 6: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 6: 70%  bucket 5: 60%  bucket 6: 80%  bucket 6: 90%  bucket 5: 70%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  bucket 11: 10%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 12: 70%  bucket 11: 60%  bucket 12: 80%  bucket 11: 70%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 13: 70%  bucket 14: 90%  bucket 13: 80%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 15  Entering block accumulator loop for bucket 1:  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 4: 30%  bucket 3: 20%  bucket 4: 40%  bucket 3: 30%  bucket 4: 50%  bucket 4: 60%  bucket 3: 40%  bucket 4: 70%  bucket 4: 80%  bucket 3: 50%  bucket 4: 90%  bucket 3: 60%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 70%  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  Sorting block time: 00:00:00  (Using difference cover)Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15Getting block 6 of 15  Reserving size (1554) for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Entering block accumulator loop for bucket 7:  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 8: 50%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 10: 60%  bucket 9: 50%  bucket 10: 70%  bucket 9: 60%  bucket 10: 80%  bucket 10: 90%  bucket 9: 70%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 12: 70%  bucket 11: 50%  bucket 12: 80%  bucket 11: 60%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  Sorting block time: 00:00:00Returning block of 991 for bucket 12  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #4)" name="3" time="115.46613836288452">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "a7e4f481bdfbb7e1",   "src": "hda"  },  "library|input_2": {   "id": "2d687d5d2767039a",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "3da8e52a46c2acf6",   "src": "hda"  },  "reference_genome|source": "history",  "save_mapping_stats": true }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/b/b/2/dataset_bb26645c-f121-4acf-b43b-a567ed60c37d.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/b/b/2/dataset_bb26645c-f121-4acf-b43b-a567ed60c37d.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/c/c/5/dataset_cc588a22-45d1-4cd0-b84c-1a5ce30fa9e0.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/7/b/e/dataset_7beb4354-98e8-4e72-9a9a-6bce97a241b3.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                2\u003e \u0027/galaxy/server/database/objects/4/8/d/dataset_48db2c44-7108-415b-8b67-561f9ce4ea59.dat\u0027  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/6/9/3/dataset_693a290b-16e0-4b7e-9a0a-3d9e4edb074a.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:43:23.313903",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-4ht27",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "7a71dc86cdcaf003",  "inputs": {   "input_1": {    "id": "a7e4f481bdfbb7e1",    "src": "hda",    "uuid": "cc588a22-45d1-4cd0-b84c-1a5ce30fa9e0"   },   "input_2": {    "id": "2d687d5d2767039a",    "src": "hda",    "uuid": "7beb4354-98e8-4e72-9a9a-6bce97a241b3"   },   "own_file": {    "id": "3da8e52a46c2acf6",    "src": "hda",    "uuid": "bb26645c-f121-4acf-b43b-a567ed60c37d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173073.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:44:33"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173073.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:44:33"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/b/b/2/dataset_bb26645c-f121-4acf-b43b-a567ed60c37d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 6 of 15\nGetting block 5 of 15\n  Reserving size (1554) for bucket 6\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\n  bucket 12: 80%\nReturning block of 1106 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "mapping_stats": {    "id": "27cb8f6b024d2bc2",    "src": "hda",    "uuid": "48db2c44-7108-415b-8b67-561f9ce4ea59"   },   "output": {    "id": "f58639ce9a9624d8",    "src": "hda",    "uuid": "693a290b-16e0-4b7e-9a0a-3d9e4edb074a"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 162, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 163, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"true\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/b/b/2/dataset_bb26645c-f121-4acf-b43b-a567ed60c37d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 6 of 15\nGetting block 5 of 15\n  Reserving size (1554) for bucket 6\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\n  bucket 12: 80%\nReturning block of 1106 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:44:55.986802",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_1z2773lm.sam v. /tmp/history_bam_converted_to_sam_xmehj18a.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/125/tmp -O bam -o /galaxy/server/database/objects/6/9/3/dataset_693a290b-16e0-4b7e-9a0a-3d9e4edb074a.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D\u003eFFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF\u003eCC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t\u003e\u003eA3\u003eAAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=\u003eB//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF\u003eFDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 3, "time_seconds": 115.46613836288452, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/b/b/2/dataset_bb26645c-f121-4acf-b43b-a567ed60c37d.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 8: 50%  bucket 7: 70%  bucket 8: 60%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 1: 50%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 1: 90%  bucket 1: 100%  bucket 2: 90%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 6 of 15Getting block 5 of 15  Reserving size (1554) for bucket 6  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 5:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 11: 70%  bucket 12: 30%  bucket 11: 80%  bucket 11: 90%  bucket 12: 40%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  Sorting block time: 00:00:00  bucket 12: 80%Returning block of 1106 for bucket 11  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #5)" name="4" time="136.45657515525818">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "eb645dbba69172d9",   "src": "hda"  },  "library|type": "paired_interleaved",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "07f7fd26f0d145eb",   "src": "hda"  },  "reference_genome|source": "history",  "rg|PL": "CAPILLARY",  "rg|read_group_id_conditional|ID": "rg1",  "rg|rg_selector": "set" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/f/9/2/dataset_f92cfebd-fc57-4ab6-9d95-edb54448d73a.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/f/9/2/dataset_f92cfebd-fc57-4ab6-9d95-edb54448d73a.dat\u0027 genome.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/d/0/9/dataset_d09d3d91-c9e5-4a4f-aa94-2f4c953c863e.dat\u0027 input_il.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   --interleaved \u0027input_il.fastq\u0027                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/3/7/a/dataset_37aa76ab-97cf-46e3-93b2-76b2c1ca84b3.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:44:31.664806",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-x2v7h",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "8114a815c95d3015",  "inputs": {   "input_1": {    "id": "eb645dbba69172d9",    "src": "hda",    "uuid": "d09d3d91-c9e5-4a4f-aa94-2f4c953c863e"   },   "own_file": {    "id": "07f7fd26f0d145eb",    "src": "hda",    "uuid": "f92cfebd-fc57-4ab6-9d95-edb54448d73a"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173171.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:46:11"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173170.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:46:10"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n50.00% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/f/9/2/dataset_f92cfebd-fc57-4ab6-9d95-edb54448d73a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  bucket 3: 20%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 30%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 10%\n  bucket 3: 70%\n  bucket 4: 20%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 30%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 6: 80%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "08a6710bc9d3e05f",    "src": "hda",    "uuid": "37aa76ab-97cf-46e3-93b2-76b2c1ca84b3"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 166, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 173, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n50.00% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/f/9/2/dataset_f92cfebd-fc57-4ab6-9d95-edb54448d73a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  bucket 3: 20%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 30%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 10%\n  bucket 3: 70%\n  bucket 4: 20%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 30%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 6: 80%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:46:19.523196",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_hsj7_0ib.sam v. /tmp/history_bam_converted_to_sam_8b77f2m_.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/134/tmp -O bam -o /galaxy/server/database/objects/3/7/a/dataset_37aa76ab-97cf-46e3-93b2-76b2c1ca84b3.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n" ], "status": "failure", "test_index": 4, "time_seconds": 136.45657515525818, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/f/9/2/dataset_f92cfebd-fc57-4ab6-9d95-edb54448d73a.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 2: 40%  bucket 1: 50%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 1: 90%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%Getting block 4 of 15  bucket 3: 20%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 30%  bucket 3: 40%  Entering block accumulator loop for bucket 4:  bucket 3: 50%  bucket 3: 60%  bucket 4: 10%  bucket 3: 70%  bucket 4: 20%  bucket 3: 80%  bucket 3: 90%  bucket 4: 30%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  bucket 6: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 10: 40%  bucket 9: 30%  bucket 10: 50%  bucket 9: 40%  bucket 10: 60%  bucket 9: 50%  bucket 10: 70%  bucket 9: 60%  bucket 10: 80%  bucket 10: 90%  bucket 9: 70%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  bucket 5: 10%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  bucket 6: 80%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 9: 80%  bucket 10: 50%  bucket 9: 90%  bucket 10: 60%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 13: 20%  bucket 14: 10%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index3 reads; of these:  3 (100.00%) were paired; of these:    2 (66.67%) aligned concordantly 0 times    1 (33.33%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    2 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    2 pairs aligned 0 times concordantly or discordantly; of these:      4 mates make up the pairs; of these:        3 (75.00%) aligned 0 times        1 (25.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times50.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #6)" name="5" time="165.36168837547302">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "943699114e8193a1",   "src": "hda"  },  "library|input_2": {   "id": "ac2c06e5fa5b71db",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "342f070c1a12a093",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/d/0/7/dataset_d07beee6-22ad-4728-a700-1b2c73129f15.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/c/3/e/dataset_c3e19e33-77d9-4397-9183-4e8559091130.dat\u0027 input_r.fastq.gz \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq.gz\u0027 -2 \u0027input_r.fastq.gz\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/9/5/d/dataset_95d35128-1ed5-4424-adbd-58d21ae10466.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:45:01.168559",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qv8hq",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "7a6e3d6276e76551",  "inputs": {   "input_1": {    "id": "943699114e8193a1",    "src": "hda",    "uuid": "d07beee6-22ad-4728-a700-1b2c73129f15"   },   "input_2": {    "id": "ac2c06e5fa5b71db",    "src": "hda",    "uuid": "c3e19e33-77d9-4397-9183-4e8559091130"   },   "own_file": {    "id": "342f070c1a12a093",    "src": "hda",    "uuid": "1acb7366-9017-441b-9661-a31f0f641abf"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173186.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:46:26"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173185.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:46:25"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 2: 80%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 14: 30%\n  bucket 15: 50%\n  bucket 14: 40%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 60%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "9af19b04974b4004",    "src": "hda",    "uuid": "95d35128-1ed5-4424-adbd-58d21ae10466"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 169, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 2: 80%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 14: 30%\n  bucket 15: 50%\n  bucket 14: 40%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 60%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:46:52.983277",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam__yoouiq1.sam v. /tmp/history_bam_converted_to_sam_vjd5w_eu.sam )\n--- local_file\n+++ history_data\n@@ -1,74 +1,75 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 input_f.fastq.gz -2 input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/138/tmp -O bam -o /galaxy/server/database/objects/9/5/d/dataset_95d35128-1ed5-4424-adbd-58d21ae10466.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D\u003eFFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tBBABAFFFFFFFGGGGGGGGGGHHHHHGFGHHHHHGDGHGGGGGHHGHHHGHHHHEHHF1EEFHHHHHHHGBGHFFFGFHHEFGC1EFGHFCEFGHDGC/EEGHFCEFEHFEGGEHHHHFFGDGCDGHHEHGD?C@\u003cAC\u003cCF?AF1GHHHHHHHGEHHF\u003cCGFGHHHE?.CEGCCF0.CBBFGF?9:;0FFFE0;FBFBB009CFD?:/FGFBFBBFBF/B//FC.;.:9.;EFF...9FFFFB/:/A///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:11928:24197\t77\t*\t0\t0\t*\t*\t0\t0\tACGTAGGTGCGATAAATAATGGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATA\tCDDCCFCFFFBCGGGGGGGGGGHHHGHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHGGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHGHHHHGHHGHHHHGGHGEEGGGGFHHFHHHGHGEHHHHHHHHHHHHHHHHHGGGGGGFGGGGGGGGFFGGGFGFGAEFEFGFEAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF@D9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:11928:24197\t141\t*\t0\t0\t*\t*\t0\t0\tCCTCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTAT\tBCCDACCDDDDDGGGGGGGGGGHHHHHGGGGGHHHHHHGHHHHBGHHHHHGGGGGHFGHGHHHHHHHHHHHHHHHHGHHHHGGHHHHHHGHHHHGGGGHHHHHHHHHFHHEHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGGHHHHCHGHGHGCCEGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFA:.AADEFFFBFEF;DAF:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:13832:4398\t77\t*\t0\t0\t*\t*\t0\t0\tCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGACAAAAAAAAACACACAACAACCAACACCCAGTAGACTAGTGCGTC\tAAABABCAFFFFGGGGGGGGGGHFHHHHHHHHHGFFHHGGHGGGGGHHHHHHHHHHFHHHHGHHHHHGGHGHGGHGGGGGGGHGFFGGGGDGGHHHHGGGGFGGGGGCFGGEGCDGGGGGGGGGGGGEGF?;BFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFF/FFFFFFC.;BFEAFFFFF;@FFBFFFFEF?/FFFFE----:...:...9....9.9...:.9//9////;/9-.-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:7626:10048\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGAA\tCCCCCFFFFFFFGGGGGGGGGGGHHHHEFEFHHGGGGGGHHHGEF?GGGGGGHHHHHHGGGEGEHHHHGGGGGGGGGGGGGGHHHHHHHHHHHHFFCGHGHHHHGG/BFGDGG2FFHFHGHH0FHFGFHHHHFFHHHHHHHGG\u003cFHHHFGHHGGGGFHHHGGGGGGHGGHGGGHHHHHHFGGGGGGGFFFGGFGGBFGGGGGGGGGGGFGFFFCFFDFFFFFFFFF;./;AAAFFFFFFAFABBFFFB/;;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:7626:10048\t141\t*\t0\t0\t*\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTCTGGGGTCGGCGGATTT\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHHFGHHHHHHHHHHHHGHHHHGGFHHHFGGGGHHHGHHHHHHHHHHHFGHHHHHGHGHGHHGCGCGGFHHHGGGGGGGGGGGGGGGGGGGFFFAFFFFFFAA-AFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBFFDFFFFFB-\u003c\u003e;\u003e@BE\u003c:000.0.0/0\u003c00\u003c0:\u003e..-\u003c\u003c\u003c---.0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1109:11270:12255\t77\t*\t0\t0\t*\t*\t0\t0\tAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAGGTAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTT\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHFFFHHHGGGFGGFFHGEGCHHGGGGHHHHHHGGGGGGHHGHGGGGGGGGGCEGFCHHHHHGFHFHHHHGFHHGGFHGGGFD/EFGEFFDGFHHGEFCEHFFGHHHGHHHHHHHHHGCGHHHGGFGHHHHGHEHHCFFADGHHHD?CG.CGHBCBFBFFGGFFFGFFFFF.CFBFBCFFFFGFFFFFGGGFFFFFDFAFFFFFF-@DBFFFFBFD---.;BAA.\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 5, "time_seconds": 165.36168837547302, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  bucket 2: 80%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  bucket 3: 10%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Entering block accumulator loop for bucket 13:  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 13: 20%  bucket 14: 10%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 7: 90%  bucket 8: 60%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 14: 10%  bucket 15: 10%  bucket 15: 20%  bucket 14: 20%  bucket 15: 30%  bucket 15: 40%  bucket 14: 30%  bucket 15: 50%  bucket 14: 40%  bucket 15: 60%  bucket 15: 70%  bucket 14: 50%  bucket 15: 80%  bucket 15: 90%  bucket 14: 60%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15  Sorting block time: 00:00:00Returning block of 967 for bucket 14Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #7)" name="6" time="162.23601150512695">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "997e562ca29b943d",   "src": "hda"  },  "library|input_2": {   "id": "47b6bcbe37a9ef49",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "342f070c1a12a093",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/4/c/a/dataset_4caa9f05-ea91-43ca-beec-e912a59c2cef.dat\u0027 input_f.fastq.bz2 \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/1/a/6/dataset_1a610a7c-1864-4e69-b4de-665c893e340e.dat\u0027 input_r.fastq.bz2 \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq.bz2\u0027 -2 \u0027input_r.fastq.bz2\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/0/3/1/dataset_0316c9a8-c953-4ad6-af25-e1e6283c7341.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:45:06.971124",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-2jxmf",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "ae96c8ab70feedff",  "inputs": {   "input_1": {    "id": "997e562ca29b943d",    "src": "hda",    "uuid": "4caa9f05-ea91-43ca-beec-e912a59c2cef"   },   "input_2": {    "id": "47b6bcbe37a9ef49",    "src": "hda",    "uuid": "1a610a7c-1864-4e69-b4de-665c893e340e"   },   "own_file": {    "id": "342f070c1a12a093",    "src": "hda",    "uuid": "1acb7366-9017-441b-9661-a31f0f641abf"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173187.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:46:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173187.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:46:27"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "d8b5de2422fe0a89",    "src": "hda",    "uuid": "0316c9a8-c953-4ad6-af25-e1e6283c7341"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 171, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 172, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:46:55.836092",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_uh8ho2an.sam v. /tmp/history_bam_converted_to_sam_w243gfxa.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 /tmp/gxy-2jxmf-bs9gd_41mate1 -2 /tmp/gxy-2jxmf-bs9gd_41mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/139/tmp -O bam -o /galaxy/server/database/objects/0/3/1/dataset_0316c9a8-c953-4ad6-af25-e1e6283c7341.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n@@ -107,24 +126,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF\u003cGGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//\u003e\u003e1F10\u003eB?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11\u003c/?//\u003c@?/F\u003c\u003c\u003cA-\u003cFBGH0.00=G0\u003c\u003cC//./0;;GC....\u003cC.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA\u003e\u003eABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10\u003eGGFGHHGHFFBGFGB2\u003eF\u003cEEF0@C@9:AAF00;9@-9.;FBBBBB-\u003e@;-A@FF\u003c-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0\u003cEFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD\u003eD\u003eD9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3\u003e\u003eA@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE\u003c/ECDFHHBF1DGBFBFGFH\u003c1GHGDGGFDFE0/\u003c--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?-\u003e;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C\u003c-\u003e.ADDGE1GA\u003cDBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA\u003eABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF\u003c@-9?BDEFFF?B--?DFFFB9FA\u003eB;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG\u003cC???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tABBAAFFF@FFFGGGGGGGGGGHHHHHHGHHHHHGGGGGHHHHHHHHGHGHHHHHHHHHHHGHGHFHFGE?CGDGGHHGGGGGGGHHHHGHGGGGGGFGGGHGHGGGGGGGGGGGGGGGGGGDGAFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFB/9FFBFFFFFFFFFFFFFD@D=BEFFF;FDDB////B=CF-.;BAFFFFFF;;BFE/BFFFFB:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tBBBBBFFFFFDFGGGGGGGFGGGGHGGHHHHHHHGFFHHCHGGGGGHHHHHHFHFFGFGHHHHHG0EEEHHGHFFGFFHGGGCFGEFHGGGGGHGFEEGEFHGHFFGFGGGGFGDGGGG?DCCCCCDDFGHHFHCGHGHHGHHFBAFGGHE.\u003cDCDD\u003cCD;GFFEFHH.@?A//B0F0/;09CFFBBCF0;;F;B0;009FBFFB9.9ADDFFFFAACAC;-9;BB/B././9//;//...-;///---;9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tBBBBBFFFFFFFGGGGGGGGGGGGHHHGGGGGGHHHGGGGGFCEGGHHHGHHGGGEGGHHHAFGGGGGGAFG//EGHHHHCGEHHHHEEHHFHGHFHHGGEF/FGGC?FDFH2DHHFFGGFGHHHHGGHHFGHHGHGHHGFHDHBGBBGHHFHHGGCCDC\u003c=D\u003cDGHHC;CGFCCFBECDG?FGGA-;EB9FBGFFBBF\u003eDFFFE?FFF/--;;9/:BFFFBA///9----;B.//////;...---9---\tYT:Z:UP\n" ], "status": "failure", "test_index": 6, "time_seconds": 162.23601150512695, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  bucket 3: 10%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 4: 10%  bucket 3: 40%  bucket 4: 20%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Entering block accumulator loop for bucket 11:  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 1: 60%  bucket 2: 30%  bucket 1: 70%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 50%  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  Sorting block time: 00:00:00Returning block of 390 for bucket 1  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  bucket 6: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 7: 60%  bucket 8: 50%  bucket 7: 70%  bucket 8: 60%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Entering block accumulator loop for bucket 9:  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #8)" name="7" time="119.72955131530762">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "d61f392d15009ac1",   "src": "hda"  },  "library|input_2": {   "id": "b2ec27be53207bf3",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "342f070c1a12a093",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/1/3/0/dataset_130a6e75-e336-499c-8708-d9e9acff5835.dat\u0027 input_f.fasta \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/a/0/c/dataset_a0cb16a4-e906-4b66-914d-4c949b482236.dat\u0027 input_r.fasta \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027  -f  -1 \u0027input_f.fasta\u0027 -2 \u0027input_r.fasta\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/a/d/2/dataset_ad292c7c-03f0-4feb-a08b-75184af89f97.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2022-05-21T22:45:22.420472",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-8wgb4",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "c65dcdc75a910330",  "inputs": {   "input_1": {    "id": "d61f392d15009ac1",    "src": "hda",    "uuid": "130a6e75-e336-499c-8708-d9e9acff5835"   },   "input_2": {    "id": "b2ec27be53207bf3",    "src": "hda",    "uuid": "a0cb16a4-e906-4b66-914d-4c949b482236"   },   "own_file": {    "id": "342f070c1a12a093",    "src": "hda",    "uuid": "1acb7366-9017-441b-9661-a31f0f641abf"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173193.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:46:33"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173192.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:46:32"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 80%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "e9a38178844acf73",    "src": "hda",    "uuid": "ad292c7c-03f0-4feb-a08b-75184af89f97"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 175, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 176, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 80%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:46:56.361213",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_nk8ayofv.sam v. /tmp/history_bam_converted_to_sam_feye0yen.sam )\n--- local_file\n+++ history_data\n@@ -1,26 +1,27 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/140/tmp -O bam -o /galaxy/server/database/objects/a/d/2/dataset_ad292c7c-03f0-4feb-a08b-75184af89f97.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-101\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-74\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M8I3M1I5M\t=\t1\t-239\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-90\tXN:i:0\tXM:i:6\tXO:i:3\tXG:i:13\tNM:i:19\tMD:Z:2C0A67A115A46T1A1\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t3\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-149\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-44\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M8I3M1I5M\t=\t1\t-239\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-90\tXN:i:0\tXM:i:6\tXO:i:3\tXG:i:13\tNM:i:19\tMD:Z:2C0A67A115A46T1A1\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t24\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t2\t0\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-107\tXN:i:0\tXM:i:5\tXO:i:1\tXG:i:24\tNM:i:29\tMD:Z:0A0T1A10A56A155\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-140\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n@@ -175,6 +176,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:7437:24508\t77\t*\t0\t0\t*\t*\t0\t0\tACACACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTGTCTCTTATACACATCTCCGAGCCCACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n" ], "status": "failure", "test_index": 7, "time_seconds": 119.72955131530762, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/a/c/dataset_1acb7366-9017-441b-9661-a31f0f641abf.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15Getting block 2 of 15  Reserving size (1554) for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 1: 100%  bucket 2: 80%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 3: 70%  bucket 4: 40%  bucket 3: 80%  bucket 4: 50%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  bucket 4: 90%  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #9)" name="8" time="144.1473686695099">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/2/e/1/dataset_2e1b7ca3-facd-4d41-84f1-956130ac87ab.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 14: 100%  bucket 13: 90%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 1: 30%  bucket 2: 10%  bucket 1: 40%  bucket 1: 50%  bucket 2: 20%  bucket 1: 60%  bucket 1: 70%  bucket 2: 30%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  Sorting block time: 00:00:00Returning block of 390 for bucket 1  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  bucket 4: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 7: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 7: 50%  bucket 8: 60%  bucket 7: 60%  bucket 8: 70%  bucket 7: 70%  bucket 8: 80%  bucket 8: 90%  bucket 7: 80%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15Getting block 10 of 15  Reserving size (1554) for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 9  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%Getting block 14 of 15  Reserving size (1554) for bucket 14  bucket 13: 20%  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #10)" name="9" time="108.50156569480896">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/2/e/1/dataset_2e1b7ca3-facd-4d41-84f1-956130ac87ab.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 1: 100%  bucket 2: 70%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  bucket 3: 10%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 4: 10%  bucket 3: 40%  bucket 4: 20%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 6: 80%  bucket 5: 70%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Entering block accumulator loop for bucket 7:  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 7: 100%  bucket 8: 90%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  bucket 12: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 2:  bucket 1: 30%  bucket 1: 40%  bucket 2: 10%  bucket 1: 50%  bucket 2: 20%  bucket 1: 60%  bucket 1: 70%  bucket 2: 30%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 3: 80%  bucket 4: 70%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  Entering block accumulator loop for bucket 7:  bucket 8: 10%  bucket 7: 10%  bucket 8: 20%  bucket 7: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 10: 70%  bucket 9: 60%  bucket 10: 80%  bucket 9: 70%  bucket 10: 90%  bucket 9: 80%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Entering block accumulator loop for bucket 13:  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #1)" name="0" time="145.9767563343048">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.049 sec; CPU: 0.010 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.06 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/7/b/9/dataset_7b9cd83a-cf8e-4b91-9738-b39435cdca80.dat[main] Real time: 0.026 sec; CPU: 0.058 sec[bwa_aln_core] convert to sequence coordinate... 0.00 sec[bwa_aln_core] refine gapped alignments... 0.00 sec[bwa_aln_core] print alignments... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/7/b/9/dataset_7b9cd83a-cf8e-4b91-9738-b39435cdca80.dat[main] Real time: 0.007 sec; CPU: 0.003 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #2)" name="1" time="145.6628816127777">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.057 sec; CPU: 0.012 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.05 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/9/4/7/dataset_9474be9e-8d05-4b57-9784-e72477d9473b.dat[main] Real time: 0.023 sec; CPU: 0.052 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/4/8/7/dataset_487c7967-a428-4b1c-aa5d-d67e0f0d9caa.dat[main] Real time: 0.027 sec; CPU: 0.046 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/9/4/7/dataset_9474be9e-8d05-4b57-9784-e72477d9473b.dat /galaxy/server/database/objects/4/8/7/dataset_487c7967-a428-4b1c-aa5d-d67e0f0d9caa.dat[main] Real time: 0.011 sec; CPU: 0.005 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #3)" name="2" time="122.72885465621948">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.050 sec; CPU: 0.011 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.05 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/b/5/8/dataset_b580aaed-486b-4978-aabe-e84622a63e76.dat[main] Real time: 0.023 sec; CPU: 0.053 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/0/0/9/dataset_00974a6a-07dd-4fd9-8750-086457ba2590.dat[main] Real time: 0.023 sec; CPU: 0.045 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/b/5/8/dataset_b580aaed-486b-4978-aabe-e84622a63e76.dat /galaxy/server/database/objects/0/0/9/dataset_00974a6a-07dd-4fd9-8750-086457ba2590.dat[main] Real time: 0.010 sec; CPU: 0.006 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #4)" name="3" time="141.23642659187317">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.01 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.054 sec; CPU: 0.013 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.05 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/3/1/0/dataset_3106c2e7-b496-422f-9623-9859d2a1e626.dat[main] Real time: 0.026 sec; CPU: 0.055 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/3/1/0/dataset_3106c2e7-b496-422f-9623-9859d2a1e626.dat[main] Real time: 0.025 sec; CPU: 0.044 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/3/1/0/dataset_3106c2e7-b496-422f-9623-9859d2a1e626.dat /galaxy/server/database/objects/3/1/0/dataset_3106c2e7-b496-422f-9623-9859d2a1e626.dat[main] Real time: 0.012 sec; CPU: 0.008 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #5)" name="4" time="134.26906943321228">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.056 sec; CPU: 0.011 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.06 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/e/c/e/dataset_ecea2d92-a49e-488c-a748-c6998479f44b.dat[main] Real time: 0.026 sec; CPU: 0.059 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/6/c/a/dataset_6ca40c90-e14c-4ec2-b5de-8df5a3c1a376.dat[main] Real time: 0.023 sec; CPU: 0.044 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe -r @RG\tID:rg1\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/e/c/e/dataset_ecea2d92-a49e-488c-a748-c6998479f44b.dat /galaxy/server/database/objects/6/c/a/dataset_6ca40c90-e14c-4ec2-b5de-8df5a3c1a376.dat[main] Real time: 0.009 sec; CPU: 0.005 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #1)" name="0" time="131.43559622764587">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.01 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.055 sec; CPU: 0.012 sec[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)[M::mem_pestat] mean and std.dev: (192.97, 35.99)[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/e/c/e/dataset_ecea2d92-a49e-488c-a748-c6998479f44b.dat /galaxy/server/database/objects/6/c/a/dataset_6ca40c90-e14c-4ec2-b5de-8df5a3c1a376.dat[main] Real time: 0.019 sec; CPU: 0.034 sec[bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #2)" name="1" time="102.54078078269958">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.051 sec; CPU: 0.011 sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/e/4/f/dataset_e4fe0c54-c022-4af9-828d-8f6fd61cb2a1.dat[main] Real time: 0.012 sec; CPU: 0.021 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #3)" name="2" time="132.62694382667542">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.050 sec; CPU: 0.010 sec[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)[M::mem_pestat] mean and std.dev: (192.97, 35.99)[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/2/3/8/dataset_23895724-d2b0-43e8-8e12-6a6e533afe7a.dat /galaxy/server/database/objects/9/9/b/dataset_99b6505e-7499-4b04-a3e8-39e390c44ecb.dat[main] Real time: 0.020 sec; CPU: 0.036 sec[bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #4)" name="3" time="107.16225719451904">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a is localref.fa[main] Real time: 0.052 sec; CPU: 0.011 sec[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)[M::mem_pestat] mean and std.dev: (192.97, 35.99)[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 -R @RG\tID:rg1\tPL:CAPILLARY\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/e/7/c/dataset_e7c8a228-a41b-4ea8-b89e-337e00cf20e6.dat /galaxy/server/database/objects/9/9/b/dataset_99b6505e-7499-4b04-a3e8-39e390c44ecb.dat[main] Real time: 0.020 sec; CPU: 0.039 sec[bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper (Test #1)" name="0" time="132.51369285583496">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper (Test #2)" name="1" time="115.54223942756653">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #1)" name="0" time="16.463149785995483">
        
            <error type="error" message="parameter 'target_2bit': an invalid option ('phiX174') was selected (valid options: /cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,tetNig1,droYak1,papHam1,eschColi_CFT073,mm10,Homo_sapiens_AK1,petMar1,eschColi_O157H7,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,lMaj5,pseuAeru,caePb1,oryLat1,hg19_rCRS_pUC18_phiX174,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,burkPseu_1106A,myoLuc2,ce7,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,rn6,caeRem3,Araly1,caeJap4,ci2,dp4,susScr1,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,danRer4,dm2,echTel1,Arabidopsis_thaliana_TAIR10,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,13954,vicPac1,PhumU1,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,caeRem4,allMis1,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,Zea_mays_B73_RefGen_v2,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,droWil1,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,cb3,278,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,anoCar2,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,Xanthomonas_oryzae_PXO99A,triCas2,galGal4,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,musFur1,aplCal1,baciSubt,oryLat2,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,ce9,ce10,braFlo1,cerSim1,danRer10,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,dasNov1,monDom5,bosTau2,16720,gasAcu1,nomLeu1,sorAra1,bosTau8,apiMel1,hg38,Hydra_JCVI,Ptrichocarpa_156,vicPac2,hg17,loxAfr3,dipOrd1,ce8,monDom1,panPan1,259,venter1,eschColi_K12,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,caeJap3,dm6,otoGar1,bordBron,bosTau3,gadMor1,borEut13,loxAfr1,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,Tcas_3.0,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,386,arabidopsis,panTro3,fr1,ce4,IscaW1,xenTro1,felCat5,sacCer3,oryCun1,CHM13_T2T_v2.0,strPur3,ponAbe2,rheMac3,gorGor3,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,fr2,Schizosaccharomyces_pombe_1.1,panTro2,13953,priPac1,tarSyr1,16297,speTri2,caeRem2,12931,bosTau7,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,Spur_v2.6,oryza_sativa_japonica_nipponbare_IRGSP4.0,caeJap1,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,bosTauMd3,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,caePb2,AgamP3,nomLeu3,cavPor3,aptMan1,AaegL1,oviAri1,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,caeRem1,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,27835,tupBel1,20079,178,ce2,bosTau6,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,Homo_sapiens_nuHg19_mtrCRS,dasNov3,sacCer1,caePb3,ente638,eschColi_EC4115,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,panTro1,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,Bombyx_mori_p50T_2.0,tetNig2,dp3,galGal2,eschColi_TW14359,canFam1,oryCun2,apiMel4,nomLeu2,melUnd1,eriEur1,felCat8,16351,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,saiBol1,ailMel1,panTro4,turTru2,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,ce5,caeJap2,eschColi_APEC_O1,ce3,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,micMur1,calJac3,felCat4,chrPic1,rn3,hg_g1k_v37,monDom4,Amel_4.5,equCab1,otoGar3,rn5,droSim1,papAnu2,CpipJ1,bosTau5,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,droYak2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027target_2bit\u0027: an invalid option (\u0027phiX174\u0027) was selected (valid options: /cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,tetNig1,droYak1,papHam1,eschColi_CFT073,mm10,Homo_sapiens_AK1,petMar1,eschColi_O157H7,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,lMaj5,pseuAeru,caePb1,oryLat1,hg19_rCRS_pUC18_phiX174,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,burkPseu_1106A,myoLuc2,ce7,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,rn6,caeRem3,Araly1,caeJap4,ci2,dp4,susScr1,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,danRer4,dm2,echTel1,Arabidopsis_thaliana_TAIR10,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,13954,vicPac1,PhumU1,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,caeRem4,allMis1,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,Zea_mays_B73_RefGen_v2,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,droWil1,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,cb3,278,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,anoCar2,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,Xanthomonas_oryzae_PXO99A,triCas2,galGal4,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,musFur1,aplCal1,baciSubt,oryLat2,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,ce9,ce10,braFlo1,cerSim1,danRer10,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,dasNov1,monDom5,bosTau2,16720,gasAcu1,nomLeu1,sorAra1,bosTau8,apiMel1,hg38,Hydra_JCVI,Ptrichocarpa_156,vicPac2,hg17,loxAfr3,dipOrd1,ce8,monDom1,panPan1,259,venter1,eschColi_K12,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,caeJap3,dm6,otoGar1,bordBron,bosTau3,gadMor1,borEut13,loxAfr1,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,Tcas_3.0,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,386,arabidopsis,panTro3,fr1,ce4,IscaW1,xenTro1,felCat5,sacCer3,oryCun1,CHM13_T2T_v2.0,strPur3,ponAbe2,rheMac3,gorGor3,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,fr2,Schizosaccharomyces_pombe_1.1,panTro2,13953,priPac1,tarSyr1,16297,speTri2,caeRem2,12931,bosTau7,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,Spur_v2.6,oryza_sativa_japonica_nipponbare_IRGSP4.0,caeJap1,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,bosTauMd3,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,caePb2,AgamP3,nomLeu3,cavPor3,aptMan1,AaegL1,oviAri1,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,caeRem1,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,27835,tupBel1,20079,178,ce2,bosTau6,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,Homo_sapiens_nuHg19_mtrCRS,dasNov3,sacCer1,caePb3,ente638,eschColi_EC4115,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,panTro1,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,Bombyx_mori_p50T_2.0,tetNig2,dp3,galGal2,eschColi_TW14359,canFam1,oryCun2,apiMel4,nomLeu2,melUnd1,eriEur1,felCat8,16351,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,saiBol1,ailMel1,panTro4,turTru2,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,ce5,caeJap2,eschColi_APEC_O1,ce3,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,micMur1,calJac3,felCat4,chrPic1,rn3,hg_g1k_v37,monDom4,Amel_4.5,equCab1,otoGar3,rn5,droSim1,papAnu2,CpipJ1,bosTau5,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,droYak2)", "inputs": {  "output_format|out|format": "general_def",  "query": {   "id": "f2ebff295f112276",   "src": "hda"  },  "source|ref_source": "cached",  "source|target_2bit": "phiX174",  "where_to_look|strand": "--strand=both" }, "status": "error", "test_index": 0, "time_seconds": 16.463149785995483, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #2)" name="1" time="130.2368197441101">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #3)" name="2" time="117.07530570030212">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #4)" name="3" time="91.89920425415039">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #5)" name="4" time="101.35332155227661">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #6)" name="5" time="130.1943986415863">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #7)" name="6" time="108.25719952583313">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth (Test #1)" name="0" time="142.88519167900085">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "referenceSource|reference": {   "id": "7a561d1ed4bb71f8",   "src": "hda"  },  "single_or_paired|input_mate1": {   "id": "952a41f7621ae6b0",   "src": "hda"  },  "single_or_paired|input_mate2": {   "id": "01fab4d7a5af4b3d",   "src": "hda"  },  "single_or_paired|single_or_paired_opts": "paired" }, "job": {  "command_line": "mkdir index_dir \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/f/7/f/dataset_f7fad0de-a6ba-4607-89f7-47d63796ad76.dat\u0027 index_dir/genome.fa \u0026\u0026 bwameth.py index index_dir/genome.fa \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/8/1/d/dataset_81ddf82e-2bca-4019-b860-4e296e5220cb.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/7/8/5/dataset_78515ff3-d6c3-48da-85de-f522f70ad97e.dat\u0027 input_r.fastq.gz \u0026\u0026  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference \u0027index_dir/genome.fa\u0027   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -",  "command_version": "bwa-meth.py 0.2.2",  "create_time": "2022-05-21T22:52:14.681919",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-hj9st",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "b42cd894c6f012d2",  "inputs": {   "input_mate1": {    "id": "952a41f7621ae6b0",    "src": "hda",    "uuid": "81ddf82e-2bca-4019-b860-4e296e5220cb"   },   "input_mate2": {    "id": "01fab4d7a5af4b3d",    "src": "hda",    "uuid": "78515ff3-d6c3-48da-85de-f522f70ad97e"   },   "reference": {    "id": "24edc0bcbfda9836",    "src": "hda",    "uuid": "f7fad0de-a6ba-4607-89f7-47d63796ad76"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173622.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:53:42"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173620.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:53:40"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "7cbe5b418bc038b5",    "src": "hda",    "uuid": "d46c8dcd-747b-4bd5-af39-e1d7bd3f2ecf"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "readGroup": "\"\"",   "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 225, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 222, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 223, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}"  },  "state": "ok",  "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.80 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.176 sec; CPU: 1.094 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.029 CPU sec, 0.016 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.120 sec; CPU: 0.037 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R \u0027@RG\\tID:input_\\tSM:input_\u0027 -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2",  "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.80 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.176 sec; CPU: 1.094 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.029 CPU sec, 0.016 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.120 sec; CPU: 0.037 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R \u0027@RG\\tID:input_\\tSM:input_\u0027 -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:53:59.578772",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_08zc7412.sam v. /tmp/history_bam_converted_to_sam_14t1e8up.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/186/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0\u0027\u0027B\u003c\u003c\u003c00FB7\u003c000\u0027BBB0B\u003c0FFFFFFFFFFFFFFFFFBFFB\u003c7FFIFFFBBB\u003cFFB\u003c\u003c7FFIFFFFFBBFF\u003cIIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB\u003cFFFI\u003cFBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF\u003cBBFFF\u002707BBBBFFFFFFFFFFB0\u003cBF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n" ], "status": "failure", "test_index": 0, "time_seconds": 142.88519167900085, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.80 seconds elapse.[bwa_index] Update BWT... 0.03 sec[bwa_index] Pack forward-only FASTA... 0.01 sec[bwa_index] Construct SA from BWT and Occ... 0.23 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.176 sec; CPU: 1.094 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.029 CPU sec, 0.016 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.120 sec; CPU: 0.037 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth (Test #2)" name="1" time="113.5637354850769">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "referenceSource|reference": {   "id": "da3a048944caf9c0",   "src": "hda"  },  "single_or_paired|input_mate1": {   "id": "df187db3d2ab07e4",   "src": "hdca"  },  "single_or_paired|single_or_paired_opts": "paired_collection" }, "job": {  "command_line": "mkdir index_dir \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/1/d/0/dataset_1d02bcb3-ac5a-4e4d-a8e3-78bbec07edf7.dat\u0027 index_dir/genome.fa \u0026\u0026 bwameth.py index index_dir/genome.fa \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/b/8/e/dataset_b8e13bf3-ca63-445b-a6a4-b9b593f8eac8.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/b/5/6/dataset_b569c99c-df4c-4e16-8c22-a50cefb6de1a.dat\u0027 input_r.fastq.gz \u0026\u0026  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference \u0027index_dir/genome.fa\u0027   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -",  "command_version": "bwa-meth.py 0.2.2",  "create_time": "2022-05-21T22:52:50.552391",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-j667b",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "774d37e6c4e38591",  "inputs": {   "input_mate11": {    "id": "49613328288af961",    "src": "hda",    "uuid": "b8e13bf3-ca63-445b-a6a4-b9b593f8eac8"   },   "input_mate12": {    "id": "36397f9525865c05",    "src": "hda",    "uuid": "b569c99c-df4c-4e16-8c22-a50cefb6de1a"   },   "reference": {    "id": "c2b232827a170cdb",    "src": "hda",    "uuid": "1d02bcb3-ac5a-4e4d-a8e3-78bbec07edf7"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653173653.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:54:13"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653173651.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:54:11"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "e3fb887a2056ca6f",    "src": "hda",    "uuid": "dba54118-8493-41ae-be07-5c47ba35264a"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "readGroup": "\"\"",   "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 230, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}"  },  "state": "ok",  "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.83 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.189 sec; CPU: 1.103 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.027 CPU sec, 0.015 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.128 sec; CPU: 0.036 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R \u0027@RG\\tID:input_\\tSM:input_\u0027 -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2",  "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.83 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.189 sec; CPU: 1.103 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.027 CPU sec, 0.015 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.128 sec; CPU: 0.036 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R \u0027@RG\\tID:input_\\tSM:input_\u0027 -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:54:21.066894",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_hfq8tr7m.sam v. /tmp/history_bam_converted_to_sam_w8ckj6zh.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/191/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0\u0027\u0027B\u003c\u003c\u003c00FB7\u003c000\u0027BBB0B\u003c0FFFFFFFFFFFFFFFFFBFFB\u003c7FFIFFFBBB\u003cFFB\u003c\u003c7FFIFFFFFBBFF\u003cIIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB\u003cFFFI\u003cFBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF\u003cBBFFF\u002707BBBBFFFFFFFFFFB0\u003cBF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n" ], "status": "failure", "test_index": 1, "time_seconds": 113.5637354850769, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.83 seconds elapse.[bwa_index] Update BWT... 0.02 sec[bwa_index] Pack forward-only FASTA... 0.01 sec[bwa_index] Construct SA from BWT and Occ... 0.23 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.189 sec; CPU: 1.103 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.027 CPU sec, 0.015 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.128 sec; CPU: 0.036 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #1)" name="0" time="114.32847332954407">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "reads": {   "id": "04505d4708523c38",   "src": "hda"  },  "reference_source|ref": {   "id": "e74059d1ae294844",   "src": "hda"  },  "reference_source|ref_selector": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/b/1/0/dataset_b10c9016-2890-4b30-b434-3e4f84e485fc.dat\u0027 reference.fa \u0026\u0026 lofreq faidx reference.fa 2\u003e\u00261 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" \u003e\u00262 \u0026\u0026  lofreq alnqual -b    \u0027/galaxy/server/database/objects/7/5/2/dataset_752cb798-1bdc-4a8a-9b7e-8d5b91b1cf95.dat\u0027 \u0027reference.fa\u0027 \u003e \u0027/galaxy/server/database/objects/b/0/b/dataset_b0be161b-3567-41e4-b5ab-88197b7aa5d4.dat\u0027",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:14:12.969756",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-pwt8t",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "3005211b4b6e8d73",  "inputs": {   "reads": {    "id": "04505d4708523c38",    "src": "hda",    "uuid": "752cb798-1bdc-4a8a-9b7e-8d5b91b1cf95"   },   "ref": {    "id": "e74059d1ae294844",    "src": "hda",    "uuid": "b10c9016-2890-4b30-b434-3e4f84e485fc"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653174929.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:15:29"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653174928.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:15:28"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "a1da07027afbc304",    "src": "hda",    "uuid": "b0be161b-3567-41e4-b5ab-88197b7aa5d4"   }  },  "params": {   "__input_ext": "\"input\"",   "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "recompute_all": "\"false\"",   "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 384, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:15:39.322543",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmp5jv4jdhxalnqual-out1.bam v. /tmp/tmpql4a2lrsalnqual-out1.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 0, "time_seconds": 114.32847332954407, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #2)" name="1" time="116.82878518104553">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "alnqual_choice|alnquals_to_use": "-B",  "reads": {   "id": "640deaad6399bad2",   "src": "hda"  },  "reference_source|ref": {   "id": "e74059d1ae294844",   "src": "hda"  },  "reference_source|ref_selector": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/b/1/0/dataset_b10c9016-2890-4b30-b434-3e4f84e485fc.dat\u0027 reference.fa \u0026\u0026 lofreq faidx reference.fa 2\u003e\u00261 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" \u003e\u00262 \u0026\u0026  lofreq alnqual -b  -B  \u0027/galaxy/server/database/objects/0/f/0/dataset_0f0bcb5d-c688-45d9-999b-990df484a689.dat\u0027 \u0027reference.fa\u0027 \u003e \u0027/galaxy/server/database/objects/c/c/4/dataset_cc474296-a046-4a96-bed8-f8eb6a5fe5f7.dat\u0027",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:14:25.884675",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-kw7gx",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "3cbdd825f8537174",  "inputs": {   "reads": {    "id": "640deaad6399bad2",    "src": "hda",    "uuid": "0f0bcb5d-c688-45d9-999b-990df484a689"   },   "ref": {    "id": "e74059d1ae294844",    "src": "hda",    "uuid": "b10c9016-2890-4b30-b434-3e4f84e485fc"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653174942.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:15:42"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653174942.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:15:42"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "06de3b66593785c7",    "src": "hda",    "uuid": "cc474296-a046-4a96-bed8-f8eb6a5fe5f7"   }  },  "params": {   "__input_ext": "\"input\"",   "alnqual_choice": "{\"__current_case__\": 0, \"alnquals_to_use\": \"-B\", \"extended_baq\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "recompute_all": "\"false\"",   "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 384, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:16:00.459568",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmpkdowccr4alnqual-out2.bam v. /tmp/tmpd2xo8to1alnqual-out2.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 1, "time_seconds": 116.82878518104553, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #3)" name="2" time="98.66199350357056">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "alnqual_choice|alnquals_to_use": "-A",  "reads": {   "id": "640deaad6399bad2",   "src": "hda"  },  "reference_source|ref": {   "id": "d612c1c34cbe8c51",   "src": "hda"  },  "reference_source|ref_selector": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/f/5/d/dataset_f5d21e6a-517d-4684-b737-0c35fbb474ab.dat\u0027 reference.fa \u0026\u0026 lofreq faidx reference.fa 2\u003e\u00261 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" \u003e\u00262 \u0026\u0026  lofreq alnqual -b  -A  \u0027/galaxy/server/database/objects/0/f/0/dataset_0f0bcb5d-c688-45d9-999b-990df484a689.dat\u0027 \u0027reference.fa\u0027 \u003e \u0027/galaxy/server/database/objects/c/5/5/dataset_c5596ac7-b41d-48d8-b218-dcf5998e39f7.dat\u0027",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:14:38.950934",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-mp72n",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "6cb5c1ef70dd539b",  "inputs": {   "reads": {    "id": "640deaad6399bad2",    "src": "hda",    "uuid": "0f0bcb5d-c688-45d9-999b-990df484a689"   },   "ref": {    "id": "d612c1c34cbe8c51",    "src": "hda",    "uuid": "f5d21e6a-517d-4684-b737-0c35fbb474ab"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653174945.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:15:45"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653174944.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:15:44"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "e21643bdecdabb98",    "src": "hda",    "uuid": "c5596ac7-b41d-48d8-b218-dcf5998e39f7"   }  },  "params": {   "__input_ext": "\"input\"",   "alnqual_choice": "{\"__current_case__\": 2, \"alnquals_to_use\": \"-A\", \"extended_baq\": \"true\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "recompute_all": "\"false\"",   "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 389, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:16:02.151443",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmpthxo81mkalnqual-out3.bam v. /tmp/tmpv8vnhm1zalnqual-out3.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 2, "time_seconds": 98.66199350357056, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #4)" name="3" time="91.11073637008667">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "alnqual_choice|extended_baq": false,  "reads": {   "id": "5826bdbb3c48cd44",   "src": "hda"  },  "reference_source|ref": {   "id": "7667ceabbb1c3447",   "src": "hda"  },  "reference_source|ref_selector": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/2/1/b/dataset_21b0afae-9d14-4d8b-a658-5cf81621458d.dat\u0027 reference.fa \u0026\u0026 lofreq faidx reference.fa 2\u003e\u00261 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" \u003e\u00262 \u0026\u0026  lofreq alnqual -b -e   \u0027/galaxy/server/database/objects/5/7/d/dataset_57de505a-a6ad-4b98-bef8-8b96a1c58eda.dat\u0027 \u0027reference.fa\u0027 \u003e \u0027/galaxy/server/database/objects/3/7/5/dataset_3753fc36-f7aa-4097-9975-30918be5de1f.dat\u0027",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:15:37.594723",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-x4tvs",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "93ce1a9d699ccb0f",  "inputs": {   "reads": {    "id": "5826bdbb3c48cd44",    "src": "hda",    "uuid": "57de505a-a6ad-4b98-bef8-8b96a1c58eda"   },   "ref": {    "id": "7667ceabbb1c3447",    "src": "hda",    "uuid": "21b0afae-9d14-4d8b-a658-5cf81621458d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653175004.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:16:44"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653175003.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:16:43"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "b8c9d37bdf89ded6",    "src": "hda",    "uuid": "3753fc36-f7aa-4097-9975-30918be5de1f"   }  },  "params": {   "__input_ext": "\"input\"",   "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"false\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "recompute_all": "\"false\"",   "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 392, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:16:50.627065",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmpc66no137alnqual-out4.bam v. /tmp/tmp5yudsw0qalnqual-out4.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 3, "time_seconds": 91.11073637008667, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #5)" name="4" time="97.33773517608643">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "reads": {   "id": "1d15973543e9b59d",   "src": "hda"  },  "reference_source|ref": {   "id": "41c9125360a969ec",   "src": "hda"  },  "reference_source|ref_selector": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/8/5/f/dataset_85ff045a-a8b5-4908-bf91-d1c473530c7b.dat\u0027 reference.fa \u0026\u0026 lofreq faidx reference.fa 2\u003e\u00261 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" \u003e\u00262 \u0026\u0026  lofreq alnqual -b    \u0027/galaxy/server/database/objects/6/3/1/dataset_631d7f2a-44a4-4280-a496-87f038e35adc.dat\u0027 \u0027reference.fa\u0027 \u003e \u0027/galaxy/server/database/objects/c/9/0/dataset_c9087387-d3bb-4ea7-86fb-2709486ab3f3.dat\u0027",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:16:03.563503",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-vdszw",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "a4c2cc63c052c685",  "inputs": {   "reads": {    "id": "1d15973543e9b59d",    "src": "hda",    "uuid": "631d7f2a-44a4-4280-a496-87f038e35adc"   },   "ref": {    "id": "41c9125360a969ec",    "src": "hda",    "uuid": "85ff045a-a8b5-4908-bf91-d1c473530c7b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653175029.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:17:09"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653175028.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:17:08"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "db25c20457fcd4a6",    "src": "hda",    "uuid": "c9087387-d3bb-4ea7-86fb-2709486ab3f3"   }  },  "params": {   "__input_ext": "\"input\"",   "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "recompute_all": "\"false\"",   "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 395, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:17:16.582467",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmp9bp5jviaalnqual-out5.bam v. /tmp/tmpeg7j7x9palnqual-out5.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 4, "time_seconds": 97.33773517608643, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #1)" name="0" time="102.68489933013916">
        
            
            <system-out><![CDATA[
            INFO [2022-05-21 23:10:06,761]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bamINFO [2022-05-21 23:10:06,776]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2022-05-21 23:10:09,547]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/271/tmp/lofreq2_call_parallell9yak302/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #2)" name="1" time="98.63630986213684">
        
            
            <system-out><![CDATA[
            INFO [2022-05-21 23:10:17,720]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2022-05-21 23:10:17,736]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2022-05-21 23:10:20,555]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/274/tmp/lofreq2_call_parallel5eew72nu/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #3)" name="2" time="98.74580645561218">
        
            
            <system-out><![CDATA[
            INFO [2022-05-21 23:10:44,675]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2022-05-21 23:10:44,689]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2022-05-21 23:10:48,064]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/278/tmp/lofreq2_call_parallelyhrcwxmq/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #4)" name="3" time="92.5302414894104">
        
            
            <system-out><![CDATA[
            INFO [2022-05-21 23:11:11,749]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2022-05-21 23:11:11,763]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2022-05-21 23:11:14,523]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #5)" name="4" time="107.4546902179718">
        
            
            <system-out><![CDATA[
            INFO [2022-05-21 23:11:51,386]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2022-05-21 23:11:51,402]: Adding 3 commands to mp-poolNumber of substitution tests performed: 0Number of indel tests performed: 9INFO [2022-05-21 23:11:55,606]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter (Test #1)" name="0" time="92.71761155128479">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Skipping default settingsAt least one type of multiple testing correction requested. Doing first pass of vcfMTC application completedSuccessful exit.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter (Test #2)" name="1" time="90.84044075012207">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Skipping default settingsAt least one type of multiple testing correction requested. Doing first pass of vcfMTC application completedSuccessful exit.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter (Test #3)" name="2" time="95.791907787323">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Skipping default settingsAt least one type of multiple testing correction requested. Doing first pass of vcfMTC application completedSuccessful exit.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual (Test #1)" name="0" time="90.10457873344421">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "reads": {   "id": "16be3ebde3ebad7e",   "src": "hda"  },  "strategy|deletions": "30",  "strategy|insertions": "20",  "strategy|selector": "uniform" }, "job": {  "command_line": "lofreq indelqual --uniform 20,30 -o output.bam /galaxy/server/database/objects/4/7/5/dataset_4758dd53-b20b-4b74-95ff-bd5b330b7c69.dat",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:11:35.495103",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-r7kjk",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "cc8c92b511d48810",  "inputs": {   "reads": {    "id": "16be3ebde3ebad7e",    "src": "hda",    "uuid": "4758dd53-b20b-4b74-95ff-bd5b330b7c69"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653174763.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:12:43"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653174763.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:12:43"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "de5fd1c6b18aca4b",    "src": "hda",    "uuid": "16814cf2-8bbf-4196-8e9a-911d3538cefe"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "strategy": "{\"__current_case__\": 0, \"deletions\": \"30\", \"insertions\": \"20\", \"selector\": \"uniform\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:12:52.172962",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmpga7gc7y4indelqual-out1.bam v. /tmp/tmpr1ivaj62indelqual-out1.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 0, "time_seconds": 90.10457873344421, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual (Test #2)" name="1" time="99.24231886863708">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "reads": {   "id": "efd8fb10538b8ad1",   "src": "hda"  },  "strategy|reference_source|ref": {   "id": "ed416db22c06961f",   "src": "hda"  },  "strategy|reference_source|ref_selector": "history",  "strategy|selector": "dindel" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/3/c/2/dataset_3c2d0e12-1e70-4da7-a12a-21abf55ea124.dat\u0027 reference.fa \u0026\u0026 lofreq faidx reference.fa 2\u003e\u00261 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" \u003e\u00262 \u0026\u0026  lofreq indelqual --dindel --ref reference.fa -o output.bam /galaxy/server/database/objects/9/6/6/dataset_96615a1b-a90d-468d-b63c-5de0d12333da.dat",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:12:30.900500",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-s2g4d",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "d9a948b81d63ed9d",  "inputs": {   "reads": {    "id": "efd8fb10538b8ad1",    "src": "hda",    "uuid": "96615a1b-a90d-468d-b63c-5de0d12333da"   },   "strategy|ref": {    "id": "ed416db22c06961f",    "src": "hda",    "uuid": "3c2d0e12-1e70-4da7-a12a-21abf55ea124"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653174815.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:13:35"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653174815.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:13:35"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "fd3f3769c2d8b080",    "src": "hda",    "uuid": "46e5abd9-d96c-4e55-bf19-96df6f7401a7"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "strategy": "{\"__current_case__\": 1, \"reference_source\": {\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 373, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}, \"selector\": \"dindel\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:13:43.393887",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmp106r0w2iindelqual-out2.bam v. /tmp/tmpsvuw_tqoindelqual-out2.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 1, "time_seconds": 99.24231886863708, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual (Test #3)" name="2" time="100.43641495704651">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "reads": {   "id": "efd8fb10538b8ad1",   "src": "hda"  },  "strategy|insertions": "20",  "strategy|selector": "uniform" }, "job": {  "command_line": "lofreq indelqual --uniform 20 -o output.bam /galaxy/server/database/objects/9/6/6/dataset_96615a1b-a90d-468d-b63c-5de0d12333da.dat",  "command_version": "2.1.5",  "create_time": "2022-05-21T23:12:30.726118",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-tqg8q",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "d2a0cdd457a7f4f5",  "inputs": {   "reads": {    "id": "efd8fb10538b8ad1",    "src": "hda",    "uuid": "96615a1b-a90d-468d-b63c-5de0d12333da"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653174816.0000000",    "title": "Job End Time",    "value": "2022-05-21 23:13:36"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653174816.0000000",    "title": "Job Start Time",    "value": "2022-05-21 23:13:36"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "f13a99719ffe8d55",    "src": "hda",    "uuid": "75b9d73c-0ae1-4ad5-9f71-2f75c2137c99"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "strategy": "{\"__current_case__\": 0, \"deletions\": \"\", \"insertions\": \"20\", \"selector\": \"uniform\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T23:13:44.450722",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/tmpzfijmnxhindelqual-out3.bam v. /tmp/tmp8x1c37vcindelqual-out3.bam )\nBinary data detected, not displaying diff" ], "status": "failure", "test_index": 2, "time_seconds": 100.43641495704651, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi (Test #1)" name="0" time="91.41579127311707">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi (Test #2)" name="1" time="96.04712319374084">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm (Test #1)" name="0" time="105.01136565208435">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::main] ===> Step 1: reading read mappings <===[M::ma_hit_read::0.252*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)[M::main] ===> Step 2: 1-pass (crude) read selection <===[M::ma_hit_sub::0.275*1.00] 9155 query sequences remain after sub[M::ma_hit_cut::0.281*1.00] 161122 hits remain after cut[M::ma_hit_flt::0.284*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85[M::main] ===> Step 3: 2-pass (fine) read selection <===[M::ma_hit_sub::0.293*1.00] 9023 query sequences remain after sub[M::ma_hit_cut::0.296*1.00] 152071 hits remain after cut[M::ma_hit_contained::0.301*1.00] 1536 sequences and 8359 hits remain after containment removal[M::main] ===> Step 4: graph cleaning <===[M::ma_sg_gen] read 8236 arcs[M::main] ===> Step 4.1: transitive reduction <===[M::asg_arc_del_trans] transitively reduced 4182 arcs[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 362 asymmetric arcs[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===[M::asg_cut_tip] cut 260 tips[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 29 asymmetric arcs[M::asg_arc_del_short] removed 37 short overlaps[M::asg_cut_tip] cut 104 tips[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 1 asymmetric arcs[M::asg_arc_del_short] removed 1 short overlaps[M::asg_cut_tip] cut 3 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::asg_arc_del_short] removed 0 short overlaps[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===[M::asg_cut_internal] cut 0 internal sequences[M::asg_cut_biloop] cut 0 small bi-loops[M::asg_cut_tip] cut 0 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::main] ===> Step 4.5: aggressively cutting short overlaps <===[M::asg_arc_del_short] removed 0 short overlaps[M::main] ===> Step 5: generating unitigs <===[M::main] Version: 0.3-r179[M::main] CMD: miniasm -f /galaxy/server/database/objects/9/4/a/dataset_94a56156-582e-476b-aa0b-a69900ad5717.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/4/1/0/dataset_4101093e-b53a-4d05-924e-8ec17f3bda74.dat[M::main] Real time: 0.319 sec; CPU: 0.317 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm (Test #2)" name="1" time="104.29382061958313">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::main] ===> Step 1: reading read mappings <===[M::ma_hit_read::0.220*1.00] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)[M::main] ===> Step 2: 1-pass (crude) read selection <===[M::ma_hit_sub::0.244*1.00] 10122 query sequences remain after sub[M::ma_hit_cut::0.249*1.00] 171862 hits remain after cut[M::ma_hit_flt::0.254*1.00] 165533 hits remain after filtering; crude coverage after filtering: 11.51[M::main] ===> Step 3: 2-pass (fine) read selection <===[M::ma_hit_sub::0.265*1.00] 9994 query sequences remain after sub[M::ma_hit_cut::0.268*1.00] 163595 hits remain after cut[M::ma_hit_contained::0.274*1.00] 1772 sequences and 10061 hits remain after containment removal[M::main] ===> Step 4: graph cleaning <===[M::ma_sg_gen] read 9758 arcs[M::main] ===> Step 4.1: transitive reduction <===[M::asg_arc_del_trans] transitively reduced 4694 arcs[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 484 asymmetric arcs[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===[M::asg_cut_tip] cut 282 tips[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 26 asymmetric arcs[M::asg_arc_del_short] removed 38 short overlaps[M::asg_cut_tip] cut 53 tips[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 2 asymmetric arcs[M::asg_arc_del_short] removed 2 short overlaps[M::asg_cut_tip] cut 2 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===[M::asg_cut_internal] cut 0 internal sequences[M::asg_cut_biloop] cut 0 small bi-loops[M::asg_cut_tip] cut 0 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::main] ===> Step 4.5: aggressively cutting short overlaps <===[M::asg_arc_del_short] removed 0 short overlaps[M::main] ===> Step 5: generating unitigs <===[M::main] Version: 0.3-r179[M::main] CMD: miniasm -f /galaxy/server/database/objects/0/8/5/dataset_085a3baa-fb5d-455f-825b-cd61312dec43.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/4/c/e/dataset_4cefa9db-89df-4df6-b322-1a8351ed9ac8.dat[M::main] Real time: 0.300 sec; CPU: 0.298 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #1)" name="0" time="136.42780351638794">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "453f011387975b99",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "reference_source|ref_file": {   "id": "0e616c56500fd3b9",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/1/2/8/dataset_128be613-0861-4f42-b5d1-649217a0a1da.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/0/e/3/dataset_0e30ff49-eee5-4bc9-a068-9fce55f70b2e.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/e/b/8/dataset_eb869990-139f-4eb5-b8aa-42047cde459d.dat\u0027",  "command_version": "2.17-r941",  "create_time": "2022-05-21T22:38:09.300342",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-rm4s2",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "677159812803e57f",  "inputs": {   "fastq_input1": {    "id": "453f011387975b99",    "src": "hda",    "uuid": "0e30ff49-eee5-4bc9-a068-9fce55f70b2e"   },   "ref_file": {    "id": "0e616c56500fd3b9",    "src": "hda",    "uuid": "128be613-0861-4f42-b5d1-649217a0a1da"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653172761.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:39:21"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653172761.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:39:21"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.005*0.92] collected minimizers\n[M::mm_idx_gen::0.007*0.98] sorted minimizers\n[M::main::0.007*0.97] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.007*0.97] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*0.97] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.013*0.99] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/e/3/dataset_0e30ff49-eee5-4bc9-a068-9fce55f70b2e.dat\n[M::main] Real time: 0.015 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "alignment_output": {    "id": "b71b10580275fc15",    "src": "hda",    "uuid": "eb869990-139f-4eb5-b8aa-42047cde459d"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 120, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 119, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.005*0.92] collected minimizers\n[M::mm_idx_gen::0.007*0.98] sorted minimizers\n[M::main::0.007*0.97] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.007*0.97] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*0.97] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.013*0.99] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/e/3/dataset_0e30ff49-eee5-4bc9-a068-9fce55f70b2e.dat\n[M::main] Real time: 0.015 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:39:47.963007",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_x7vr2cav.sam v. /tmp/history_bam_converted_to_sam_a6xwqqe8.sam )\n--- local_file\n+++ history_data\n@@ -1,171 +1,171 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_19.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t*\t0\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\t*\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:18422:19051/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t*\t0\t0\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t*\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t*\t0\t0\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:18842:24844/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\t*\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t*\t0\t0\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5983:21093/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:7765:18353/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t*\t0\t0\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\t*\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:142\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:14060:21273/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S156M15S\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\t*\tNM:i:1\tms:i:302\tAS:i:302\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:14528:12993/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGAT\t*\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:17657:20856/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t90S161M\t*\t0\t0\tAAAGCGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\t*\tNM:i:1\tms:i:312\tAS:i:312\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16480,+,90M161S,60,2;\n-M01368:8:000000000-A3GHV:1:1103:25519:6301/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t18S184M49S\t*\t0\t0\tAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGCATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATTTCGT\t*\tNM:i:2\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:21\ts1:i:157\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1103:6074:6549/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t108S143M\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\t*\tNM:i:1\tms:i:276\tAS:i:276\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16462,+,108M143S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:11572:8264/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1104:12288:20635/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\t*\tNM:i:3\tms:i:262\tAS:i:262\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:109\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:13832:4398/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t7S132M112S\t*\t0\t0\tCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGACAAAAAAAAACACACAACAACCAACACCCAGTAGACTAGTGCGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1110:15519:10008/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t67M184H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1110:16700:6843/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t25H67M159H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,92S159M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:16531/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t5\t59M192H\t*\t0\t0\tGGTTCCTACTTCAAGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACA\t*\tNM:i:2\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:31\ts2:i:0\tde:f:0.0339\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:8665:25542/1\t2048\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701/1\t2064\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:27103:7153/1\t2064\tgi|251831106|ref|NC_012920.1|\t16508\t12\t7H62M182H\t*\t0\t0\tCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:114\tAS:i:114\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0161\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,69S182M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233/1\t2048\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794/1\t2064\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:17564:15723/1\t2064\tgi|251831106|ref|NC_012920.1|\t16512\t12\t58M193H\t*\t0\t0\tTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:106\tAS:i:106\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0172\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,58S193M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:18714:24788/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490/1\t2048\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050/1\t2064\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t*\t0\t0\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:8763:7859/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t19\t51M200H\t*\t0\t0\tGCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:100\tAS:i:100\tnn:i:0\ttp:A:P\tcm:i:4\ts1:i:38\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1113:5741:16959/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t11\t51M200H\t*\t0\t0\tTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:92\tAS:i:92\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:13575:19255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:16350:22621/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272/1\t2064\tgi|251831106|ref|NC_012920.1|\t16522\t11\t48M203H\t*\t0\t0\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145/1\t2048\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258/1\t2048\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t5H43M203H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:19224:11655/1\t2048\tgi|251831106|ref|NC_012920.1|\t16530\t11\t40M211H\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:80\tAS:i:80\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,40S186M25S,60,2;\trl:i:0\n" ], "status": "failure", "test_index": 0, "time_seconds": 136.42780351638794, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.005*0.92] collected minimizers[M::mm_idx_gen::0.007*0.98] sorted minimizers[M::main::0.007*0.97] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.007*0.97] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.007*0.97] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.013*0.99] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/e/3/dataset_0e30ff49-eee5-4bc9-a068-9fce55f70b2e.dat[M::main] Real time: 0.015 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #2)" name="1" time="136.22625279426575">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.10] collected minimizers[M::mm_idx_gen::0.004*1.26] sorted minimizers[M::main::0.004*1.26] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*1.26] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.004*1.25] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.007*1.13] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/e/3/dataset_0e30ff49-eee5-4bc9-a068-9fce55f70b2e.dat[M::main] Real time: 0.009 sec; CPU: 0.009 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #3)" name="2" time="132.23025274276733">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|fastq_input1": {   "id": "1d49db242457fc4d",   "src": "hda"  },  "fastq_input|fastq_input2": {   "id": "8114a815c95d3015",   "src": "hda"  },  "fastq_input|fastq_input_selector": "paired",  "reference_source|ref_file": {   "id": "d687347c1f127082",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/9/9/3/dataset_99352abd-1b6b-42a0-8926-b1c710a834ae.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/c/2/8/dataset_c2843d02-64f6-4c4f-b2a0-8898ab5bf394.dat\u0027 \u0027/galaxy/server/database/objects/a/9/6/dataset_a96c9752-0620-41f4-a5e3-ef1cd6a1643f.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/4/e/2/dataset_4e22c6b1-5df5-443d-8292-835fb6b291cc.dat\u0027",  "command_version": "2.17-r941",  "create_time": "2022-05-21T22:39:48.728474",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-dks8p",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "0ac027da1b94428d",  "inputs": {   "fastq_input1": {    "id": "1d49db242457fc4d",    "src": "hda",    "uuid": "c2843d02-64f6-4c4f-b2a0-8898ab5bf394"   },   "fastq_input2": {    "id": "8114a815c95d3015",    "src": "hda",    "uuid": "a96c9752-0620-41f4-a5e3-ef1cd6a1643f"   },   "ref_file": {    "id": "d687347c1f127082",    "src": "hda",    "uuid": "99352abd-1b6b-42a0-8926-b1c710a834ae"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653172876.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:41:16"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653172876.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:41:16"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.004*0.81] collected minimizers\n[M::mm_idx_gen::0.005*0.89] sorted minimizers\n[M::main::0.005*0.89] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*0.89] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*0.90] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.30] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/c/2/8/dataset_c2843d02-64f6-4c4f-b2a0-8898ab5bf394.dat /galaxy/server/database/objects/a/9/6/dataset_a96c9752-0620-41f4-a5e3-ef1cd6a1643f.dat\n[M::main] Real time: 0.018 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "alignment_output": {    "id": "383cf81b6f1fe9e7",    "src": "hda",    "uuid": "4e22c6b1-5df5-443d-8292-835fb6b291cc"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 132, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.004*0.81] collected minimizers\n[M::mm_idx_gen::0.005*0.89] sorted minimizers\n[M::main::0.005*0.89] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*0.89] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*0.90] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.30] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/c/2/8/dataset_c2843d02-64f6-4c4f-b2a0-8898ab5bf394.dat /galaxy/server/database/objects/a/9/6/dataset_a96c9752-0620-41f4-a5e3-ef1cd6a1643f.dat\n[M::main] Real time: 0.018 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:41:23.777568",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7f7z438t.sam v. /tmp/history_bam_converted_to_sam_i8swu12n.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1\u003e11111@11111A111A100000000////011110//\u003e\u003e/12@1@22B/////1@\u003e21/\u003e\u003e/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t\u003eA@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@\u003c1\u003e@FFFGHHHHFHEFGDABFFGG/@DCE\u003cCG1\u003cGF0/DD000=\u003cDHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#\u003eAABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA\u003c@HFDG0HHGGHGBDFGFG\u003cDDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11\u003e\u003eABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA\u003c.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF\u003cGGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n" ], "status": "failure", "test_index": 2, "time_seconds": 132.23025274276733, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.81] collected minimizers[M::mm_idx_gen::0.005*0.89] sorted minimizers[M::main::0.005*0.89] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*0.89] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*0.90] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.017*1.30] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/c/2/8/dataset_c2843d02-64f6-4c4f-b2a0-8898ab5bf394.dat /galaxy/server/database/objects/a/9/6/dataset_a96c9752-0620-41f4-a5e3-ef1cd6a1643f.dat[M::main] Real time: 0.018 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #4)" name="3" time="116.94418573379517">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|fastq_input1": {   "id": "a0ff75d55733df70",   "src": "hda"  },  "fastq_input|fastq_input2": {   "id": "ae96c8ab70feedff",   "src": "hda"  },  "fastq_input|fastq_input_selector": "paired",  "reference_source|ref_file": {   "id": "955c275f26b3bf21",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/e/3/3/dataset_e3317121-542f-45be-94aa-521a2da9160b.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/b/1/a/dataset_b1a76360-eaea-4662-8463-157efb105faf.dat\u0027 \u0027/galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/2/8/4/dataset_284a313d-ac6f-4faf-8cc5-83c1eeab7c6d.dat\u0027",  "command_version": "2.17-r941",  "create_time": "2022-05-21T22:40:12.287240",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-whb9s",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "11e1cfd7079a9a2d",  "inputs": {   "fastq_input1": {    "id": "a0ff75d55733df70",    "src": "hda",    "uuid": "b1a76360-eaea-4662-8463-157efb105faf"   },   "fastq_input2": {    "id": "ae96c8ab70feedff",    "src": "hda",    "uuid": "ce769c18-3e81-47bd-8bb3-717bb9c0ac10"   },   "ref_file": {    "id": "955c275f26b3bf21",    "src": "hda",    "uuid": "e3317121-542f-45be-94aa-521a2da9160b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653172891.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:41:31"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653172891.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:41:31"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.004*0.83] collected minimizers\n[M::mm_idx_gen::0.006*0.99] sorted minimizers\n[M::main::0.006*0.99] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*0.99] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*0.99] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.018*1.24] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/b/1/a/dataset_b1a76360-eaea-4662-8463-157efb105faf.dat /galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat\n[M::main] Real time: 0.019 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "alignment_output": {    "id": "c65dcdc75a910330",    "src": "hda",    "uuid": "284a313d-ac6f-4faf-8cc5-83c1eeab7c6d"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 139, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 136, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.004*0.83] collected minimizers\n[M::mm_idx_gen::0.006*0.99] sorted minimizers\n[M::main::0.006*0.99] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*0.99] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*0.99] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.018*1.24] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/b/1/a/dataset_b1a76360-eaea-4662-8463-157efb105faf.dat /galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat\n[M::main] Real time: 0.019 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:41:41.255304",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_ccvp5800.sam v. /tmp/history_bam_converted_to_sam_mwr3hd_v.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1\u003e11111@11111A111A100000000////011110//\u003e\u003e/12@1@22B/////1@\u003e21/\u003e\u003e/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t\u003eA@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@\u003c1\u003e@FFFGHHHHFHEFGDABFFGG/@DCE\u003cCG1\u003cGF0/DD000=\u003cDHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#\u003eAABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA\u003c@HFDG0HHGGHGBDFGFG\u003cDDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11\u003e\u003eABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA\u003c.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF\u003cGGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n" ], "status": "failure", "test_index": 3, "time_seconds": 116.94418573379517, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.83] collected minimizers[M::mm_idx_gen::0.006*0.99] sorted minimizers[M::main::0.006*0.99] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*0.99] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*0.99] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.018*1.24] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/b/1/a/dataset_b1a76360-eaea-4662-8463-157efb105faf.dat /galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat[M::main] Real time: 0.019 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #5)" name="4" time="115.27440118789673">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|fastq_input1": {   "id": "25165ed2d4a2823f",   "src": "hdca"  },  "fastq_input|fastq_input_selector": "paired_collection",  "reference_source|ref_file": {   "id": "955c275f26b3bf21",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/e/3/3/dataset_e3317121-542f-45be-94aa-521a2da9160b.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/3/8/6/dataset_386e2085-3378-4af1-bddd-a055c0ea4729.dat\u0027 \u0027/galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/c/3/f/dataset_c3ff95c7-9135-4cc2-9960-249b8cb5694f.dat\u0027",  "command_version": "2.17-r941",  "create_time": "2022-05-21T22:40:29.980168",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-2vdcc",  "galaxy_version": "21.09",  "history_id": "25165ed2d4a2823f",  "id": "c243d322bb203096",  "inputs": {   "fastq_input11": {    "id": "7a6e3d6276e76551",    "src": "hda",    "uuid": "386e2085-3378-4af1-bddd-a055c0ea4729"   },   "fastq_input12": {    "id": "ae96c8ab70feedff",    "src": "hda",    "uuid": "ce769c18-3e81-47bd-8bb3-717bb9c0ac10"   },   "ref_file": {    "id": "955c275f26b3bf21",    "src": "hda",    "uuid": "e3317121-542f-45be-94aa-521a2da9160b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1653172893.0000000",    "title": "Job End Time",    "value": "2022-05-21 22:41:33"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1653172893.0000000",    "title": "Job Start Time",    "value": "2022-05-21 22:41:33"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.003*0.82] collected minimizers\n[M::mm_idx_gen::0.005*1.05] sorted minimizers\n[M::main::0.005*1.05] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.05] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.05] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.021*1.01] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/3/8/6/dataset_386e2085-3378-4af1-bddd-a055c0ea4729.dat /galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat\n[M::main] Real time: 0.023 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "alignment_output": {    "id": "4bcc6f643d079170",    "src": "hda",    "uuid": "c3ff95c7-9135-4cc2-9960-249b8cb5694f"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 136, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.003*0.82] collected minimizers\n[M::mm_idx_gen::0.005*1.05] sorted minimizers\n[M::main::0.005*1.05] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.05] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.05] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.021*1.01] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/3/8/6/dataset_386e2085-3378-4af1-bddd-a055c0ea4729.dat /galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat\n[M::main] Real time: 0.023 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2022-05-21T22:41:43.089331",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_zyb_jowd.sam v. /tmp/history_bam_converted_to_sam_pfb2ggg9.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_16.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_17.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1\u003e11111@11111A111A100000000////011110//\u003e\u003e/12@1@22B/////1@\u003e21/\u003e\u003e/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t\u003eA@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@\u003c1\u003e@FFFGHHHHFHEFGDABFFGG/@DCE\u003cCG1\u003cGF0/DD000=\u003cDHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#\u003eAABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA\u003c@HFDG0HHGGHGBDFGFG\u003cDDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11\u003e\u003eABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA\u003c.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF\u003cGGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n" ], "status": "failure", "test_index": 4, "time_seconds": 115.27440118789673, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*0.82] collected minimizers[M::mm_idx_gen::0.005*1.05] sorted minimizers[M::main::0.005*1.05] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.05] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.05] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.021*1.01] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/3/8/6/dataset_386e2085-3378-4af1-bddd-a055c0ea4729.dat /galaxy/server/database/objects/c/e/7/dataset_ce769c18-3e81-47bd-8bb3-717bb9c0ac10.dat[M::main] Real time: 0.023 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #6)" name="5" time="38.84742474555969">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: burkPseu_1710B,tetNig1,droYak1,papHam1,eschColi_CFT073,mm10,Homo_sapiens_AK1,petMar1,eschColi_O157H7,apiMel3,lMaj5,pseuAeru_PAO1,caePb1,oryLat1,hg19_rCRS_pUC18_phiX174,droMoj2,burkPseu_1106A,bosTau4,susScr3,galGal3canon,myoLuc2,ce7,Xanthomonas_oryzae_KACC10331,caeRem3,susScr1,Araly1,caeJap4,droMoj3,dp4,rn6,strePneu_R6,danRer4,dm2,echTel1,Arabidopsis_thaliana_TAIR10,ce6,PhumU1,vicPac1,xenTro3,hg19chrM,Tcacao_1.0,mm9canon,cb3canon,caeRem4,allMis1,panTro2canon,hetGla1,phiX,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,mm7canon,droWil1,oryLat2canon,anoCar2,taeGut1canon,Xanthomonas_oryzae_PXO99A,hg38female,galGal4,triCas2,anoGam1,musFur1,apiMel2,aplCal1,baciSubt,galGal3,felCat3,oryLat2,ce9,ce10,braFlo1,cerSim1,danRer10,equCab2,hg19canon,dasNov1,monDom5,bosTau2,xenTro2,gasAcu1,anoCar1,nomLeu1,sorAra1,cb3full,bosTau8,apiMel1,hg38,latCha1,Hydra_JCVI,Ptrichocarpa_156,danRer7,vicPac2,hg17,droVir1,droVir2,calJac3canon,loxAfr3,dipOrd1,mm7,rheMac2,ce8,monDom1,hg18nohaps,strPur2,mm8canon,panPan1,hg18,panTro1canon,dm3,pseuAeru_PA7,galGal2canon,venter1,eschColi_K12,caeJap3,droAna3,dm6,otoGar1,bordBron,bosTau3,gadMor1,borEut13,loxAfr1,Tcas_3.0,ci2canon,ornAna1,eschColi_O157H7_EDL933,droVir3,fr1,eschColi_O157H7_EC4115,ce4,IscaW1,burkPseu_K96243,xenTro1,felCat5,sacCer3,oryCun1,CHM13_T2T_v2.0,strPur3,ponAbe2,rheMac3,danRer2,gorGor3,fr2,Schizosaccharomyces_pombe_1.1,droEre1,burkPseu_668,rn4canon,panTro2,hg19chrX,droPer1,droAna1,danRer5,priPac1,tarSyr1,speTri2,caeRem2,equCab2chrM,tetNig1canon,bosTau7,danRer6,Spur_v2.6,oryza_sativa_japonica_nipponbare_IRGSP4.0,caeJap1,pUC18,bosTauMd3,AgamP3,caePb2,canFam3,nomLeu3,cavPor3,aptMan1,AaegL1,oviAri1,tetNig2canon,caeRem1,27835,tupBel1,droSec1,eschColi_O157H7_TW14359,panTro3full,rn4,criGri1,taeGut2,melGal1,ce2,choHof1,bosTau6,Homo_sapiens_nuHg19_mtrCRS,eschColi_K12_W3110,dasNov3,sacCer1,caePb3,ente638,droGri1,hg18chr21,droEre2,panTro1,Arabidopsis_thaliana_TAIR9,droMoj1,Xanthomonas_oryzae_MAFF_311018,susScr2,Bombyx_mori_p50T_2.0,Sscrofa9.58,tetNig2,dp3,galGal2,danRer3,hg38canon,canFam1,oryCun2,apiMel4,hg19female,nomLeu2,taeGut1,mm9,melUnd1,eriEur1,felCat4canon,felCat8,hg18canon,mm8,saiBol1,rn3canon,droAna2,ailMel1,panTro4,turTru2,sarHar1,hg19,mm9female,pseuAeru_UCBPP_PA14,calJac1,ci2full,ce5,caeJap2,eschColi_APEC_O1,ce3,sacCer2,droGri2,panTro3canon,micMur1,canFam2,calJac3,felCat4,geoFor1,hg17canon,chrPic1,hg_g1k_v37,monDom4,rn3,Amel_4.5,equCab1,otoGar3,rn5,droSim1,papAnu2,CpipJ1,bosTau5,droYak2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: burkPseu_1710B,tetNig1,droYak1,papHam1,eschColi_CFT073,mm10,Homo_sapiens_AK1,petMar1,eschColi_O157H7,apiMel3,lMaj5,pseuAeru_PAO1,caePb1,oryLat1,hg19_rCRS_pUC18_phiX174,droMoj2,burkPseu_1106A,bosTau4,susScr3,galGal3canon,myoLuc2,ce7,Xanthomonas_oryzae_KACC10331,caeRem3,susScr1,Araly1,caeJap4,droMoj3,dp4,rn6,strePneu_R6,danRer4,dm2,echTel1,Arabidopsis_thaliana_TAIR10,ce6,PhumU1,vicPac1,xenTro3,hg19chrM,Tcacao_1.0,mm9canon,cb3canon,caeRem4,allMis1,panTro2canon,hetGla1,phiX,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,mm7canon,droWil1,oryLat2canon,anoCar2,taeGut1canon,Xanthomonas_oryzae_PXO99A,hg38female,galGal4,triCas2,anoGam1,musFur1,apiMel2,aplCal1,baciSubt,galGal3,felCat3,oryLat2,ce9,ce10,braFlo1,cerSim1,danRer10,equCab2,hg19canon,dasNov1,monDom5,bosTau2,xenTro2,gasAcu1,anoCar1,nomLeu1,sorAra1,cb3full,bosTau8,apiMel1,hg38,latCha1,Hydra_JCVI,Ptrichocarpa_156,danRer7,vicPac2,hg17,droVir1,droVir2,calJac3canon,loxAfr3,dipOrd1,mm7,rheMac2,ce8,monDom1,hg18nohaps,strPur2,mm8canon,panPan1,hg18,panTro1canon,dm3,pseuAeru_PA7,galGal2canon,venter1,eschColi_K12,caeJap3,droAna3,dm6,otoGar1,bordBron,bosTau3,gadMor1,borEut13,loxAfr1,Tcas_3.0,ci2canon,ornAna1,eschColi_O157H7_EDL933,droVir3,fr1,eschColi_O157H7_EC4115,ce4,IscaW1,burkPseu_K96243,xenTro1,felCat5,sacCer3,oryCun1,CHM13_T2T_v2.0,strPur3,ponAbe2,rheMac3,danRer2,gorGor3,fr2,Schizosaccharomyces_pombe_1.1,droEre1,burkPseu_668,rn4canon,panTro2,hg19chrX,droPer1,droAna1,danRer5,priPac1,tarSyr1,speTri2,caeRem2,equCab2chrM,tetNig1canon,bosTau7,danRer6,Spur_v2.6,oryza_sativa_japonica_nipponbare_IRGSP4.0,caeJap1,pUC18,bosTauMd3,AgamP3,caePb2,canFam3,nomLeu3,cavPor3,aptMan1,AaegL1,oviAri1,tetNig2canon,caeRem1,27835,tupBel1,droSec1,eschColi_O157H7_TW14359,panTro3full,rn4,criGri1,taeGut2,melGal1,ce2,choHof1,bosTau6,Homo_sapiens_nuHg19_mtrCRS,eschColi_K12_W3110,dasNov3,sacCer1,caePb3,ente638,droGri1,hg18chr21,droEre2,panTro1,Arabidopsis_thaliana_TAIR9,droMoj1,Xanthomonas_oryzae_MAFF_311018,susScr2,Bombyx_mori_p50T_2.0,Sscrofa9.58,tetNig2,dp3,galGal2,danRer3,hg38canon,canFam1,oryCun2,apiMel4,hg19female,nomLeu2,taeGut1,mm9,melUnd1,eriEur1,felCat4canon,felCat8,hg18canon,mm8,saiBol1,rn3canon,droAna2,ailMel1,panTro4,turTru2,sarHar1,hg19,mm9female,pseuAeru_UCBPP_PA14,calJac1,ci2full,ce5,caeJap2,eschColi_APEC_O1,ce3,sacCer2,droGri2,panTro3canon,micMur1,canFam2,calJac3,felCat4,geoFor1,hg17canon,chrPic1,hg_g1k_v37,monDom4,rn3,Amel_4.5,equCab1,otoGar3,rn5,droSim1,papAnu2,CpipJ1,bosTau5,droYak2)", "inputs": {  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "a4527db0c03739a3",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 5, "time_seconds": 38.84742474555969, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #7)" name="6" time="11.208390474319458">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: burkPseu_1710B,tetNig1,droYak1,papHam1,eschColi_CFT073,mm10,Homo_sapiens_AK1,petMar1,eschColi_O157H7,apiMel3,lMaj5,pseuAeru_PAO1,caePb1,oryLat1,hg19_rCRS_pUC18_phiX174,droMoj2,burkPseu_1106A,bosTau4,susScr3,galGal3canon,myoLuc2,ce7,Xanthomonas_oryzae_KACC10331,caeRem3,susScr1,Araly1,caeJap4,droMoj3,dp4,rn6,strePneu_R6,danRer4,dm2,echTel1,Arabidopsis_thaliana_TAIR10,ce6,PhumU1,vicPac1,xenTro3,hg19chrM,Tcacao_1.0,mm9canon,cb3canon,caeRem4,allMis1,panTro2canon,hetGla1,phiX,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,mm7canon,droWil1,oryLat2canon,anoCar2,taeGut1canon,Xanthomonas_oryzae_PXO99A,hg38female,galGal4,triCas2,anoGam1,musFur1,apiMel2,aplCal1,baciSubt,galGal3,felCat3,oryLat2,ce9,ce10,braFlo1,cerSim1,danRer10,equCab2,hg19canon,dasNov1,monDom5,bosTau2,xenTro2,gasAcu1,anoCar1,nomLeu1,sorAra1,cb3full,bosTau8,apiMel1,hg38,latCha1,Hydra_JCVI,Ptrichocarpa_156,danRer7,vicPac2,hg17,droVir1,droVir2,calJac3canon,loxAfr3,dipOrd1,mm7,rheMac2,ce8,monDom1,hg18nohaps,strPur2,mm8canon,panPan1,hg18,panTro1canon,dm3,pseuAeru_PA7,galGal2canon,venter1,eschColi_K12,caeJap3,droAna3,dm6,otoGar1,bordBron,bosTau3,gadMor1,borEut13,loxAfr1,Tcas_3.0,ci2canon,ornAna1,eschColi_O157H7_EDL933,droVir3,fr1,eschColi_O157H7_EC4115,ce4,IscaW1,burkPseu_K96243,xenTro1,felCat5,sacCer3,oryCun1,CHM13_T2T_v2.0,strPur3,ponAbe2,rheMac3,danRer2,gorGor3,fr2,Schizosaccharomyces_pombe_1.1,droEre1,burkPseu_668,rn4canon,panTro2,hg19chrX,droPer1,droAna1,danRer5,priPac1,tarSyr1,speTri2,caeRem2,equCab2chrM,tetNig1canon,bosTau7,danRer6,Spur_v2.6,oryza_sativa_japonica_nipponbare_IRGSP4.0,caeJap1,pUC18,bosTauMd3,AgamP3,caePb2,canFam3,nomLeu3,cavPor3,aptMan1,AaegL1,oviAri1,tetNig2canon,caeRem1,27835,tupBel1,droSec1,eschColi_O157H7_TW14359,panTro3full,rn4,criGri1,taeGut2,melGal1,ce2,choHof1,bosTau6,Homo_sapiens_nuHg19_mtrCRS,eschColi_K12_W3110,dasNov3,sacCer1,caePb3,ente638,droGri1,hg18chr21,droEre2,panTro1,Arabidopsis_thaliana_TAIR9,droMoj1,Xanthomonas_oryzae_MAFF_311018,susScr2,Bombyx_mori_p50T_2.0,Sscrofa9.58,tetNig2,dp3,galGal2,danRer3,hg38canon,canFam1,oryCun2,apiMel4,hg19female,nomLeu2,taeGut1,mm9,melUnd1,eriEur1,felCat4canon,felCat8,hg18canon,mm8,saiBol1,rn3canon,droAna2,ailMel1,panTro4,turTru2,sarHar1,hg19,mm9female,pseuAeru_UCBPP_PA14,calJac1,ci2full,ce5,caeJap2,eschColi_APEC_O1,ce3,sacCer2,droGri2,panTro3canon,micMur1,canFam2,calJac3,felCat4,geoFor1,hg17canon,chrPic1,hg_g1k_v37,monDom4,rn3,Amel_4.5,equCab1,otoGar3,rn5,droSim1,papAnu2,CpipJ1,bosTau5,droYak2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: burkPseu_1710B,tetNig1,droYak1,papHam1,eschColi_CFT073,mm10,Homo_sapiens_AK1,petMar1,eschColi_O157H7,apiMel3,lMaj5,pseuAeru_PAO1,caePb1,oryLat1,hg19_rCRS_pUC18_phiX174,droMoj2,burkPseu_1106A,bosTau4,susScr3,galGal3canon,myoLuc2,ce7,Xanthomonas_oryzae_KACC10331,caeRem3,susScr1,Araly1,caeJap4,droMoj3,dp4,rn6,strePneu_R6,danRer4,dm2,echTel1,Arabidopsis_thaliana_TAIR10,ce6,PhumU1,vicPac1,xenTro3,hg19chrM,Tcacao_1.0,mm9canon,cb3canon,caeRem4,allMis1,panTro2canon,hetGla1,phiX,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,mm7canon,droWil1,oryLat2canon,anoCar2,taeGut1canon,Xanthomonas_oryzae_PXO99A,hg38female,galGal4,triCas2,anoGam1,musFur1,apiMel2,aplCal1,baciSubt,galGal3,felCat3,oryLat2,ce9,ce10,braFlo1,cerSim1,danRer10,equCab2,hg19canon,dasNov1,monDom5,bosTau2,xenTro2,gasAcu1,anoCar1,nomLeu1,sorAra1,cb3full,bosTau8,apiMel1,hg38,latCha1,Hydra_JCVI,Ptrichocarpa_156,danRer7,vicPac2,hg17,droVir1,droVir2,calJac3canon,loxAfr3,dipOrd1,mm7,rheMac2,ce8,monDom1,hg18nohaps,strPur2,mm8canon,panPan1,hg18,panTro1canon,dm3,pseuAeru_PA7,galGal2canon,venter1,eschColi_K12,caeJap3,droAna3,dm6,otoGar1,bordBron,bosTau3,gadMor1,borEut13,loxAfr1,Tcas_3.0,ci2canon,ornAna1,eschColi_O157H7_EDL933,droVir3,fr1,eschColi_O157H7_EC4115,ce4,IscaW1,burkPseu_K96243,xenTro1,felCat5,sacCer3,oryCun1,CHM13_T2T_v2.0,strPur3,ponAbe2,rheMac3,danRer2,gorGor3,fr2,Schizosaccharomyces_pombe_1.1,droEre1,burkPseu_668,rn4canon,panTro2,hg19chrX,droPer1,droAna1,danRer5,priPac1,tarSyr1,speTri2,caeRem2,equCab2chrM,tetNig1canon,bosTau7,danRer6,Spur_v2.6,oryza_sativa_japonica_nipponbare_IRGSP4.0,caeJap1,pUC18,bosTauMd3,AgamP3,caePb2,canFam3,nomLeu3,cavPor3,aptMan1,AaegL1,oviAri1,tetNig2canon,caeRem1,27835,tupBel1,droSec1,eschColi_O157H7_TW14359,panTro3full,rn4,criGri1,taeGut2,melGal1,ce2,choHof1,bosTau6,Homo_sapiens_nuHg19_mtrCRS,eschColi_K12_W3110,dasNov3,sacCer1,caePb3,ente638,droGri1,hg18chr21,droEre2,panTro1,Arabidopsis_thaliana_TAIR9,droMoj1,Xanthomonas_oryzae_MAFF_311018,susScr2,Bombyx_mori_p50T_2.0,Sscrofa9.58,tetNig2,dp3,galGal2,danRer3,hg38canon,canFam1,oryCun2,apiMel4,hg19female,nomLeu2,taeGut1,mm9,melUnd1,eriEur1,felCat4canon,felCat8,hg18canon,mm8,saiBol1,rn3canon,droAna2,ailMel1,panTro4,turTru2,sarHar1,hg19,mm9female,pseuAeru_UCBPP_PA14,calJac1,ci2full,ce5,caeJap2,eschColi_APEC_O1,ce3,sacCer2,droGri2,panTro3canon,micMur1,canFam2,calJac3,felCat4,geoFor1,hg17canon,chrPic1,hg_g1k_v37,monDom4,rn3,Amel_4.5,equCab1,otoGar3,rn5,droSim1,papAnu2,CpipJ1,bosTau5,droYak2)", "inputs": {  "alignment_options|A": "2",  "alignment_options|B": "8",  "alignment_options|E": "2",  "alignment_options|E2": "1",  "alignment_options|O": "12",  "alignment_options|O2": "32",  "alignment_options|s": "40",  "alignment_options|z": "400",  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "8392ec13e18943f6",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "mapping_options|min_occ_floor": "1000",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 6, "time_seconds": 11.208390474319458, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #8)" name="7" time="98.09531426429749">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.017*0.97] collected minimizers[M::mm_idx_gen::0.033*1.45] sorted minimizers[M::main::0.033*1.45] loaded/built the index for 25 target sequence(s)[M::mm_mapopt_update::0.037*1.41] mid_occ = 3[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25[M::mm_idx_stat::0.039*1.39] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935[M::worker_pipeline::0.057*1.44] mapped 25 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/b/5/5/dataset_b551d64a-91b7-4018-b343-5386f82fd0f8.dat[M::main] Real time: 0.063 sec; CPU: 0.088 sec; Peak RSS: 0.009 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #9)" name="8" time="97.02111482620239">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.83] collected minimizers[M::mm_idx_gen::0.005*0.96] sorted minimizers[M::main::0.005*0.96] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*0.96] mid_occ = 9[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*0.96] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057[M::worker_pipeline::0.048*0.98] mapped 1 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/7/0/b/dataset_70bc6dd5-187d-4b0c-a2a0-5b17b673cc8b.dat[M::main] Real time: 0.049 sec; CPU: 0.048 sec; Peak RSS: 0.010 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #1)" name="0" time="213.36045336723328">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2022-05-21 22:59:14)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/221/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version             Status     Path                                     spades.py       3.14.1              good       /usr/local/bin/spades.py                 racon                               not used                                            makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb               tblastn         2.12.0+             good       /usr/local/bin/tblastn                   bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build             bowtie2         2.4.4               good       /usr/local/bin/bowtie2                   samtools        1.14                good       /usr/local/bin/samtools                  java            11.0.9.1-internal   good       /usr/local/bin/java                      pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar  bcftools                            not used                                          Choosing k-mer range for assembly (2022-05-21 22:59:16)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2022-05-21 22:59:16)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastqSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/221/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/221/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/tmp  Threads: 4  Memory limit (in Gb): 51======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/221/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/221/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     4M / 21M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 51 Gb  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     4M / 21M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.005     4M / 21M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 21M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.159    86M / 86M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.160    62M / 62M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.161    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.162    72M / 72M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.163    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.199    26M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.215    26M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.215    26M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.215    26M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.216    26M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.217    26M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.217    26M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 4.24995 Gb  0:00:00.217    26M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.519    43M / 59M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:00.519    43M / 59M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.586    43M / 59M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:00.586    43M / 59M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.628    43M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:00.629    43M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.629    43M / 59M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.629    43M / 59M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.630    43M / 59M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 4.24992 Gb  0:00:00.630    43M / 59M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.307     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:01.307     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:01.312    44M / 59M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.551    44M / 59M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:01.552    44M / 59M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.705    44M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.739    44M / 59M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.762    44M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:01.763    44M / 59M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.768    44M / 59M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.769    44M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:01.769    44M / 59M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:01.769    44M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:01.780    44M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:01.780    44M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:01.781    44M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:01.781    44M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:01.783    44M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:01.788    45M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:01.792    45M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:01.796    45M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:01.798    43M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.798    43M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.798    43M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.810    43M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).  0:00:01.810    43M / 59M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.957    43M / 59M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:01.960    43M / 59M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:01.965    43M / 59M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:01.965    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:01.965    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:01.965    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.966    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:02.061    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:02.295    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.879    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:03.521    43M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.642    38M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:04.642    38M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.643    38M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:04.643    38M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:04.644    38M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:04.644    38M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:04.644    38M / 59M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:04.644    38M / 59M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:04.644    38M / 59M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:04.644    38M / 59M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:04.644    38M / 59M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:04.645    38M / 59M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0:00:04...    : 246)   Deduplicating paths  0:00:05.730    32M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated  0:00:05.730    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.730    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.730    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.731    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.731    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.731    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.731    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.731    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.731    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:05.731    32M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished  0:00:05.732    32M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output  0:00:05.732    32M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/before_rr.fasta  0:00:05.738    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa  0:00:05.738    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/assembly_graph.fastg  0:00:05.742    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds  0:00:05.743    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/final_contigs.fasta  0:00:05.747    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/final_contigs.paths  0:00:05.751    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/scaffolds.fasta  0:00:05.755    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/scaffolds.paths  0:00:05.759    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths  0:00:05.768    32M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished  0:00:05.771    31M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:05.726    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2022-05-21 23:00:20)Filter by read depth        (2022-05-21 23:00:20)Filter homopolymer loops    (2022-05-21 23:00:20)Merge all possible          (2022-05-21 23:00:20)Normalise read depths       (2022-05-21 23:00:20)Remove zero length segments (2022-05-21 23:00:20)Sort link order             (2022-05-21 23:00:20)Graph cleaning finished     (2022-05-21 23:00:20)Saving /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2022-05-21 23:00:20)Filter by read depth        (2022-05-21 23:00:20)Filter homopolymer loops    (2022-05-21 23:00:20)Merge all possible          (2022-05-21 23:00:20)Normalise read depths       (2022-05-21 23:00:20)Remove zero length segments (2022-05-21 23:00:20)Sort link order             (2022-05-21 23:00:20)Graph cleaning finished     (2022-05-21 23:00:20)Saving /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2022-05-21 23:00:20)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/221/working/spades_assembly/Determining graph multiplicity (2022-05-21 23:00:20)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/221/working/001_best_spades_graph.gfaCleaning graph (2022-05-21 23:00:20)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/221/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2022-05-21 23:00:20)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2022-05-21 23:00:20)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2022-05-21 23:00:20)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/221/working/003_bridges_applied.gfaCleaning up leftover segments (2022-05-21 23:00:20)Segments eligible for deletion:Bridged assembly graph (2022-05-21 23:00:20)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/221/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completePolishing assembly with Pilon (2022-05-21 23:00:20)    Unicycler now conducts multiple rounds of Pilon in an attempt to repair anyremaining small-scale errors with the assembly.Aligning reads to find appropriate insert size range...  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta  bowtie2 -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.samInsert size 1st percentile:  263Insert size 99th percentile: 450Pilon polish round 1  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/221/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/221/working/fq2.fastq  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam  samtools index 1_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/221/working/pilon_polish --fix bases --frags 1_paired_alignments.bamNo Pilon changesSaving /galaxy/server/database/jobs_directory/000/221/working/005_polished.gfaRotating completed replicons (2022-05-21 23:00:30)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2022-05-21 23:00:45)Saving /galaxy/server/database/jobs_directory/000/221/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/221/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #2)" name="1" time="395.96282052993774">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2022-05-21 23:02:32)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/228/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version             Status     Path                                     spades.py       3.14.1              good       /usr/local/bin/spades.py                 racon           1.4.20              good       /usr/local/bin/racon                     makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb               tblastn         2.12.0+             good       /usr/local/bin/tblastn                   bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build             bowtie2         2.4.4               good       /usr/local/bin/bowtie2                   samtools        1.14                good       /usr/local/bin/samtools                  java            11.0.9.1-internal   good       /usr/local/bin/java                      pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar  bcftools                            not used                                          Choosing k-mer range for assembly (2022-05-21 23:02:34)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2022-05-21 23:02:34)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastqSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/228/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/228/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/tmp  Threads: 4  Memory limit (in Gb): 51======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/228/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/228/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     4M / 21M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 51 Gb  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     4M / 21M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.005     4M / 21M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 21M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.149    88M / 88M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.150    64M / 64M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.151    74M / 74M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.151    74M / 74M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.152    74M / 74M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.179    28M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.185    28M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.185    28M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.185    28M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.186    28M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.186    28M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.186    28M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 4.24995 Gb  0:00:00.186    28M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.445    45M / 59M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:00.445    45M / 59M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.526    45M / 59M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:00.527    45M / 59M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.573    45M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:00.574    45M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.574    45M / 59M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.574    45M / 59M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.574    45M / 59M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 4.24992 Gb  0:00:00.575    45M / 59M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.154     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:01.154     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:01.160    46M / 59M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.378    46M / 59M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:01.378    46M / 59M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.522    46M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.557    46M / 59M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.581    46M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:01.581    46M / 59M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.586    46M / 59M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.588    46M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:01.588    46M / 59M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:01.588    46M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:01.601    46M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:01.601    46M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:01.601    46M / 59M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:01.602    46M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:01.604    46M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:01.612    47M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:01.615    47M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:01.620    47M / 59M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:01.623    45M / 59M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.623    45M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.623    45M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.634    46M / 59M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).  0:00:01.635    46M / 59M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.792    46M / 59M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:01.795    46M / 59M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:01.799    41M / 59M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:01.800    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:01.800    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:01.800    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.800    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.904    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:02.144    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.747    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:03.395    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.488    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:04.488    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.490    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:04.490    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:04.490    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:04.490    41M / 59M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:04.490    41M / 59M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:04.491    41M / 59M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:04.491    41M / 59M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:04.491    41M / 59M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:04.491    41M / 59M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:04.491    41M / 59M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0:00:04.49..working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:05.626    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2022-05-21 23:03:37)Filter by read depth        (2022-05-21 23:03:37)Filter homopolymer loops    (2022-05-21 23:03:37)Merge all possible          (2022-05-21 23:03:37)Normalise read depths       (2022-05-21 23:03:37)Remove zero length segments (2022-05-21 23:03:37)Sort link order             (2022-05-21 23:03:37)Graph cleaning finished     (2022-05-21 23:03:37)Saving /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2022-05-21 23:03:37)Filter by read depth        (2022-05-21 23:03:37)Filter homopolymer loops    (2022-05-21 23:03:37)Merge all possible          (2022-05-21 23:03:37)Normalise read depths       (2022-05-21 23:03:37)Remove zero length segments (2022-05-21 23:03:37)Sort link order             (2022-05-21 23:03:37)Graph cleaning finished     (2022-05-21 23:03:37)Saving /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2022-05-21 23:03:37)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/228/working/spades_assembly/Determining graph multiplicity (2022-05-21 23:03:38)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/228/working/001_best_spades_graph.gfaCleaning graph (2022-05-21 23:03:38)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/228/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2022-05-21 23:03:38)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2022-05-21 23:03:38)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2022-05-21 23:03:38)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2022-05-21 23:03:38)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/228/working/miniasm_assembly/all_segments.fasta1538635081-153864508250785078255cm:i:11341538650905383-1538650885381293293255cm:i:63Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/228/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2022-05-21 23:03:38)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/228/working/simple_bridging/all_segments.fasta1538635081-153864508250785078255cm:i:11341538650905383-1538650885381293293255cm:i:63Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2022-05-21 23:03:38)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2022-05-21 23:03:38)1538655077-153868508050725072255cm:i:9451538650935384-1538650875378291291255cm:i:52Done! 1 out of 1 reads alignedAligning reads (2022-05-21 23:03:38)1/1: 1 (5386 bp)minimap alignments:    5,5077,-,1,8,5080    5093,5384,-,1,5087,5378Reference ranges:    1-: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 5076 points, score=5074.000394 (good)    line 2: 292 points, score=290.006826 (good)All Seqan alignments (time to align = 0.069 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0     5085           0      5085       -      15255        100.00   100.00%         1       5085     5386        5085      5386       -        903        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0     5085           0      5085       -      15255        100.00   100.00%         1       5085     5386        5085      5386       -        903        100.00   100.00%Read alignment summary (2022-05-21 23:03:38)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/228/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2022-05-21 23:03:38)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2022-05-21 23:03:38)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/228/working/003_bridges_applied.gfaCleaning up leftover segments (2022-05-21 23:03:38)Segments eligible for deletion:Bridged assembly graph (2022-05-21 23:03:38)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/228/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completePolishing assembly with Pilon (2022-05-21 23:03:38)    Unicycler now conducts multiple rounds of Pilon in an attempt to repair anyremaining small-scale errors with the assembly.Aligning reads to find appropriate insert size range...  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta  bowtie2 -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.samInsert size 1st percentile:  263Insert size 99th percentile: 450Pilon polish round 1  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam  samtools index 1_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/228/working/pilon_polish --fix bases --frags 1_paired_alignments.bamNo Pilon changesPilon polish round 2  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/228/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/228/working/fq2.fastq  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam  samtools index 2_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/228/working/pilon_polish --fix all --frags 2_paired_alignments.bamNo Pilon changesSaving /galaxy/server/database/jobs_directory/000/228/working/005_polished.gfaRotating completed replicons (2022-05-21 23:03:55)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2022-05-21 23:04:10)Saving /galaxy/server/database/jobs_directory/000/228/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/228/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #3)" name="2" time="273.6481702327728">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2022-05-21 23:00:47)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/229/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version   Status     Path                        spades.py       3.14.1    good       /usr/local/bin/spades.py    racon                     not used                               makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb  tblastn         2.12.0+   good       /usr/local/bin/tblastn      bowtie2-build             not used                               bowtie2                   not used                               samtools                  not used                               java                      not used                               pilon                     not used                               bcftools                  not used                             Choosing k-mer range for assembly (2022-05-21 23:00:48)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2022-05-21 23:00:48)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/229/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/229/working/fq2.fastqSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/229/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/229/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/tmp  Threads: 4  Memory limit (in Gb): 51======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/229/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/229/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     4M / 21M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 51 Gb  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     4M / 21M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     4M / 21M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     4M / 21M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.005     4M / 21M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 21M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.144    88M / 88M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.145    64M / 64M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.146    74M / 74M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.146    74M / 74M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.147    74M / 74M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.211    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.219    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.219    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.219    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.220    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.220    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.221    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 4.24995 Gb  0:00:00.221    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.508    43M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:00.508    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.577    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:00.577    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.612    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:00.613    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.613    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.613    43M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.614    43M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 4.24992 Gb  0:00:00.614    43M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.184     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:01.184     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:01.190    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.458    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:01.459    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.650    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.691    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.724    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:01.725    44M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.731    44M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.732    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:01.732    44M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:01.732    44M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:01.741    44M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:01.741    44M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:01.742    44M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:01.742    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:01.744    44M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:01.751    44M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:01.755    45M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:01.759    45M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:01.761    41M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.761    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.762    41M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.773    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).  0:00:01.773    42M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.919    42M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:01.923    42M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:01.927    42M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:01.927    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:01.927    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:01.927    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.927    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:02.036    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:02.291    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.856    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:03.500    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.588    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:04.589    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.590    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:04.590    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:04.590    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:04.590    42M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:04.591    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:04.591    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:04.591    42M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:04.591    42M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:04.591    42M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:04.591    42M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0:00:04.592    42M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover  0:00:04.592    42M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge re.. overlaps  0:00:05.701    30M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.701    30M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.701    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.701    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.701    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths  0:00:05.702    30M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated  0:00:05.702    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.702    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.702    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.703    30M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.703    30M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.703    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.703    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.703    30M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.703    30M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:05.703    30M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished  0:00:05.703    30M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output  0:00:05.703    30M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/before_rr.fasta  0:00:05.709    30M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa  0:00:05.709    30M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph.fastg  0:00:05.714    30M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds  0:00:05.714    30M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.fasta  0:00:05.718    30M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.paths  0:00:05.721    30M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.fasta  0:00:05.725    30M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.paths  0:00:05.729    30M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths  0:00:05.736    30M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished  0:00:05.738    30M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:05.699    32M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2022-05-21 23:01:54)Filter by read depth        (2022-05-21 23:01:54)Filter homopolymer loops    (2022-05-21 23:01:54)Merge all possible          (2022-05-21 23:01:54)Normalise read depths       (2022-05-21 23:01:54)Remove zero length segments (2022-05-21 23:01:54)Sort link order             (2022-05-21 23:01:54)Graph cleaning finished     (2022-05-21 23:01:54)Saving /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2022-05-21 23:01:54)Filter by read depth        (2022-05-21 23:01:54)Filter homopolymer loops    (2022-05-21 23:01:54)Merge all possible          (2022-05-21 23:01:54)Normalise read depths       (2022-05-21 23:01:54)Remove zero length segments (2022-05-21 23:01:54)Sort link order             (2022-05-21 23:01:54)Graph cleaning finished     (2022-05-21 23:01:54)Saving /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2022-05-21 23:01:54)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/229/working/spades_assembly/Determining graph multiplicity (2022-05-21 23:01:54)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/229/working/001_best_spades_graph.gfaCleaning graph (2022-05-21 23:01:54)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/229/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2022-05-21 23:01:54)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2022-05-21 23:01:54)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2022-05-21 23:01:54)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/229/working/003_bridges_applied.gfaCleaning up leftover segments (2022-05-21 23:01:54)Segments eligible for deletion:Bridged assembly graph (2022-05-21 23:01:54)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/229/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2022-05-21 23:01:54)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2022-05-21 23:02:09)Saving /galaxy/server/database/jobs_directory/000/229/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/229/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #4)" name="3" time="420.91666746139526">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2022-05-21 23:04:44)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only long reads, Unicycler will assemble the reads with miniasm andthen run repeated polishing rounds using Racon.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/230/workingDependencies:  Program         Version   Status     Path                        spades.py                 not used                               racon           1.4.20    good       /usr/local/bin/racon        makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb  tblastn         2.12.0+   good       /usr/local/bin/tblastn      bowtie2-build             not used                               bowtie2                   not used                               samtools                  not used                               java                      not used                               pilon                     not used                               bcftools                  not used                             Loading reads (2022-05-21 23:04:44)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2022-05-21 23:04:44)Saving to /galaxy/server/database/jobs_directory/000/230/working/miniasm_assembly/01_assembly_reads.fastq:  40 long readsFinding overlaps with minimap... success  120 overlapsAssembling reads with miniasm... success  7 segments, 6 links    Unicycler removes any links from the string graph which create branches.I.e. if any segment has two or more links connected to one end, those links areremoved. This will result in a graph with only simple linear paths that issuitable for creating unambiguous bridges.No links needed removalSaving /galaxy/server/database/jobs_directory/000/230/working/miniasm_assembly/11_branching_paths_removed.gfaMerging segments into unitigs:Linear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-  1 linear unitig  total size = 5,836 bpSaving /galaxy/server/database/jobs_directory/000/230/working/miniasm_assembly/12_unitig_graph.gfaSaving /galaxy/server/database/jobs_directory/000/230/working/002_unitig_graph.gfaPolishing miniasm assembly with Racon (2022-05-21 23:04:44)    Unicycler now uses Racon to polish the miniasm assembly. It does multiplerounds of polishing to get the best consensus. Circular unitigs are rotatedbetween rounds such that all parts (including the ends) are polished well.Saving to /galaxy/server/database/jobs_directory/000/230/working/miniasm_assembly/racon_polish/polishing_reads.fastq:  40 long readsPolish       Assembly          Mappinground            size          quality0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42862104010+158361061460311473800255cm:i:2000237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1583652215833179612255cm:i:27054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-158362376583334573457255cm:i:1153054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262525-158363023147872399255cm:i:1443708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46052804284-158364393614814004255cm:i:2463708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194286-15836421558335461618255cm:i:884850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271704027+158361680583310324153255cm:i:1744850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934082+15836416022201598255cm:i:30598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713344566-158362699578612813232255cm:i:243598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-158365026637722680255cm:i:129771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-158362657583314693386255cm:i:268771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972786-158363026369052689255cm:i:1579780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331434271-15836338425418344128255cm:i:4709780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330924330-15836450357984301295255cm:i:779e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45365444408-1583669392712083864255cm:i:2379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630084472-15836421557483511533255cm:i:53a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1583629093222131313255cm:i:22a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template44563354397+158361321525713514062255cm:i:280a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374349+1583623961238938255cm:i:40a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686537+1583653345798154464255cm:i:26b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351114359-158361673579820624248255cm:i:487b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351091619-158363015254721510255cm:i:68bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+158361733583313034100255cm:i:230bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+15836416903111712255cm:i:43f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894205+1583623393910393916255cm:i:166f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092961782+15836424257983671556255cm:i:63begin           5,836             5.330237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162901009505424314045255cm:i:5290237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1629056706287297617255cm:i:630237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162904404122400255cm:i:19054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162902540628722493747255cm:i:527054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1629051247412762423255cm:i:2453708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162904431623224312255cm:i:4863708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16290435462879431933255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271164027+162901774628721454513255cm:i:4264850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16290417414211737255cm:i:61598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162902854622622573372255cm:i:501598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1629051283114592780255cm:i:289771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162902825628722683462255cm:i:513771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972745-1629074280515012731255cm:i:2899780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16290354469920224345255cm:i:3779780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16290498462716141287255cm:i:1179e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1629072453419214462255cm:i:3379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16290459762065801609255cm:i:103a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1629030833386169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162901126570823684582255cm:i:487a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374392+162902310393621016255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686539+1629057856254217469255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162901806625827774452255cm:i:600b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162907416037611529255cm:i:150bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122795+1629052095912149703255cm:i:24bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162905851307155722255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+162901886628720704401255cm:i:456bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16290418386561834255cm:i:109c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1629020602358156298255cm:i:35f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1629023443621064413255cm:i:421f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16290448862737441785255cm:i:1311               6,290             7.820237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162421016500924603993255cm:i:5300237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1624256266239283613255cm:i:610237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162424408117404255cm:i:18054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162422535623922343704255cm:i:514054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1624251246913872418255cm:i:2713708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162424427623804272255cm:i:4943708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16242431462399551925255cm:i:1964850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162421759623921944480255cm:i:4404850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16242417354501731255cm:i:67598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162422848617822843330255cm:i:509598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1624251282515042774255cm:i:295771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162422819623922353420255cm:i:510771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151092745-1624274278715172713255cm:i:3049780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16242358465920514301255cm:i:3919780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16242493962236181284255cm:i:1149e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1624272449319414421255cm:i:3459e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16242455661585791602255cm:i:105a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1624230773380169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162421133566424054531255cm:i:507a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162422310513531028255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1624257596206204447255cm:i:40b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162421799621027494411255cm:i:591b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162427416017951527255cm:i:165bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1624251665916224750255cm:i:35bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421160847+162426021310144708255cm:i:16bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162421908623920614331255cm:i:454bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16242418316671827255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1624220532352157299255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1624223439521304372255cm:i:425f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16242444762257621778255cm:i:1382               6,242             8.020237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162651028502524363997255cm:i:5270237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1626556426262281620255cm:i:590237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162654408105404255cm:i:17054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162652544626222283718255cm:i:507054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1626551247813532427255cm:i:2603708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162654429323774289255cm:i:4923708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16265433162629671931255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162651772626221904490255cm:i:4364850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16265417484481744255cm:i:62598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162652857620122703344255cm:i:503598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1626551283414632783255cm:i:284771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162652828626222513434255cm:i:515771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151022745-1626574280415112730255cm:i:3059780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16265358467620634318255cm:i:3929780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694328-16265493062466231316255cm:i:1139e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1626572451019874438255cm:i:3509e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16265457361815691608255cm:i:102a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1626530893392169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162651145568024234535255cm:i:509a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162652310633371040255cm:i:56a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1626557796229223450255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162651812623327694421255cm:i:601b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162657416157641541255cm:i:156bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1626551825936236754255cm:i:36bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162655891322155733255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162651921626220624341255cm:i:449bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16265418446601840255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1626520632361157298255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1626523441221824389255cm:i:436f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16265446462487871784255cm:i:1413               6,265             8.04Best polish: /galaxy/server/database/jobs_directory/000/230/working/miniasm_assembly/racon_polish/016_rotated.fastaSaving /galaxy/server/database/jobs_directory/000/230/working/miniasm_assembly/13_racon_polished.gfaSaving /galaxy/server/database/jobs_directory/000/230/working/003_racon_polished.gfaAssembly complete (2022-05-21 23:04:45)Saving /galaxy/server/database/jobs_directory/000/230/working/assembly.gfa
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count (Test #1)" name="0" time="133.09389400482178">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Extract exon regions from  /galaxy/server/database/objects/5/1/0/dataset_51091343-a2e5-4b65-8811-34ee73682b11.dat...Counting total fragment ...  DoneTotal fragment = 20.0                Total exonic fragment = 2.0                  1 transcripts finished 2 transcripts finished 3 transcripts finished 4 transcripts finished 5 transcripts finished 6 transcripts finished 7 transcripts finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size (Test #1)" name="0" time="110.07326412200928">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation (Test #1)" name="0" time="125.4317934513092">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  Doneshuffling alignments ... Donesampling 5% (245) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 10% (491) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 15% (737) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 20% (983) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 25% (1229) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 30% (1474) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 35% (1720) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 40% (1966) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 45% (2212) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 50% (2458) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 55% (2703) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 60% (2949) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 65% (3195) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 70% (3441) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 75% (3687) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 80% (3932) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 85% (4178) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 90% (4424) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 95% (4670) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...sampling 100% (4916) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/1/3/dataset_9137b716-e9e6-498e-9c90-8e9cf95f3e33.dat ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #1)" name="0" time="125.18598532676697">
        
            
            <system-out><![CDATA[
            Skip multi-hits:FalseRun wigToBigWig outfile.wig /galaxy/server/database/objects/1/0/8/dataset_108cad51-ecf3-4a81-80a7-f6c2d6feeb77.dat outfile.bw 
            ]]></system-out>
            <system-err><![CDATA[
            No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #2)" name="1" time="128.1970932483673">
        
            
            <system-out><![CDATA[
            Skip multi-hits:TrueRun wigToBigWig outfile.wig /galaxy/server/database/objects/e/7/7/dataset_e77f9e99-d77d-449c-851f-b6c87b7d1066.dat outfile.bw 
            ]]></system-out>
            <system-err><![CDATA[
            No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #3)" name="2" time="133.54597520828247">
        
            
            <system-out><![CDATA[
            Skip multi-hits:False
            ]]></system-out>
            <system-err><![CDATA[
            No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #4)" name="3" time="112.88102769851685">
        
            
            <system-out><![CDATA[
            Skip multi-hits:FalseRun wigToBigWig outfile.wig /galaxy/server/database/objects/e/7/7/dataset_e77f9e99-d77d-449c-851f-b6c87b7d1066.dat outfile.bw 
            ]]></system-out>
            <system-err><![CDATA[
            Calcualte wigsum ... No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skippedtotal wigsum is:1960.0No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat (Test #1)" name="0" time="107.0154333114624">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile (Test #1)" name="0" time="150.60334634780884">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  DoneTotoal reads used: 40
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile (Test #2)" name="1" time="104.25765252113342">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  DoneTotoal reads used: 40
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile (Test #1)" name="0" time="96.99614477157593">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Process BAM file ...  Total reads used: 0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage (Test #1)" name="0" time="116.06226515769958">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            @ 2022-05-21 22:27:26: Read BED file (reference gene model) ...@ 2022-05-21 22:27:26: Total 7 transcripts loaded@ 2022-05-21 22:27:26: Get BAM file(s) ...pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam@ 2022-05-21 22:27:26: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...SampleSkewnesspairend_strandspecific_51mer_hg19_chr1_1_100000_bam3.366683083597443@ 2022-05-21 22:27:26: Running R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage (Test #2)" name="1" time="136.78358459472656">
        
            
            <system-out><![CDATA[
            null device           1 null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            @ 2022-05-21 22:27:38: Read BED file (reference gene model) ...@ 2022-05-21 22:27:38: Total 7 transcripts loaded@ 2022-05-21 22:27:38: Get BAM file(s) ...pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bampairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bampairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam@ 2022-05-21 22:27:38: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...@ 2022-05-21 22:27:38: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...@ 2022-05-21 22:27:39: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...SampleSkewnesspairend_strandspecific_51mer_hg19_chr1_1_100000_bam3.366683083597443pairend_strandspecific_51mer_hg19_chr1_1_100000_bam.13.366683083597443pairend_strandspecific_51mer_hg19_chr1_1_100000_bam.23.366683083597443@ 2022-05-21 22:27:39: Running R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2 (Test #1)" name="0" time="151.39013409614563">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            calculating coverage over gene body ...  1 genes finished  2 genes finished  5 genes finished  6 genes finished  7 genes finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment (Test #1)" name="0" time="130.33132481575012">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Reading reference gene model /galaxy/server/database/objects/4/3/e/dataset_43e79c42-3f9e-4dfb-a5b5-d6bf0fa630e5.dat ... DoneLoading SAM/BAM file ...  FinishedTotal 30 usable reads were sampled
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance (Test #1)" name="0" time="129.96868515014648">
        
            
            <system-out><![CDATA[
            NameMeanMediansdoutput96.47368421052636787.858705014265null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Get exon regions from /galaxy/server/database/objects/5/8/4/dataset_584563c4-c98c-4e22-9f2c-5df7b7801006.dat ...Load BAM file ...  DoneTotal read pairs  used 20
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile (Test #1)" name="0" time="121.6802864074707">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  DoneTotoal reads used: 40
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation (Test #1)" name="0" time="144.02199244499207">
        
            
            <system-out><![CDATA[
            null device           1 null device           1 total = 4
            ]]></system-out>
            <system-err><![CDATA[
            Reading reference bed file:  /galaxy/server/database/objects/e/9/1/dataset_e914fbba-cf4f-46b1-a324-fde658f46e39.dat  ...  DoneLoad BAM file ...  Done===================================================================Total splicing  Events:4Known Splicing Events:1Partial Novel Splicing Events:1Novel Splicing Events:1Total splicing  Junctions:3Known Splicing Junctions:1Partial Novel Splicing Junctions:1Novel Splicing Junctions:1===================================================================
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation (Test #1)" name="0" time="134.71821546554565">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            reading reference bed file:  /galaxy/server/database/objects/7/6/1/dataset_761f3cb2-1a25-4fe0-8db0-f454377162b3.dat  ...  Done! Total 14 known splicing junctions.Load BAM file ...  Doneshuffling alignments ... Donesampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 35% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.sampling 40% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.sampling 45% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.sampling 50% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.sampling 55% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.sampling 60% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.sampling 65% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.sampling 70% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.sampling 75% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.sampling 80% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.sampling 85% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.sampling 90% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.sampling 95% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.sampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile (Test #1)" name="0" time="104.10668778419495">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Process BAM file ...  No mismatches found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC (Test #1)" name="0" time="109.0713484287262">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Read BAM file ...  Donewriting GC content ...writing R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC (Test #1)" name="0" time="148.4443690776825">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Read BAM file ...  Donegenerating data matrix ...generating R script  ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution (Test #1)" name="0" time="129.14690232276917">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            processing /galaxy/server/database/objects/0/0/3/dataset_003fda7a-c9e6-41c4-b09d-dec13edfac82.dat ... Doneprocessing /galaxy/server/database/objects/d/1/a/dataset_d1a0929b-d449-4a67-bb60-efa16c858d34.dat ... Finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication (Test #1)" name="0" time="151.16789770126343">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  Donereport duplicte rate based on sequence ...report duplicte rate based on mapping  ...generate R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #1)" name="0" time="106.04597473144531">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #2)" name="1" time="103.88543653488159">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #3)" name="2" time="106.6979730129242">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... DoneCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #4)" name="3" time="101.25927686691284">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... DoneCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality (Test #1)" name="0" time="100.08251953125">
        
            
            <system-out><![CDATA[
            null device           1 null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Read BAM file ...  Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin (Test #1)" name="0" time="124.25845122337341">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            @ 2022-05-21 22:31:28: Get BAM file(s) ...Total 1 BAM file(s):input.bam@ 2022-05-21 22:31:28: Processing input.bam 2 transcripts finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #1)" name="0" time="105.7274649143219">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/233/working--disable-gzip-output-t4-m19-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/9/0/4/dataset_9047c669-4e94-4bcc-830f-c7ef2dad70cc.dat--pe1-2fastq:/galaxy/server/database/objects/3/3/9/dataset_339539c4-0590-4810-b606-3b21ca9f9f2c.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/233/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/9/0/4/dataset_9047c669-4e94-4bcc-830f-c7ef2dad70cc.dat']      right reads: ['/galaxy/server/database/objects/3/3/9/dataset_339539c4-0590-4810-b606-3b21ca9f9f2c.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/233/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/233/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/233/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/233/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/0/4/dataset_9047c669-4e94-4bcc-830f-c7ef2dad70cc.dat  0:00:00.548     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/3/9/dataset_339539c4-0590-4810-b606-3b21ca9f9f2c.dat  0:00:01.019     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.024    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.371    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.403    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.424    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.426    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.428    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.431    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.440    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.440    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.441    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/0/4/dataset_9047c669-4e94-4bcc-830f-c7ef2dad70cc.dat  0:00:01.492    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/3/9/dataset_339539c4-0590-4810-b606-3b21ca9f9f2c.dat  0:00:01.525    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.525    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.529    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.531    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.531    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.546    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.546    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.546    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.546    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/9/0/4/dataset_9047c669-4e94-4bcc-830f-c7ef2dad70cc.dat and /galaxy/server/database/objects/3/3/9/dataset_339539c4-0590-4810-b606-3b21ca9f9f2c.dat  0:00:01.577    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.588    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.592    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.625    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/233/working/corrected/corrected.yaml  0:00:01.630    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/233/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/233/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/233/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.314   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.321     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.527   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.593     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.594     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.594     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.594     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.594     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.594     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.594     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.729     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.731    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.731    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.786    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.786    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.816    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.817    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.817    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.817    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.817    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.817    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.379     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.384    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.628    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.628    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.778    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.839    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.862    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.862    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.869    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.872    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO.. 0:00:07.291    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.292    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.292    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.292    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.292    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.292    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.292    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.292    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.292    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.292    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.292    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.292    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.292    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.328    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.328    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.328    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.330    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.330    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/233/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.331    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/233/working//K33/before_rr.fasta  0:00:07.335    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/233/working//K33/assembly_graph.fastg  0:00:07.339    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/233/working//K33/simplified_contigs.fasta  0:00:07.343    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/233/working//K33/intermediate_contigs.fasta  0:00:07.351    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.351    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.351    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.351    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.351    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.351    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.417    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.569    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.352    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.352    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.358    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.493   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.496   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.501   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.502   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.502   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.502   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.516   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.524   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.539    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.539    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.539    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.539    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.539    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.539    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.539    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.539    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.539    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.539    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.539    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.539    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.539    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.540    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.540    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.540    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.540    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.540    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.540    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.540    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.540    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.540    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.540    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.540    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.540    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.540    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.540    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.540    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.540    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.541    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.541    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.541    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.541    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.541    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.541    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/233/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.541    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/233/working//K33/before_rr.fasta  0:00:09.547    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/233/working//K33/assembly_graph.fastg  0:00:09.552    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/233/working//K33/final_contigs.paths  0:00:09.559    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/233/working//K33/scaffolds.paths  0:00:09.572    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.574    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/233/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/233/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/233/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/233/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/233/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/233/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/233/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/233/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #2)" name="1" time="145.61821174621582">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/236/working--disable-gzip-output--only-assembler-t4-m19-k33--pe1-fr--pe1-1fasta:/galaxy/server/database/objects/0/8/e/dataset_08ec0e7d-d17c-49b3-98d6-a82f0753fe2b.dat--pe1-2fasta:/galaxy/server/database/objects/7/3/d/dataset_73dba7f7-ce7d-4aad-960d-1be1d6d5ebbe.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/236/workingMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/0/8/e/dataset_08ec0e7d-d17c-49b3-98d6-a82f0753fe2b.dat']      right reads: ['/galaxy/server/database/objects/7/3/d/dataset_73dba7f7-ce7d-4aad-960d-1be1d6d5ebbe.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/236/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/236/working/spades.log===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/236/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/236/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.115     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.295   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.300     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.477   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.534     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.534     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611  0:00:00.534     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.534     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.535     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.535     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.535     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.670     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.672    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.672    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.728    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:00.728    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.765    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.766    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.766    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.766    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.766    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.766    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.265     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.  0:00:01.271    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.495    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.  0:00:01.495    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.627    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.663    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.682    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).  0:00:01.682    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.683    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.689    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph  0:00:01.690    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths  0:00:01.691    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted  0:00:01.691    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops  0:00:01.691    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected  0:00:01.691    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.691    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.691    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.701    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).  0:00:01.701    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.715    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM  0:00:01.722    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding  0:00:01.723    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0  0:00:01.723    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356  0:00:01.723    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478  0:00:01.723    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.767    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:01.881    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.268    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:02.934    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.142    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:06.125    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849  0:00:06.127    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568  0:00:06.127    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251  0:00:06.127    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135  0:00:06.127    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738  0:00:06.127    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705  0:00:06.127    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135  0:00:06.127    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0  0:00:06.127    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer  0:00:06.127    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill  0:00:06.128    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:06.128    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:06.128    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:06.128    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:06.128    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:06.661     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.  0:00:06.665    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:06.896    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:06.896    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:07.034    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:07.071    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:07.097    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).  0:00:07.097    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.  0:00:07.098    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled  0:00:07.101    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps  0:00:07.101    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)  0:00:07.105    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads  0:00:07.105    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices  0:00:07.105    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:07.105    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.106    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification  0:00:07.106    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:07.106    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled  0:00:07.106    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover  0:00:07.107    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times  0:00:07.107    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper  0:00:07.107    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times  0:00:07.107    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover  0:00:07.107    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times  0:00:07.107    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover  0:00:07.107    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times  0:00:07.107    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification  0:00:07.107    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started  0:00:07.107    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:0..   INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:08.041    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:08.042    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:08.042    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:08.042    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:08.042    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:08.042    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:08.042    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:08.042    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:08.042    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:08.042    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865  0:00:08.042    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:08.042    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:08.042    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:08.055    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:08.055    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:08.055    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:08.057    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:08.057    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/236/working//K33/assembly_graph_with_scaffolds.gfa  0:00:08.058    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/236/working//K33/before_rr.fasta  0:00:08.062    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/236/working//K33/assembly_graph.fastg  0:00:08.066    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/236/working//K33/simplified_contigs.fasta  0:00:08.069    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/236/working//K33/intermediate_contigs.fasta  0:00:08.076    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:08.076    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:08.076    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:08.076    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:08.076    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:08.076    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:08.144    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.269    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.061    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:10.061    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges  0:00:10.067    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100  0:00:10.209   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:10.212   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.217   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.218   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:10.218   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:10.219   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:10.233   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.241   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.259    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:10.259    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.259    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.259    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:10.259    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.259    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:10.259    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.259    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.259    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:10.259    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:10.259    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:10.259    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:10.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:10.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:10.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.260    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.261    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.261    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.261    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:10.261    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:10.261    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/236/working//K33/assembly_graph_with_scaffolds.gfa  0:00:10.261    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/236/working//K33/before_rr.fasta  0:00:10.267    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/236/working//K33/assembly_graph.fastg  0:00:10.275    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/236/working//K33/final_contigs.paths  0:00:10.286    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/236/working//K33/scaffolds.paths  0:00:10.302    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:10.304    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds===== Assembling finished. Used k-mer sizes: 33  * Assembled contigs are in /galaxy/server/database/jobs_directory/000/236/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/236/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/236/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/236/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/236/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/236/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/236/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #3)" name="2" time="129.65276312828064">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/239/working--disable-gzip-output-t4-m19-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/a/7/d/dataset_a7d7d17e-bb8d-438d-b55f-5ac32469b6d3.dat--pe1-2fastq.gz:/galaxy/server/database/objects/d/8/3/dataset_d834ad77-71e9-4d5d-8dfb-cf29e02505ed.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/239/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/a/7/d/dataset_a7d7d17e-bb8d-438d-b55f-5ac32469b6d3.dat']      right reads: ['/galaxy/server/database/objects/d/8/3/dataset_d834ad77-71e9-4d5d-8dfb-cf29e02505ed.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/239/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/239/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/239/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/239/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.009     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.009     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.009     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.009     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/7/d/dataset_a7d7d17e-bb8d-438d-b55f-5ac32469b6d3.dat  0:00:00.665     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/8/3/dataset_d834ad77-71e9-4d5d-8dfb-cf29e02505ed.dat  0:00:01.297     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.302    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.571    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.571    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.726    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.756    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.778    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.780    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.782    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.785    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.797    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.798    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.798    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/7/d/dataset_a7d7d17e-bb8d-438d-b55f-5ac32469b6d3.dat  0:00:01.843    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/8/3/dataset_d834ad77-71e9-4d5d-8dfb-cf29e02505ed.dat  0:00:01.874    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.874    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.874    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.884    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.885    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.886    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.886    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.925    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.925    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.925    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.925    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/a/7/d/dataset_a7d7d17e-bb8d-438d-b55f-5ac32469b6d3.dat and /galaxy/server/database/objects/d/8/3/dataset_d834ad77-71e9-4d5d-8dfb-cf29e02505ed.dat  0:00:01.962    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.974    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.980    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:02.017    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:02.017    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:02.018    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/239/working/corrected/corrected.yaml  0:00:02.024    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/239/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/239/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/239/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.135    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.142     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.346   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.354     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.553   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.621     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.621     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.621     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.622     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.622     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.622     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.622     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.791     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.793    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.793    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.860    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.860    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.898    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.899    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.899    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.899    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.899    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.899    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.519     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.524    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.787    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.787    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.952    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.980    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:02.003    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:02.003    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:02.020    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:02.027    16M / 3G    INFO    General                 (stage.cpp                 : 101).. 0:00:07.469    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.470    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.470    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.470    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.470    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.470    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.470    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.470    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.470    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.470    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.470    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.470    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.470    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.479    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.479    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.479    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.481    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.481    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/239/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.482    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/239/working//K33/before_rr.fasta  0:00:07.486    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/239/working//K33/assembly_graph.fastg  0:00:07.490    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/239/working//K33/simplified_contigs.fasta  0:00:07.494    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/239/working//K33/intermediate_contigs.fasta  0:00:07.502    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.502    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.502    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.502    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.502    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.502    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.570    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.688    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.472    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.472    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.480    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.627   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.647   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.652   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.654   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.654   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.654   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.668   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.677   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.697    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.697    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.697    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.697    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.698    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.698    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.698    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.698    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.698    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.698    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.698    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.698    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.698    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.698    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.698    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.698    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.698    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.698    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.698    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.698    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.698    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.699    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.699    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.699    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.699    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.699    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.699    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.699    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.699    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.699    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.699    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.699    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.700    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.700    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.700    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/239/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.700    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/239/working//K33/before_rr.fasta  0:00:09.713    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/239/working//K33/assembly_graph.fastg  0:00:09.755    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/239/working//K33/final_contigs.paths  0:00:09.764    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/239/working//K33/scaffolds.paths  0:00:09.785    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.787    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/239/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/239/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/239/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/239/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/239/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/239/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/239/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/239/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #4)" name="3" time="120.76167225837708">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/242/working--disable-gzip-output-t4-m19--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/9/6/f/dataset_96fad86b-8306-476f-9ca0-4b16a8a612a0.dat--pe1-2fastq:/galaxy/server/database/objects/3/0/8/dataset_3089abf6-7c63-4d12-918a-fa61d9d866bc.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/242/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/9/6/f/dataset_96fad86b-8306-476f-9ca0-4b16a8a612a0.dat']      right reads: ['/galaxy/server/database/objects/3/0/8/dataset_3089abf6-7c63-4d12-918a-fa61d9d866bc.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: automatic selection based on read length  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/242/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/242/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/242/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/242/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/6/f/dataset_96fad86b-8306-476f-9ca0-4b16a8a612a0.dat  0:00:00.577     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/0/8/dataset_3089abf6-7c63-4d12-918a-fa61d9d866bc.dat  0:00:01.136     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.140    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.347    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.347    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.477    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.506    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.525    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.526    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.529    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.530    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.539    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.540    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.540    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/6/f/dataset_96fad86b-8306-476f-9ca0-4b16a8a612a0.dat  0:00:01.574    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/0/8/dataset_3089abf6-7c63-4d12-918a-fa61d9d866bc.dat  0:00:01.612    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.612    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.612    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.616    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.617    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.617    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.632    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.632    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.632    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.632    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/9/6/f/dataset_96fad86b-8306-476f-9ca0-4b16a8a612a0.dat and /galaxy/server/database/objects/3/0/8/dataset_3089abf6-7c63-4d12-918a-fa61d9d866bc.dat  0:00:01.663    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.674    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.678    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.709    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.709    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.709    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/242/working/corrected/corrected.yaml  0:00:01.715    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/242/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/242/working/K21/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/242/working/dataset.info) with K=21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.301   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.310     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.503   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.565     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.565     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.566     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.726     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.727    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.727    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.780    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.  0:00:00.780    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.813    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.813    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.814    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.371     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.  0:00:01.376    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.613    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.  0:00:01.613    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.749    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.776    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.794    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).  0:00:01.794    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.795    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.796    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping  0:00:01.796    16M / 3G    INFO    General                 (construction.cpp          : 2..:03.639    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:03.641    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:03.641    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:03.641    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:03.641    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:03.641    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.641    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:03.641    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:03.641    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:03.641    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62  0:00:03.641    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:03.641    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.641    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.648    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:03.648    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:03.648    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:03.650    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:03.650    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/242/working//K55/assembly_graph_with_scaffolds.gfa  0:00:03.651    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K55/before_rr.fasta  0:00:03.655    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/242/working//K55/assembly_graph.fastg  0:00:03.660    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K55/simplified_contigs.fasta  0:00:03.664    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K55/intermediate_contigs.fasta  0:00:03.670    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:03.670    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.670    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.670    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945  0:00:03.670    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:03.670    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:03.735    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:03.855    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.637    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:05.637    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges  0:00:05.645    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100  0:00:05.772   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:05.774   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.777   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.778   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:05.778   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:05.778   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:05.791   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.796   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.812    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:05.812    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:05.812    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:05.812    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:05.812    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.812    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.812    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.812    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:05.812    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:05.812    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:05.812    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.812    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.812    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:05.812    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:05.813    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.813    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.813    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.813    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:05.813    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:05.813    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:05.813    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:05.813    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:05.813    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.813    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.813    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:05.813    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:05.813    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:05.813    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.814    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.814    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.814    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.814    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.814    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.814    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:05.814    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:05.814    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/242/working//K55/assembly_graph_with_scaffolds.gfa  0:00:05.814    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/242/working//K55/before_rr.fasta  0:00:05.819    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/242/working//K55/assembly_graph.fastg  0:00:05.824    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/242/working//K55/final_contigs.paths  0:00:05.830    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/242/working//K55/scaffolds.paths  0:00:05.846    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:05.848    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds===== Assembling finished. Used k-mer sizes: 21, 33, 55  * Corrected reads are in /galaxy/server/database/jobs_directory/000/242/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/242/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/242/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/242/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/242/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/242/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/242/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/242/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #5)" name="4" time="124.33479619026184">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/249/working--disable-gzip-output-t4-m19-k77--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat--pe1-2fastq:/galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/249/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat']      right reads: ['/galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [77]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/249/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/249/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/249/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/249/working/corrected/configs/config.info  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.003     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.005     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.007     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.008     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat  0:00:00.556     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.086     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.090    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.298    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.299    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.424    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.456    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.478    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.480    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.499    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.499    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.499    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat  0:00:01.543    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.589    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.589    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.589    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.599    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.600    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.600    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.619    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.619    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.619    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.619    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat and /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.650    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.661    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.665    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.700    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.700    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.700    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/249/working/corrected/corrected.yaml  0:00:01.704    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/249/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/249/working/K77/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/249/working/dataset.info) with K=77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.115    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.121     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.302   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.310     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.550     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.551     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.551     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101  0:00:00.688     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.690    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.690    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.748    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.  0:00:00.748    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.784    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.785    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.785    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.785    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.785    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.785    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525  0:00:01.280     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.  0:00:01.285    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.495    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.  0:00:01.495    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.627    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.660    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.679    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.681    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.682    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO.. 0:00:04.102    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:04.103    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:04.103    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:04.103    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:04.103    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:04.103    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:04.103    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:04.103    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:04.103    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:04.103    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594  0:00:04.103    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:04.103    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:04.103    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:04.112    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:04.112    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:04.112    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:04.115    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:04.115    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/249/working//K77/assembly_graph_with_scaffolds.gfa  0:00:04.115    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K77/before_rr.fasta  0:00:04.120    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/249/working//K77/assembly_graph.fastg  0:00:04.124    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K77/simplified_contigs.fasta  0:00:04.127    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K77/intermediate_contigs.fasta  0:00:04.134    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:04.134    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:04.134    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:04.134    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899  0:00:04.134    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:04.134    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:04.200    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:04.314    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.093    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:06.093    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges  0:00:06.100    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100  0:00:06.232   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:06.234   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:06.238   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.240   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:06.240   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:06.240   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:06.252   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:06.258   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:06.275    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:06.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:06.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:06.275    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:06.275    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:06.275    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:06.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:06.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:06.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:06.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:06.275    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:06.275    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:06.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:06.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:06.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:06.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:06.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:06.276    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:06.276    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:06.276    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:06.276    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:06.276    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:06.276    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:06.276    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.276    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/249/working//K77/assembly_graph_with_scaffolds.gfa  0:00:06.277    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/249/working//K77/before_rr.fasta  0:00:06.281    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/249/working//K77/assembly_graph.fastg  0:00:06.285    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/249/working//K77/final_contigs.paths  0:00:06.292    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/249/working//K77/scaffolds.paths  0:00:06.312    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:06.313    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds===== Assembling finished. Used k-mer sizes: 77  * Corrected reads are in /galaxy/server/database/jobs_directory/000/249/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/249/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/249/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/249/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/249/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/249/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/249/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/249/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #6)" name="5" time="140.12902998924255">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/250/working--disable-gzip-output-t4-m19-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat--pe1-2fastq:/galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/250/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat']      right reads: ['/galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/250/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/250/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/250/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/250/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.004     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat  0:00:00.562     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.106     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.111    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.345    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.346    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.469    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.501    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.521    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.523    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.528    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.536    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.536    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.536    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat  0:00:01.583    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.638    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.638    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.638    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.642    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.644    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.644    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.662    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.662    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.662    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.662    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat and /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.695    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.706    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.709    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.737    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.737    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.737    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/250/working/corrected/corrected.yaml  0:00:01.742    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/250/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/250/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/250/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.109    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.115     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.296   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.302     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.481   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.547     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.547     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.547     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.548     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.548     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.548     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.548     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.717     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.719    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.719    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.777    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.777    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.813    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.813    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.814    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.298     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.303    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.541    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.541    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.673    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.707    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.728    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.728    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.730    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.730    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO.. 0:00:06.918    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:06.918    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:06.919    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:06.919    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:06.919    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:06.919    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.919    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:06.919    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:06.919    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:06.919    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:06.919    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:06.919    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.919    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.933    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:06.933    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:06.933    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:06.936    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.936    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph_with_scaffolds.gfa  0:00:06.936    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/before_rr.fasta  0:00:06.941    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph.fastg  0:00:06.945    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/simplified_contigs.fasta  0:00:06.951    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/intermediate_contigs.fasta  0:00:06.960    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:06.960    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.960    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.960    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:06.960    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:06.960    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.027    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.152    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.940    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:08.940    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:08.947    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.071   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.073   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.078   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.080   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.080   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.080   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.094   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.101   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.121    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.121    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.121    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.121    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.125    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.126    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.126    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.126    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.126    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.126    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.130    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.132    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.132    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.132    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.132    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.132    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.132    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.132    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.132    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.132    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.132    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.134    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.134    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.134    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.134    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.134    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.134    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.134    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.134    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.134    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.135    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.135    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.135    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.135    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.135    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.135    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.135    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.135    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.135    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.136    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.136    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.136    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.136    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.136    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.136    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.136    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.136    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.136    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.136    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.136    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.136    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.137    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/before_rr.fasta  0:00:09.144    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph.fastg  0:00:09.150    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/250/working//K33/final_contigs.paths  0:00:09.161    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/250/working//K33/scaffolds.paths  0:00:09.187    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.188    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/250/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/250/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/250/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/250/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/250/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/250/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/250/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/250/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #7)" name="6" time="138.82875609397888">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/251/working--disable-gzip-output-t4-m19-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat--pe1-2fastq:/galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/251/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat']      right reads: ['/galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/251/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/251/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/251/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/251/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat  0:00:00.611     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.217     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.222    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.477    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.478    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.632    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.661    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.684    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.685    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.688    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.690    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.701    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.701    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.701    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat  0:00:01.749    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.791    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.792    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.792    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.797    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.798    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.798    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.798    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.816    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.816    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.816    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.816    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/3/f/dataset_53fb178f-a456-4c7c-84f0-56dd50634e0d.dat and /galaxy/server/database/objects/b/8/c/dataset_b8cce728-928f-4f2c-8a28-0970ddd5753a.dat  0:00:01.860    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.868    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.871    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.912    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.912    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.912    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/251/working/corrected/corrected.yaml  0:00:01.916    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/251/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/251/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/251/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.115    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.121     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.312   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.317     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.524   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.603     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.603     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.603     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.603     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.604     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.604     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.604     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.770     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.773    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.773    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.850    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.850    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.880    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.880    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.880    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.881    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.881    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.881    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.450     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.456    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.717    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.717    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.859    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.887    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.905    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.905    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.906    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.907    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO.. 0:00:07.310    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.311    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.311    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.311    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.311    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.311    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.311    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.311    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.311    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.311    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.311    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.311    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.311    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.324    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.324    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.324    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.326    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.326    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/251/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.327    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/251/working//K33/before_rr.fasta  0:00:07.331    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/251/working//K33/assembly_graph.fastg  0:00:07.335    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/251/working//K33/simplified_contigs.fasta  0:00:07.340    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/251/working//K33/intermediate_contigs.fasta  0:00:07.348    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.348    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.348    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.348    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.348    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.348    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.417    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.564    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.332    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.332    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.337    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.472   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.475   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.480   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.482   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.482   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.482   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.493   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.500   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.517    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.517    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.517    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.517    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.517    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.517    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.518    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.518    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.518    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.518    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.518    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.518    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.518    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.518    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.518    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.518    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.524    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.524    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.524    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.524    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.524    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.524    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.524    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.524    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.524    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.524    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.524    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.524    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.524    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/251/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.525    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/251/working//K33/before_rr.fasta  0:00:09.530    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/251/working//K33/assembly_graph.fastg  0:00:09.534    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/251/working//K33/final_contigs.paths  0:00:09.542    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/251/working//K33/scaffolds.paths  0:00:09.558    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.559    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/251/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/251/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/251/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/251/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/251/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/251/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/251/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/251/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #8)" name="7" time="106.63607358932495">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/254/working--disable-gzip-output-t4-m19-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/c/8/8/dataset_c88722a9-6fd5-4d83-b265-7f7658f411b2.dat--pe1-2fastq.gz:/galaxy/server/database/objects/6/6/b/dataset_66b3bc44-569a-4d4b-8dba-509f575f2582.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-5.4.171+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/254/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/c/8/8/dataset_c88722a9-6fd5-4d83-b265-7f7658f411b2.dat']      right reads: ['/galaxy/server/database/objects/6/6/b/dataset_66b3bc44-569a-4d4b-8dba-509f575f2582.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/254/working/tmp  Threads: 4  Memory limit (in Gb): 19======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/254/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/254/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/254/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/8/8/dataset_c88722a9-6fd5-4d83-b265-7f7658f411b2.dat  0:00:00.594     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/6/b/dataset_66b3bc44-569a-4d4b-8dba-509f575f2582.dat  0:00:01.162     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.167    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.395    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.395    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.532    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.560    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.579    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.581    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.583    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.586    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.597    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.597    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.597    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/8/8/dataset_c88722a9-6fd5-4d83-b265-7f7658f411b2.dat  0:00:01.640    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/6/b/dataset_66b3bc44-569a-4d4b-8dba-509f575f2582.dat  0:00:01.676    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.676    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.676    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.682    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.683    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.704    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.704    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.704    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.704    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/8/8/dataset_c88722a9-6fd5-4d83-b265-7f7658f411b2.dat and /galaxy/server/database/objects/6/6/b/dataset_66b3bc44-569a-4d4b-8dba-509f575f2582.dat  0:00:01.740    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.751    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.756    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.788    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.788    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.788    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/254/working/corrected/corrected.yaml  0:00:01.793    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/254/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/254/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 19 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/254/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.123     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.310   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.317     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.500   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.565     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.566     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.566     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58301 Gb  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.718     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.720    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.720    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.817    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.817    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.864    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.865    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.865    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.865    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.865    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 1.58203 Gb  0:00:00.865    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.414     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.419    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.664    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.664    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.791    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.820    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.839    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.839    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.840    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.841    16M / 3G    INFO    General                 (stage.cpp                 : 101).. 0:00:06.832    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:06.833    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:06.833    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:06.833    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:06.833    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:06.833    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.833    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:06.833    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:06.833    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:06.833    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:06.833    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:06.833    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.833    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.846    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:06.846    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:06.846    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:06.848    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.848    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/254/working//K33/assembly_graph_with_scaffolds.gfa  0:00:06.849    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/254/working//K33/before_rr.fasta  0:00:06.853    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/254/working//K33/assembly_graph.fastg  0:00:06.857    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/254/working//K33/simplified_contigs.fasta  0:00:06.862    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/254/working//K33/intermediate_contigs.fasta  0:00:06.870    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:06.870    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.870    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.870    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:06.870    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:06.870    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:06.936    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.056    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.831    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:08.831    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:08.837    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:08.974   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:08.976   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.981   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.982   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:08.983   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:08.983   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:08.995   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.003   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.025    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.025    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.025    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.025    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.025    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.026    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.026    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.026    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.026    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.026    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.026    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.026    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.026    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.026    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.026    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.026    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.026    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.026    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.026    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.026    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.026    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.027    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.027    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.027    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.027    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.027    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.027    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.027    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.027    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.027    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.027    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.027    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.027    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/254/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.028    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/254/working//K33/before_rr.fasta  0:00:09.034    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/254/working//K33/assembly_graph.fastg  0:00:09.038    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/254/working//K33/final_contigs.paths  0:00:09.044    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/254/working//K33/scaffolds.paths  0:00:09.057    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.059    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/254/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/254/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/254/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/254/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/254/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/254/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/254/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/254/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>