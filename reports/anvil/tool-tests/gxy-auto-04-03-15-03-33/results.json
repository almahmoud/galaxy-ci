{"version": "0.1", "suitename": "Ephemeris tool tests targeting http://35.237.86.168:8000/galaxy/", "results": {"total": 43, "errors": 3, "failures": 0, "skips": 0}, "tests": [{"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 36.55860257148743, "inputs": {"library|input_1": {"src": "hda", "id": "ac2176247aaf8ce7"}, "library|input_2": {"src": "hda", "id": "62a24e79c04643e7"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "45022bc5db3d896a"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "abd9439c648811d8", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:19:02.821772", "create_time": "2021-04-03T15:18:43.313996", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-9vh57", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/5/b/8/dataset_5b839f25-1215-4a7d-bb51-d9b9d3cfdd5d.dat' genome && ln -s -f '/galaxy/server/database/objects/5/b/8/dataset_5b839f25-1215-4a7d-bb51-d9b9d3cfdd5d.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/6/4/d/dataset_64da1c4d-0a1a-4664-9457-5060f749eaf1.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/2/1/6/dataset_2162fee7-4e59-4aea-bed0-598ad6993149.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/a/b/b/dataset_abba471b-71ed-4c2a-a003-1ab1371ef311.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 26, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 24, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 25, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "ac2176247aaf8ce7", "src": "hda", "uuid": "64da1c4d-0a1a-4664-9457-5060f749eaf1"}, "input_2": {"id": "62a24e79c04643e7", "src": "hda", "uuid": "2162fee7-4e59-4aea-bed0-598ad6993149"}, "own_file": {"id": "45022bc5db3d896a", "src": "hda", "uuid": "5b839f25-1215-4a7d-bb51-d9b9d3cfdd5d"}}, "outputs": {"output": {"id": "abd9439c648811d8", "src": "hda", "uuid": "abba471b-71ed-4c2a-a003-1ab1371ef311"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/b/8/dataset_5b839f25-1215-4a7d-bb51-d9b9d3cfdd5d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  bucket 13: 10%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/b/8/dataset_5b839f25-1215-4a7d-bb51-d9b9d3cfdd5d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  bucket 13: 10%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:19:00", "plugin": "core", "name": "end_epoch", "raw_value": "1617463140.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:19:00", "plugin": "core", "name": "start_epoch", "raw_value": "1617463140.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 66.63251161575317, "inputs": {"library|input_1": {"src": "hdca", "id": "55b90e7705e285ee"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "7b12af44400a3c1a"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "631c5b3851c86cf4", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:19:26.851147", "create_time": "2021-04-03T15:18:58.251039", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-8zcxr", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat' genome && ln -s -f '/galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/f/c/8/dataset_fc8e1983-cf79-4357-920a-45715cf0036c.dat' input_f.fastq &&  ln -s '/galaxy/server/database/objects/e/c/a/dataset_ecaf8ea3-252c-4682-aa3d-2d3dcffa18fa.dat' input_r.fastq &&    bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/6/8/1/dataset_681574f1-6c31-46f9-b5ef-cb9eff08587c.dat'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/f/b/c/dataset_fbc0e868-d19c-48f4-a2c2-b8eb6d8632e6.dat'  && mv '/galaxy/server/database/objects/6/8/1/dataset_681574f1-6c31-46f9-b5ef-cb9eff08587c.1.dat' '/galaxy/server/database/objects/6/8/1/dataset_681574f1-6c31-46f9-b5ef-cb9eff08587c.dat' && mv '/galaxy/server/database/objects/6/8/1/dataset_681574f1-6c31-46f9-b5ef-cb9eff08587c.2.dat' '/galaxy/server/database/objects/e/3/c/dataset_e3cd648c-8fe8-4a00-b7bb-bf0ce0c79965.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}"}, "inputs": {"own_file": {"id": "7b12af44400a3c1a", "src": "hda", "uuid": "2af5ffe8-4877-480c-a29d-898c5374b552"}, "input_11": {"id": "d37dc9e34ca12850", "src": "hda", "uuid": "fc8e1983-cf79-4357-920a-45715cf0036c"}, "input_12": {"id": "bc26db2938d81670", "src": "hda", "uuid": "ecaf8ea3-252c-4682-aa3d-2d3dcffa18fa"}}, "outputs": {"output": {"id": "b6e566238bcc3479", "src": "hda", "uuid": "fbc0e868-d19c-48f4-a2c2-b8eb6d8632e6"}, "output_unaligned_reads_r": {"id": "7af1498e2548fdd0", "src": "hda", "uuid": "e3cd648c-8fe8-4a00-b7bb-bf0ce0c79965"}, "output_unaligned_reads_l": {"id": "631c5b3851c86cf4", "src": "hda", "uuid": "681574f1-6c31-46f9-b5ef-cb9eff08587c"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 20%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 30%\n  bucket 10: 60%\n  bucket 9: 40%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 50%\n  bucket 10: 90%\n  bucket 9: 60%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Entering block accumulator loop for bucket 7:\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 20%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 30%\n  bucket 10: 60%\n  bucket 9: 40%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 50%\n  bucket 10: 90%\n  bucket 9: 60%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Entering block accumulator loop for bucket 7:\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:19:22", "plugin": "core", "name": "start_epoch", "raw_value": "1617463162.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:19:23", "plugin": "core", "name": "end_epoch", "raw_value": "1617463163.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 60.40361452102661, "inputs": {"library|input_1": {"src": "hda", "id": "d37dc9e34ca12850"}, "library|input_2": {"src": "hda", "id": "bc26db2938d81670"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "7b12af44400a3c1a"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "7af1498e2548fdd0", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:19:28.908088", "create_time": "2021-04-03T15:19:07.546017", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-zd2cz", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat' genome && ln -s -f '/galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/c/8/dataset_fc8e1983-cf79-4357-920a-45715cf0036c.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/e/c/a/dataset_ecaf8ea3-252c-4682-aa3d-2d3dcffa18fa.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/b/4/b/dataset_b4b2c46d-8a4e-4fc7-9b63-5f20f55fc6a2.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": \"\", \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": \"\", \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 35, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"own_file": {"id": "7b12af44400a3c1a", "src": "hda", "uuid": "2af5ffe8-4877-480c-a29d-898c5374b552"}, "input_1": {"id": "d37dc9e34ca12850", "src": "hda", "uuid": "fc8e1983-cf79-4357-920a-45715cf0036c"}, "input_2": {"id": "bc26db2938d81670", "src": "hda", "uuid": "ecaf8ea3-252c-4682-aa3d-2d3dcffa18fa"}}, "outputs": {"output": {"id": "e04ab0ce56454cc0", "src": "hda", "uuid": "b4b2c46d-8a4e-4fc7-9b63-5f20f55fc6a2"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  bucket 7: 10%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/a/f/dataset_2af5ffe8-4877-480c-a29d-898c5374b552.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  bucket 7: 10%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:19:26", "plugin": "core", "name": "start_epoch", "raw_value": "1617463166.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:19:26", "plugin": "core", "name": "end_epoch", "raw_value": "1617463166.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 56.34428524971008, "inputs": {"library|input_1": {"src": "hda", "id": "d37dc9e34ca12850"}, "library|input_2": {"src": "hda", "id": "bc26db2938d81670"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "14512c2e149edc85"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "84e280e8e9f61908", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:19:38.081060", "create_time": "2021-04-03T15:19:15.159386", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-5cffn", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat' genome && ln -s -f '/galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/c/8/dataset_fc8e1983-cf79-4357-920a-45715cf0036c.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/e/c/a/dataset_ecaf8ea3-252c-4682-aa3d-2d3dcffa18fa.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> '/galaxy/server/database/objects/4/3/8/dataset_438afabb-7d13-4af3-a3ae-397dd581c5c3.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/c/f/b/dataset_cfb57ebc-d165-4136-8996-f318f3cbaf0b.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"true\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 43, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 35, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "d37dc9e34ca12850", "src": "hda", "uuid": "fc8e1983-cf79-4357-920a-45715cf0036c"}, "input_2": {"id": "bc26db2938d81670", "src": "hda", "uuid": "ecaf8ea3-252c-4682-aa3d-2d3dcffa18fa"}, "own_file": {"id": "14512c2e149edc85", "src": "hda", "uuid": "1dfda5f7-25a3-4b0d-9de3-064716aaad70"}}, "outputs": {"mapping_stats": {"id": "ec4099dd954a4424", "src": "hda", "uuid": "438afabb-7d13-4af3-a3ae-397dd581c5c3"}, "output": {"id": "17038bdad20d1b0a", "src": "hda", "uuid": "cfb57ebc-d165-4136-8996-f318f3cbaf0b"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 6 of 15\nGetting block 5 of 15\n  Reserving size (1554) for bucket 6\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 6 of 15\nGetting block 5 of 15\n  Reserving size (1554) for bucket 6\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:19:34", "plugin": "core", "name": "start_epoch", "raw_value": "1617463174.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:19:35", "plugin": "core", "name": "end_epoch", "raw_value": "1617463175.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 40.31393599510193, "inputs": {"library|input_1": {"src": "hda", "id": "84e280e8e9f61908"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "14512c2e149edc85"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "14512c2e149edc85", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:19:35.032322", "create_time": "2021-04-03T15:19:18.569163", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-zvr5m", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat' genome && ln -s -f '/galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/4/0/f/dataset_40f1fe43-41c3-4845-b609-e2a0d01f0073.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/8/4/8/dataset_848fbf17-6dde-4a4e-8ec0-7ebddb3063a2.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": \"\", \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": \"\", \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 43, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 42, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "84e280e8e9f61908", "src": "hda", "uuid": "40f1fe43-41c3-4845-b609-e2a0d01f0073"}, "own_file": {"id": "14512c2e149edc85", "src": "hda", "uuid": "1dfda5f7-25a3-4b0d-9de3-064716aaad70"}}, "outputs": {"output": {"id": "50c67c6bfe90cf97", "src": "hda", "uuid": "848fbf17-6dde-4a4e-8ec0-7ebddb3063a2"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  bucket 9: 10%\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 40%\n  bucket 14: 70%\n  bucket 13: 50%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/d/f/dataset_1dfda5f7-25a3-4b0d-9de3-064716aaad70.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  bucket 9: 10%\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 40%\n  bucket 14: 70%\n  bucket 13: 50%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:19:31", "plugin": "core", "name": "start_epoch", "raw_value": "1617463171.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:19:32", "plugin": "core", "name": "end_epoch", "raw_value": "1617463172.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 77.67567420005798, "inputs": {"library|input_1": {"src": "hda", "id": "8e6b55a3cad51ab3"}, "library|input_2": {"src": "hda", "id": "4c50dd9c248713e5"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ff99426887e46b14"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "32078298fc689343", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:20:41.741220", "create_time": "2021-04-03T15:20:25.174043", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-f9bq6", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome && ln -s -f '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/d/d/8/dataset_dd8c7108-73c0-446b-afa6-bb36244819a6.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/3/4/f/dataset_34ffe3db-ca08-4ab0-aae0-bcd6ff0e367e.dat' input_r.fastq.gz &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/4/4/f/dataset_44f4219e-e8b9-4a1f-b395-f22437af5e0c.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 58, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 47, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 52, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "8e6b55a3cad51ab3", "src": "hda", "uuid": "dd8c7108-73c0-446b-afa6-bb36244819a6"}, "input_2": {"id": "4c50dd9c248713e5", "src": "hda", "uuid": "34ffe3db-ca08-4ab0-aae0-bcd6ff0e367e"}, "own_file": {"id": "ff99426887e46b14", "src": "hda", "uuid": "4d827cd0-8788-4cb9-9603-17dfcb4e8f22"}}, "outputs": {"output": {"id": "50130c109b7b2b15", "src": "hda", "uuid": "44f4219e-e8b9-4a1f-b395-f22437af5e0c"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Entering block accumulator loop for bucket 7:\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 10%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 70%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 30%\n  bucket 8: 50%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 7: 50%\n  bucket 8: 80%\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 8: 100%\n  bucket 7: 70%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Entering block accumulator loop for bucket 7:\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 10%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 70%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 30%\n  bucket 8: 50%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 7: 50%\n  bucket 8: 80%\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 8: 100%\n  bucket 7: 70%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:20:37", "plugin": "core", "name": "end_epoch", "raw_value": "1617463237.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:20:36", "plugin": "core", "name": "start_epoch", "raw_value": "1617463236.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 77.6441240310669, "inputs": {"library|input_1": {"src": "hda", "id": "a4384eb7dc2a7acf"}, "library|input_2": {"src": "hda", "id": "f5e6a47caf380ca1"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ff99426887e46b14"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "ae73c5de99f7f2f0", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:20:37.553482", "create_time": "2021-04-03T15:20:24.712491", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-2rzmv", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome && ln -s -f '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/3/6/8/dataset_368cfaf0-65ef-471a-9f6d-97978341bda5.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/e/d/c/dataset_edcd12f2-9f2f-41d0-b26e-10de54e769c0.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/e/d/dataset_eed5ba5e-0fba-444f-9b78-f16c20aa3fc7.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 58, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "a4384eb7dc2a7acf", "src": "hda", "uuid": "368cfaf0-65ef-471a-9f6d-97978341bda5"}, "input_2": {"id": "f5e6a47caf380ca1", "src": "hda", "uuid": "edcd12f2-9f2f-41d0-b26e-10de54e769c0"}, "own_file": {"id": "ff99426887e46b14", "src": "hda", "uuid": "4d827cd0-8788-4cb9-9603-17dfcb4e8f22"}}, "outputs": {"output": {"id": "10ded6bfd359d8a5", "src": "hda", "uuid": "eed5ba5e-0fba-444f-9b78-f16c20aa3fc7"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 40%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 50%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 40%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 50%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:20:34", "plugin": "core", "name": "end_epoch", "raw_value": "1617463234.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:20:33", "plugin": "core", "name": "start_epoch", "raw_value": "1617463233.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 77.52202343940735, "inputs": {"library|input_1": {"src": "hda", "id": "93f2ef32fee40709"}, "library|input_2": {"src": "hda", "id": "c4bde3f7fbde0e2f"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ff99426887e46b14"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "10ded6bfd359d8a5", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:20:50.929201", "create_time": "2021-04-03T15:20:26.553801", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-mz4gc", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome && ln -s -f '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/8/f/dataset_48f44efb-fca0-4832-bf90-2a85773c4bfb.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/4/6/7/dataset_467ab459-e72c-40e8-8aa7-45eaf7186938.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/5/1/e/dataset_51e3a010-e7ba-4c5e-a6e2-88cb25f1a877.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 58, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 54, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "93f2ef32fee40709", "src": "hda", "uuid": "48f44efb-fca0-4832-bf90-2a85773c4bfb"}, "input_2": {"id": "c4bde3f7fbde0e2f", "src": "hda", "uuid": "467ab459-e72c-40e8-8aa7-45eaf7186938"}, "own_file": {"id": "ff99426887e46b14", "src": "hda", "uuid": "4d827cd0-8788-4cb9-9603-17dfcb4e8f22"}}, "outputs": {"output": {"id": "26de0220c30d8b7d", "src": "hda", "uuid": "51e3a010-e7ba-4c5e-a6e2-88cb25f1a877"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  bucket 11: 10%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 14 of 15\nGetting block 13 of 15\n  Reserving size (1554) for bucket 14\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  bucket 13: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  bucket 11: 10%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 14 of 15\nGetting block 13 of 15\n  Reserving size (1554) for bucket 14\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  bucket 13: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:20:50", "plugin": "core", "name": "end_epoch", "raw_value": "1617463250.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:20:49", "plugin": "core", "name": "start_epoch", "raw_value": "1617463249.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 77.4278450012207, "inputs": {"library|input_1": {"src": "hda", "id": "93f2ef32fee40709"}, "library|input_2": {"src": "hda", "id": "c4bde3f7fbde0e2f"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ff99426887e46b14"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "ff99426887e46b14", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:20:45.854056", "create_time": "2021-04-03T15:20:26.550792", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-ndnvw", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome && ln -s -f '/galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/8/f/dataset_48f44efb-fca0-4832-bf90-2a85773c4bfb.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/4/6/7/dataset_467ab459-e72c-40e8-8aa7-45eaf7186938.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/5/2/4/dataset_524d8180-ea47-4dff-997c-be1574513832.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"true\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"false\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 58, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 54, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "93f2ef32fee40709", "src": "hda", "uuid": "48f44efb-fca0-4832-bf90-2a85773c4bfb"}, "input_2": {"id": "c4bde3f7fbde0e2f", "src": "hda", "uuid": "467ab459-e72c-40e8-8aa7-45eaf7186938"}, "own_file": {"id": "ff99426887e46b14", "src": "hda", "uuid": "4d827cd0-8788-4cb9-9603-17dfcb4e8f22"}}, "outputs": {"output": {"id": "2d3100790834c248", "src": "hda", "uuid": "524d8180-ea47-4dff-997c-be1574513832"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/d/8/dataset_4d827cd0-8788-4cb9-9603-17dfcb4e8f22.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:20:43", "plugin": "core", "name": "end_epoch", "raw_value": "1617463243.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:20:42", "plugin": "core", "name": "start_epoch", "raw_value": "1617463242.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 58.97400426864624, "inputs": {"library|input_1": {"src": "hda", "id": "e4f41e91104ca6f8"}, "library|input_2": {"src": "hda", "id": "ecaa397050e1315d"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "9c480c2d2a992134"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "152a7592a1c2abf4", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:22:00.398368", "create_time": "2021-04-03T15:21:50.116653", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-9dnfg", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/5/f/6/dataset_5f6dc05a-3631-46da-a846-dfeeb8f78af6.dat' genome && ln -s -f '/galaxy/server/database/objects/5/f/6/dataset_5f6dc05a-3631-46da-a846-dfeeb8f78af6.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/2/9/4/dataset_2946891a-7f7c-41d2-9071-4da632416ef8.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/6/7/e/dataset_67e6bf9a-cc2d-479a-8d24-fb61514b5b74.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/0/8/6/dataset_0864a0b2-79cd-4788-90f2-786a1ddbbd3d.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"false\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"true\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 70, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 64, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 67, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "e4f41e91104ca6f8", "src": "hda", "uuid": "2946891a-7f7c-41d2-9071-4da632416ef8"}, "input_2": {"id": "ecaa397050e1315d", "src": "hda", "uuid": "67e6bf9a-cc2d-479a-8d24-fb61514b5b74"}, "own_file": {"id": "9c480c2d2a992134", "src": "hda", "uuid": "5f6dc05a-3631-46da-a846-dfeeb8f78af6"}}, "outputs": {"output": {"id": "cbdccbfe6aa24cd0", "src": "hda", "uuid": "0864a0b2-79cd-4788-90f2-786a1ddbbd3d"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/f/6/dataset_5f6dc05a-3631-46da-a846-dfeeb8f78af6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 30%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  bucket 2: 70%\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 5: 80%\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  bucket 7: 20%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 40%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/f/6/dataset_5f6dc05a-3631-46da-a846-dfeeb8f78af6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 30%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  bucket 2: 70%\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 5: 80%\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  bucket 7: 20%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 40%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 30%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:21:58", "plugin": "core", "name": "end_epoch", "raw_value": "1617463318.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:21:57", "plugin": "core", "name": "start_epoch", "raw_value": "1617463317.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 28.0906765460968, "inputs": {"source|target": {"src": "hda", "id": "a2b51c94937adaac"}, "source|ref_source": "history", "query": {"src": "hda", "id": "50a02578002195b0"}}, "job": {"model_class": "Job", "id": "550278b31125b038", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:23:28.844196", "create_time": "2021-04-03T15:23:16.129384", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-fstcl", "command_line": "lastz_D  '/galaxy/server/database/objects/c/c/5/dataset_cc56e410-383a-4fee-a2b8-37302e9cd717.dat'    '/galaxy/server/database/objects/5/4/e/dataset_54e7216e-18af-4381-8dde-48abec338eb5.dat'   --inferonly '--infscores=/galaxy/server/database/objects/4/f/0/dataset_4f040b2b-749f-4a38-8698-e98919ca49a5.dat'", "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "score_file": "null", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 98, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "a2b51c94937adaac", "src": "hda", "uuid": "cc56e410-383a-4fee-a2b8-37302e9cd717"}, "query": {"id": "50a02578002195b0", "src": "hda", "uuid": "54e7216e-18af-4381-8dde-48abec338eb5"}}, "outputs": {"output": {"id": "eb3f851ed8dff7f9", "src": "hda", "uuid": "4f040b2b-749f-4a38-8698-e98919ca49a5"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:23:28", "plugin": "core", "name": "end_epoch", "raw_value": "1617463408.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:23:27", "plugin": "core", "name": "start_epoch", "raw_value": "1617463407.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 31.66355586051941, "inputs": {"source|target": {"src": "hda", "id": "a2b51c94937adaac"}, "source|ref_source": "history", "query": {"src": "hda", "id": "50a02578002195b0"}, "score_file": {"src": "hda", "id": "40baed5c3eeeef16"}}, "job": {"model_class": "Job", "id": "6487d163ec6d0eb8", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:23:34.646331", "create_time": "2021-04-03T15:23:25.565939", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-4hdr6", "command_line": "lastz_D  '/galaxy/server/database/objects/c/c/5/dataset_cc56e410-383a-4fee-a2b8-37302e9cd717.dat'    '/galaxy/server/database/objects/5/4/e/dataset_54e7216e-18af-4381-8dde-48abec338eb5.dat'   '--inferonly=/galaxy/server/database/objects/2/5/f/dataset_25f01dda-5885-418b-bec7-32dc7e03752f.dat' '--infscores=/galaxy/server/database/objects/0/3/8/dataset_03828940-2db3-44a2-8f45-81bee352daf8.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 98, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "a2b51c94937adaac", "src": "hda", "uuid": "cc56e410-383a-4fee-a2b8-37302e9cd717"}, "query": {"id": "50a02578002195b0", "src": "hda", "uuid": "54e7216e-18af-4381-8dde-48abec338eb5"}, "score_file": {"id": "40baed5c3eeeef16", "src": "hda", "uuid": "25f01dda-5885-418b-bec7-32dc7e03752f"}}, "outputs": {"output": {"id": "6b0434e829fab549", "src": "hda", "uuid": "03828940-2db3-44a2-8f45-81bee352daf8"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:23:33", "plugin": "core", "name": "end_epoch", "raw_value": "1617463413.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:23:33", "plugin": "core", "name": "start_epoch", "raw_value": "1617463413.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 41.5826895236969, "inputs": {"source|target_2bit": "phiX174", "source|ref_source": "cached", "query": {"src": "hda", "id": "41c95494e62fbdb2"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "execution_problem": "parameter 'target_2bit': an invalid option ('phiX174') was selected (valid options: Schizosaccharomyces_pombe_1.1,nomLeu1,ce7,eschColi_CFT073,gorGor3,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,16297,papHam1,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,galGal2,ci2,caeRem1,lMaj5,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,ce3,ce2,gasAcu1,Homo_sapiens_nuHg19_mtrCRS,strPur3,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,caeRem4,turTru2,monDom5,Hydra_JCVI,cb3,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,Tcas_3.0,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,fr1,galGal4,loxAfr1,petMar1,bosTau6,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,eschColi_EC4115,droYak1,PhumU1,panTro3,saiBol1,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,tarSyr1,otoGar1,allMis1,caePb1,eschColi_TW14359,felCat4,danRer4,16351,CpipJ1,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,Amel_4.5,259,16720,droYak2,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,loxAfr3,eschColi_O157H7,braFlo1,dp3,386,Bombyx_mori_p50T_2.0,caeJap2,hg38,vicPac1,xenTro1,arabidopsis,nomLeu3,oryLat2,Zea_mays_B73_RefGen_v2,oviAri1,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,caeJap3,Ptrichocarpa_156,priPac1,ce9,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,Xanthomonas_oryzae_PXO99A,178,bosTau7,/cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,rn6,micMur1,ente638,Araly1,baciSubt,hg19_rCRS_pUC18_phiX174,rn5,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,tupBel1,ce8,sacCer1,Homo_sapiens_AK1,aplCal1,equCab1,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,aptMan1,27835,278,bosTauMd3,eriEur1,myoLuc2,venter1,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,vicPac2,panTro2,droWil1,20079,apiMel1,droSim1,ce5,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,caeJap4,triCas2,felCat5,calJac3,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,Spur_v2.6,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,mm10,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,cerSim1,panPan1,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,borEut13,rn3,panTro1,oryCun2,canFam1,musFur1,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,fr2,bordBron,monDom4,felCat8,dm2,panTro4,monDom1,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,speTri2,ponAbe2,ce4,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,eschColi_K12,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,caePb2,dp4,oryLat1,caeJap1,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,hg_g1k_v37,susScr1,caePb3,chrPic1,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,otoGar3,gadMor1,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,ce10,cavPor3,nomLeu2,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,pseuAeru,eschColi_APEC_O1,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,apiMel4,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,bosTau2,bosTau3,danRer10,oryza_sativa_japonica_nipponbare_IRGSP4.0,bosTau8,13953,tetNig2,tetNig1,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,hg17,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,caeRem2,12931,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,IscaW1,rheMac3,AgamP3,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,AaegL1,ailMel1,dasNov3,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,melUnd1,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,dasNov1,bosTau5,13954,sacCer3,sorAra1,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,caeRem3,oryCun1,anoCar2,papAnu2,dm6,burkPseu_1106A,dipOrd1,echTel1,Arabidopsis_thaliana_TAIR10)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 38.0272912979126, "inputs": {"source|target": {"src": "hda", "id": "932611700445c0ae"}, "source|ref_source": "history", "query": {"src": "hda", "id": "5ad7322c2e4a341c"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "cbdccbfe6aa24cd0", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:22:26.456227", "create_time": "2021-04-03T15:21:58.416430", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-2q89v", "command_line": "lastz  '/galaxy/server/database/objects/b/e/9/dataset_be9df1b6-8971-429f-835a-7a5cdb37134f.dat'    '/galaxy/server/database/objects/3/6/5/dataset_36508067-d735-4cac-9823-5af944aaa5b7.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/b/9/5/dataset_b95e756f-10b1-41ca-8f21-557875f3f5a7.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 75, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "932611700445c0ae", "src": "hda", "uuid": "be9df1b6-8971-429f-835a-7a5cdb37134f"}, "query": {"id": "5ad7322c2e4a341c", "src": "hda", "uuid": "36508067-d735-4cac-9823-5af944aaa5b7"}}, "outputs": {"output": {"id": "d04b43f2a6823dd5", "src": "hda", "uuid": "b95e756f-10b1-41ca-8f21-557875f3f5a7"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:22:23", "plugin": "core", "name": "end_epoch", "raw_value": "1617463343.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:22:23", "plugin": "core", "name": "start_epoch", "raw_value": "1617463343.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "tool_version": "1.3.2", "test_index": 2, "time_seconds": 21.98946714401245, "inputs": {"source|target": {"src": "hda", "id": "faa9ab0c90d14db0"}, "source|ref_source": "history", "query": {"src": "hda", "id": "1586f01bd474ba6c"}, "where_to_look|strand": "--strand=both", "scoring|score_file": {"src": "hda", "id": "38849088272fe1fe"}, "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "faa9ab0c90d14db0", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:22:27.825155", "create_time": "2021-04-03T15:22:18.801913", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-htvg2", "command_line": "lastz  '/galaxy/server/database/objects/6/9/f/dataset_69ffe55f-c84e-47d8-baba-de09abe6a89e.dat'    '/galaxy/server/database/objects/5/5/6/dataset_556ca4b5-17d8-40df-b9a0-c3dfdf20c8e1.dat'     '--strand=both'     '--scores=/galaxy/server/database/objects/2/c/6/dataset_2c617c3c-f8ce-4e6f-ab48-436c5d4e6a6d.dat'  '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/e/3/0/dataset_e30cdb51-5e71-4f9e-9948-61218feb092f.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": {\"values\": [{\"id\": 82, \"src\": \"hda\"}]}}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 80, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "faa9ab0c90d14db0", "src": "hda", "uuid": "69ffe55f-c84e-47d8-baba-de09abe6a89e"}, "query": {"id": "1586f01bd474ba6c", "src": "hda", "uuid": "556ca4b5-17d8-40df-b9a0-c3dfdf20c8e1"}, "score_file": {"id": "38849088272fe1fe", "src": "hda", "uuid": "2c617c3c-f8ce-4e6f-ab48-436c5d4e6a6d"}}, "outputs": {"output": {"id": "69901dc987654cb6", "src": "hda", "uuid": "e30cdb51-5e71-4f9e-9948-61218feb092f"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:22:25", "plugin": "core", "name": "end_epoch", "raw_value": "1617463345.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:22:25", "plugin": "core", "name": "start_epoch", "raw_value": "1617463345.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "tool_version": "1.3.2", "test_index": 3, "time_seconds": 37.96528887748718, "inputs": {"source|target": {"src": "hda", "id": "bedbfd4c8b9a9072"}, "source|ref_source": "history", "query": {"src": "hda", "id": "0f59d4a12fd36492"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "7a6fefb21040adbb", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:23:00.810768", "create_time": "2021-04-03T15:22:37.698455", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-spdkr", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/7/5/2/dataset_752ccbe4-bc70-4f8b-b290-9a0d7d18f71e.dat')    <(gunzip -c '/galaxy/server/database/objects/d/5/1/dataset_d51ad07a-3c45-451d-8ba3-3f3524fe9e0d.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/5/4/d/dataset_54d189db-cf73-4c87-882c-3c5d2ac67365.dat'", "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 84, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "bedbfd4c8b9a9072", "src": "hda", "uuid": "752ccbe4-bc70-4f8b-b290-9a0d7d18f71e"}, "query": {"id": "0f59d4a12fd36492", "src": "hda", "uuid": "d51ad07a-3c45-451d-8ba3-3f3524fe9e0d"}}, "outputs": {"output": {"id": "5c194f1f22868659", "src": "hda", "uuid": "54d189db-cf73-4c87-882c-3c5d2ac67365"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:22:57", "plugin": "core", "name": "end_epoch", "raw_value": "1617463377.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:22:56", "plugin": "core", "name": "start_epoch", "raw_value": "1617463376.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "tool_version": "1.3.2", "test_index": 4, "time_seconds": 38.84005403518677, "inputs": {"source|target": {"src": "hda", "id": "0f59d4a12fd36492"}, "source|ref_source": "history", "query": {"src": "hda", "id": "7029d282e3b9e731"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "0f59d4a12fd36492", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:23:02.872244", "create_time": "2021-04-03T15:22:38.568958", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-wh6b5", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/d/5/1/dataset_d51ad07a-3c45-451d-8ba3-3f3524fe9e0d.dat')    <(bunzip2 -c '/galaxy/server/database/objects/d/6/d/dataset_d6d8cac3-c644-4875-ac24-5cefac9f3a64.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/6/e/8/dataset_6e85087d-17d7-4df0-b81b-51351f5bfca5.dat'", "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 90, \"src\": \"hda\"}]}}"}, "inputs": {"query": {"id": "7029d282e3b9e731", "src": "hda", "uuid": "d6d8cac3-c644-4875-ac24-5cefac9f3a64"}, "target": {"id": "0f59d4a12fd36492", "src": "hda", "uuid": "d51ad07a-3c45-451d-8ba3-3f3524fe9e0d"}}, "outputs": {"output": {"id": "bf8129f4699c7937", "src": "hda", "uuid": "6e85087d-17d7-4df0-b81b-51351f5bfca5"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:23:01", "plugin": "core", "name": "end_epoch", "raw_value": "1617463381.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:23:00", "plugin": "core", "name": "start_epoch", "raw_value": "1617463380.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "tool_version": "1.3.2", "test_index": 5, "time_seconds": 41.0523362159729, "inputs": {"source|target": {"src": "hda", "id": "0f59d4a12fd36492"}, "source|ref_source": "history", "query": {"src": "hda", "id": "7a6fefb21040adbb"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "ba18e961bb786aa8", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:23:07.425996", "create_time": "2021-04-03T15:22:48.202535", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-67tb9", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/d/5/1/dataset_d51ad07a-3c45-451d-8ba3-3f3524fe9e0d.dat')    <(gunzip -c '/galaxy/server/database/objects/a/3/1/dataset_a31a4601-d896-44a4-8dfb-d4fd09f43407.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/5/d/b/dataset_5db979eb-f8ce-4731-9c12-b8ce5848d948.dat'", "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 90, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "0f59d4a12fd36492", "src": "hda", "uuid": "d51ad07a-3c45-451d-8ba3-3f3524fe9e0d"}, "query": {"id": "7a6fefb21040adbb", "src": "hda", "uuid": "a31a4601-d896-44a4-8dfb-d4fd09f43407"}}, "outputs": {"output": {"id": "114cc9feef268d7c", "src": "hda", "uuid": "5db979eb-f8ce-4731-9c12-b8ce5848d948"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:23:04", "plugin": "core", "name": "end_epoch", "raw_value": "1617463384.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:23:04", "plugin": "core", "name": "start_epoch", "raw_value": "1617463384.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "tool_version": "1.3.2", "test_index": 6, "time_seconds": 41.620805740356445, "inputs": {"source|target": {"src": "hda", "id": "0f59d4a12fd36492"}, "source|ref_source": "history", "query": {"src": "hda", "id": "ba18e961bb786aa8"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "5c194f1f22868659", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:23:09.326333", "create_time": "2021-04-03T15:22:49.068036", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-72br7", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/d/5/1/dataset_d51ad07a-3c45-451d-8ba3-3f3524fe9e0d.dat')    '/galaxy/server/database/objects/0/1/f/dataset_01fe1e80-ce57-41c9-b8e9-5406fd430b2a.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/8/4/6/dataset_8465578f-f482-4d3e-a7f0-0b029960b2d5.dat'", "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 90, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "0f59d4a12fd36492", "src": "hda", "uuid": "d51ad07a-3c45-451d-8ba3-3f3524fe9e0d"}, "query": {"id": "ba18e961bb786aa8", "src": "hda", "uuid": "01fe1e80-ce57-41c9-b8e9-5406fd430b2a"}}, "outputs": {"output": {"id": "382b95f392c8ba02", "src": "hda", "uuid": "8465578f-f482-4d3e-a7f0-0b029960b2d5"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:23:08", "plugin": "core", "name": "end_epoch", "raw_value": "1617463388.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:23:08", "plugin": "core", "name": "start_epoch", "raw_value": "1617463388.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "tool_version": "0.2.2", "test_index": 0, "time_seconds": 76.15105819702148, "inputs": {"referenceSource|reference": {"src": "hda", "id": "177fad5e5a4c2018"}, "single_or_paired|input_mate1": {"src": "hda", "id": "3a20da214c136698"}, "single_or_paired|input_mate2": {"src": "hda", "id": "152a7592a1c2abf4"}, "single_or_paired|single_or_paired_opts": "paired"}, "job": {"model_class": "Job", "id": "cf3130089994d1ee", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:22:17.265659", "create_time": "2021-04-03T15:21:49.076958", "galaxy_version": "20.09", "command_version": "bwa-meth.py 0.2.2\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-hmrt5", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/b/4/6/dataset_b46c70d4-0eb3-4ec6-9c15-4c19eb1c1047.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -f -s '/galaxy/server/database/objects/b/8/b/dataset_b8b35588-c22a-4c32-bce1-4fb603a8d9db.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/d/0/c/dataset_d0cbc319-3ad6-4fdb-835a-6e576101ac1f.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 69, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 72, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 73, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "83677f1348c7f290", "src": "hda", "uuid": "b46c70d4-0eb3-4ec6-9c15-4c19eb1c1047"}, "input_mate1": {"id": "3a20da214c136698", "src": "hda", "uuid": "b8b35588-c22a-4c32-bce1-4fb603a8d9db"}, "input_mate2": {"id": "152a7592a1c2abf4", "src": "hda", "uuid": "d0cbc319-3ad6-4fdb-835a-6e576101ac1f"}}, "outputs": {"output": {"id": "321be38bd936cb75", "src": "hda", "uuid": "3d233d64-5c4d-4b2b-a1ab-580ca0f266dd"}}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.93 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.02 sec\n[bwa_index] Construct SA from BWT and Occ... 0.27 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.349 sec; CPU: 1.269 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.035 CPU sec, 0.019 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.169 sec; CPU: 0.046 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.93 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.02 sec\n[bwa_index] Construct SA from BWT and Occ... 0.27 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.349 sec; CPU: 1.269 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.035 CPU sec, 0.019 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.169 sec; CPU: 0.046 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:22:14", "plugin": "core", "name": "end_epoch", "raw_value": "1617463334.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:22:12", "plugin": "core", "name": "start_epoch", "raw_value": "1617463332.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "tool_version": "0.2.2", "test_index": 1, "time_seconds": 77.27499008178711, "inputs": {"referenceSource|reference": {"src": "hda", "id": "177fad5e5a4c2018"}, "single_or_paired|input_mate1": {"src": "hdca", "id": "22c51f5dee744c9b"}, "single_or_paired|single_or_paired_opts": "paired_collection"}, "job": {"model_class": "Job", "id": "321be38bd936cb75", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:22:18.472157", "create_time": "2021-04-03T15:21:50.420088", "galaxy_version": "20.09", "command_version": "bwa-meth.py 0.2.2\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-8gj84", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/b/4/6/dataset_b46c70d4-0eb3-4ec6-9c15-4c19eb1c1047.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -s '/galaxy/server/database/objects/b/8/b/dataset_b8b35588-c22a-4c32-bce1-4fb603a8d9db.dat' input_f.fastq.gz &&  ln -s '/galaxy/server/database/objects/d/0/c/dataset_d0cbc319-3ad6-4fdb-835a-6e576101ac1f.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 73, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "83677f1348c7f290", "src": "hda", "uuid": "b46c70d4-0eb3-4ec6-9c15-4c19eb1c1047"}, "input_mate11": {"id": "3a20da214c136698", "src": "hda", "uuid": "b8b35588-c22a-4c32-bce1-4fb603a8d9db"}, "input_mate12": {"id": "152a7592a1c2abf4", "src": "hda", "uuid": "d0cbc319-3ad6-4fdb-835a-6e576101ac1f"}}, "outputs": {"output": {"id": "673b285b00d92f07", "src": "hda", "uuid": "f4501007-e137-4a45-9c92-18d9132e057c"}}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.03 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.92 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.25 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.334 sec; CPU: 1.233 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.044 CPU sec, 0.024 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.182 sec; CPU: 0.053 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.03 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.92 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.25 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.334 sec; CPU: 1.233 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.044 CPU sec, 0.024 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.182 sec; CPU: 0.053 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:22:15", "plugin": "core", "name": "end_epoch", "raw_value": "1617463335.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:22:12", "plugin": "core", "name": "start_epoch", "raw_value": "1617463332.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 0, "time_seconds": 29.167064666748047, "inputs": {"reads": {"src": "hda", "id": "10e6f49a1714c7fd"}, "reference_source|ref": {"src": "hda", "id": "e81943d3c43e2304"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "6f0e9c1944d436db", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:25:32.821545", "create_time": "2021-04-03T15:25:12.983983", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-vrdbj", "command_line": "ln -s '/galaxy/server/database/objects/c/b/8/dataset_cb8281be-083a-4192-8224-b96a39c0a469.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/e/5/3/dataset_e539f9cc-7ebd-4f2e-a6e7-8d00b6af0776.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/6/a/1/metadata_6a1da180-693c-45d7-8300-d86c3f08a951.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 162, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "10e6f49a1714c7fd", "src": "hda", "uuid": "e539f9cc-7ebd-4f2e-a6e7-8d00b6af0776"}, "ref": {"id": "e81943d3c43e2304", "src": "hda", "uuid": "cb8281be-083a-4192-8224-b96a39c0a469"}}, "outputs": {"variants": {"id": "7954ab7ae53f25ba", "src": "hda", "uuid": "87b64e70-7cbf-4714-8db8-8c090ee72578"}}, "tool_stdout": "INFO [2021-04-03 15:25:28,204]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-03 15:25:28,224]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:25:31,296]: Executing lofreq filter -i /tmp/lofreq2_call_parallel7pykrjnh/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-03 15:25:28,204]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-03 15:25:28,224]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:25:31,296]: Executing lofreq filter -i /tmp/lofreq2_call_parallel7pykrjnh/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:25:31", "plugin": "core", "name": "end_epoch", "raw_value": "1617463531.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:25:28", "plugin": "core", "name": "start_epoch", "raw_value": "1617463528.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 1, "time_seconds": 42.58799719810486, "inputs": {"reads": {"src": "hda", "id": "2b50409d550cb37a"}, "reference_source|ref": {"src": "hda", "id": "19121a7a7e3dc869"}, "reference_source|ref_selector": "history", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "5d5f7249a3248950", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:26:10.572613", "create_time": "2021-04-03T15:25:44.820729", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-hnh9w", "command_line": "ln -s '/galaxy/server/database/objects/4/3/f/dataset_43f26622-b304-4142-8e50-dba3c3f1d973.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/e/0/c/dataset_e0c71f47-81fd-4451-8b62-b211ff30da91.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/c/b/c/metadata_cbcb692c-d31f-427a-8d04-726210fb2fec.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 0, \"src_qual\": \"\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "2b50409d550cb37a", "src": "hda", "uuid": "e0c71f47-81fd-4451-8b62-b211ff30da91"}, "ref": {"id": "19121a7a7e3dc869", "src": "hda", "uuid": "43f26622-b304-4142-8e50-dba3c3f1d973"}}, "outputs": {"variants": {"id": "3693180ac5f26636", "src": "hda", "uuid": "00b92ef4-be8d-44eb-b867-14bf092424d7"}}, "tool_stdout": "INFO [2021-04-03 15:26:03,358]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-03 15:26:03,373]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:26:06,580]: Executing lofreq filter -i /tmp/lofreq2_call_parallel_k1s2fu8/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-03 15:26:03,358]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-03 15:26:03,373]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:26:06,580]: Executing lofreq filter -i /tmp/lofreq2_call_parallel_k1s2fu8/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:26:06", "plugin": "core", "name": "end_epoch", "raw_value": "1617463566.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:26:03", "plugin": "core", "name": "start_epoch", "raw_value": "1617463563.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 2, "time_seconds": 40.83087968826294, "inputs": {"reads": {"src": "hda", "id": "2b50409d550cb37a"}, "reference_source|ref": {"src": "hda", "id": "19121a7a7e3dc869"}, "reference_source|ref_selector": "history", "call_control|source_qual|use_src_qual|def_nm_q": "40", "call_control|source_qual|use_src_qual|ign_vcf": {"src": "hda", "id": "a829d461507e076f"}, "call_control|source_qual|use_src_qual|src_qual": "--src-qual", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "1951aa3f4371e67b", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:26:13.597356", "create_time": "2021-04-03T15:25:54.414217", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-dg9sn", "command_line": "ln -s '/galaxy/server/database/objects/4/3/f/dataset_43f26622-b304-4142-8e50-dba3c3f1d973.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/e/0/c/dataset_e0c71f47-81fd-4451-8b62-b211ff30da91.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/c/b/c/metadata_cbcb692c-d31f-427a-8d04-726210fb2fec.dat' reads.bam.bai && ln -s '/galaxy/server/database/objects/b/a/3/dataset_ba3c1f63-172f-4c89-a335-53f13ca2a8ba.dat' ign0.vcf &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --src-qual --ign-vcf 'ign0.vcf' --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 1, \"def_nm_q\": \"40\", \"ign_vcf\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"src_qual\": \"--src-qual\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "2b50409d550cb37a", "src": "hda", "uuid": "e0c71f47-81fd-4451-8b62-b211ff30da91"}, "ref": {"id": "19121a7a7e3dc869", "src": "hda", "uuid": "43f26622-b304-4142-8e50-dba3c3f1d973"}, "call_control|source_qual|ign_vcf": {"id": "a829d461507e076f", "src": "hda", "uuid": "ba3c1f63-172f-4c89-a335-53f13ca2a8ba"}}, "outputs": {"variants": {"id": "84fe8b8d1512c9ec", "src": "hda", "uuid": "6f84677b-9960-44cf-a8b8-d01f5fea151a"}}, "tool_stdout": "INFO [2021-04-03 15:26:06,755]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-03 15:26:06,770]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:26:10,487]: Executing lofreq filter -i /tmp/lofreq2_call_parallelcekxuocn/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-03 15:26:06,755]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-03 15:26:06,770]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:26:10,487]: Executing lofreq filter -i /tmp/lofreq2_call_parallelcekxuocn/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:26:10", "plugin": "core", "name": "end_epoch", "raw_value": "1617463570.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:26:06", "plugin": "core", "name": "start_epoch", "raw_value": "1617463566.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 3, "time_seconds": 36.23077082633972, "inputs": {"reads": {"src": "hda", "id": "2b50409d550cb37a"}, "reference_source|ref": {"src": "hda", "id": "19121a7a7e3dc869"}, "reference_source|ref_selector": "history", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "5bd989e9c4a6a460", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:26:14.609253", "create_time": "2021-04-03T15:25:56.087384", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-wnlpz", "command_line": "ln -s '/galaxy/server/database/objects/4/3/f/dataset_43f26622-b304-4142-8e50-dba3c3f1d973.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/e/0/c/dataset_e0c71f47-81fd-4451-8b62-b211ff30da91.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/c/b/c/metadata_cbcb692c-d31f-427a-8d04-726210fb2fec.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "2b50409d550cb37a", "src": "hda", "uuid": "e0c71f47-81fd-4451-8b62-b211ff30da91"}, "ref": {"id": "19121a7a7e3dc869", "src": "hda", "uuid": "43f26622-b304-4142-8e50-dba3c3f1d973"}}, "outputs": {"variants": {"id": "d4d5f7a4207db587", "src": "hda", "uuid": "7ad15fee-7bbf-4f48-93c6-62852bb3f420"}}, "tool_stdout": "INFO [2021-04-03 15:26:09,850]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-03 15:26:09,863]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:26:12,969]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-03 15:26:09,850]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-03 15:26:09,863]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-03 15:26:12,969]: Copying concatenated vcf file to final destination\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:26:13", "plugin": "core", "name": "end_epoch", "raw_value": "1617463573.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:26:09", "plugin": "core", "name": "start_epoch", "raw_value": "1617463569.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 4, "time_seconds": 37.94163179397583, "inputs": {"reads": {"src": "hda", "id": "526f2da51a748d53"}, "reference_source|ref": {"src": "hda", "id": "c9520de3122444c7"}, "reference_source|ref_selector": "history", "variant_types": "--call-indels --only-indels", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "d1ab669a91c3a7d7", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:26:32.785679", "create_time": "2021-04-03T15:26:19.980709", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-tgwrn", "command_line": "ln -s '/galaxy/server/database/objects/9/0/b/dataset_90b97302-c9ae-4c85-aa76-5ffced433272.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/d/e/2/dataset_de23dd43-580c-4a7e-904b-d0e9f1d38c75.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/8/1/d/metadata_81d40a2b-9adf-4c2d-861a-d01d4e60de06.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf --call-indels --only-indels    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"--call-indels --only-indels\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 175, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "526f2da51a748d53", "src": "hda", "uuid": "de23dd43-580c-4a7e-904b-d0e9f1d38c75"}, "ref": {"id": "c9520de3122444c7", "src": "hda", "uuid": "90b97302-c9ae-4c85-aa76-5ffced433272"}}, "outputs": {"variants": {"id": "fdb3d661e4c71799", "src": "hda", "uuid": "c5e15b2d-baee-481d-9f8f-d15c2db1f331"}}, "tool_stdout": "INFO [2021-04-03 15:26:27,059]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-03 15:26:27,073]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2021-04-03 15:26:31,961]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-03 15:26:27,059]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-03 15:26:27,073]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2021-04-03 15:26:31,961]: Copying concatenated vcf file to final destination\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "6 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "6.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:26:32", "plugin": "core", "name": "end_epoch", "raw_value": "1617463592.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:26:26", "plugin": "core", "name": "start_epoch", "raw_value": "1617463586.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 0, "time_seconds": 44.15629172325134, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "55b90e7705e285ee"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "ff1a062545980c67"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "49b81867618b1ba1", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:18:05.123600", "create_time": "2021-04-03T15:17:51.520395", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-gb8nb", "command_line": "ln -f -s '/galaxy/server/database/objects/b/0/0/dataset_b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/e/4/a/dataset_e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/e/2/5/dataset_e2562abb-b914-4276-84ff-9a3605c8446e.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 2, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 6, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input1": {"id": "ff1a062545980c67", "src": "hda", "uuid": "e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b"}, "ref_file": {"id": "55b90e7705e285ee", "src": "hda", "uuid": "b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac"}}, "outputs": {"alignment_output": {"id": "49b81867618b1ba1", "src": "hda", "uuid": "e2562abb-b914-4276-84ff-9a3605c8446e"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.86] collected minimizers\n[M::mm_idx_gen::0.005*1.14] sorted minimizers\n[M::main::0.005*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.14] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.13] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.25] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/e/4/a/dataset_e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b.dat\n[M::main] Real time: 0.010 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*0.86] collected minimizers\n[M::mm_idx_gen::0.005*1.14] sorted minimizers\n[M::main::0.005*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.14] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.13] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.25] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/e/4/a/dataset_e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b.dat\n[M::main] Real time: 0.010 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:18:03", "plugin": "core", "name": "end_epoch", "raw_value": "1617463083.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:18:03", "plugin": "core", "name": "start_epoch", "raw_value": "1617463083.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 1, "time_seconds": 44.79129099845886, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "55b90e7705e285ee"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "ff1a062545980c67"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "CRAM"}, "job": {"model_class": "Job", "id": "af4585b7bab0fac6", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:18:06.179798", "create_time": "2021-04-03T15:17:50.685469", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-spvjv", "command_line": "ln -f -s '/galaxy/server/database/objects/b/0/0/dataset_b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/e/4/a/dataset_e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b.dat' -a | samtools sort -T \"${TMPDIR:-.}\" -@${GALAXY_SLOTS:-2} -O CRAM  --reference reference.fa --output-fmt-option no_ref -o '/galaxy/server/database/objects/3/d/e/dataset_3ded05bc-e903-4a9a-bad7-918b2bf2e8ba.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 2, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 6, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"CRAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input1": {"id": "ff1a062545980c67", "src": "hda", "uuid": "e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b"}, "ref_file": {"id": "55b90e7705e285ee", "src": "hda", "uuid": "b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac"}}, "outputs": {"alignment_output": {"id": "af4585b7bab0fac6", "src": "hda", "uuid": "3ded05bc-e903-4a9a-bad7-918b2bf2e8ba"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.005*1.03] collected minimizers\n[M::mm_idx_gen::0.006*1.18] sorted minimizers\n[M::main::0.007*1.18] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.007*1.18] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*1.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.24] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/e/4/a/dataset_e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b.dat\n[M::main] Real time: 0.012 sec; CPU: 0.015 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.005*1.03] collected minimizers\n[M::mm_idx_gen::0.006*1.18] sorted minimizers\n[M::main::0.007*1.18] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.007*1.18] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*1.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.24] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/e/4/a/dataset_e4af3d44-f1d0-46b7-8ac9-2c5d71669c4b.dat\n[M::main] Real time: 0.012 sec; CPU: 0.015 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:18:03", "plugin": "core", "name": "end_epoch", "raw_value": "1617463083.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:18:03", "plugin": "core", "name": "start_epoch", "raw_value": "1617463083.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 2, "time_seconds": 50.32016372680664, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "55b90e7705e285ee"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "9acae6a958dfbaf1"}, "fastq_input|fastq_input2": {"src": "hda", "id": "e74e849062cd20fc"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "227993e956df4307", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:18:11.304832", "create_time": "2021-04-03T15:17:57.245947", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-fpbdx", "command_line": "ln -f -s '/galaxy/server/database/objects/b/0/0/dataset_b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/3/f/5/dataset_3f5f72f8-185b-45b8-89fc-80e58669eb02.dat' '/galaxy/server/database/objects/c/f/3/dataset_cf311f2f-0171-4c26-9881-e504b0fd62f8.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/8/c/a/dataset_8ca1be5b-8d57-4483-b4f4-16f956c1c030.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 2, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 8, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 10, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input2": {"id": "e74e849062cd20fc", "src": "hda", "uuid": "cf311f2f-0171-4c26-9881-e504b0fd62f8"}, "fastq_input1": {"id": "9acae6a958dfbaf1", "src": "hda", "uuid": "3f5f72f8-185b-45b8-89fc-80e58669eb02"}, "ref_file": {"id": "55b90e7705e285ee", "src": "hda", "uuid": "b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac"}}, "outputs": {"alignment_output": {"id": "227993e956df4307", "src": "hda", "uuid": "8ca1be5b-8d57-4483-b4f4-16f956c1c030"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.87] collected minimizers\n[M::mm_idx_gen::0.005*1.08] sorted minimizers\n[M::main::0.005*1.08] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.08] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.08] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.018*1.33] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/3/f/5/dataset_3f5f72f8-185b-45b8-89fc-80e58669eb02.dat /galaxy/server/database/objects/c/f/3/dataset_cf311f2f-0171-4c26-9881-e504b0fd62f8.dat\n[M::main] Real time: 0.021 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*0.87] collected minimizers\n[M::mm_idx_gen::0.005*1.08] sorted minimizers\n[M::main::0.005*1.08] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.08] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.08] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.018*1.33] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/3/f/5/dataset_3f5f72f8-185b-45b8-89fc-80e58669eb02.dat /galaxy/server/database/objects/c/f/3/dataset_cf311f2f-0171-4c26-9881-e504b0fd62f8.dat\n[M::main] Real time: 0.021 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:18:09", "plugin": "core", "name": "end_epoch", "raw_value": "1617463089.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:18:09", "plugin": "core", "name": "start_epoch", "raw_value": "1617463089.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 3, "time_seconds": 52.51092481613159, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "55b90e7705e285ee"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "96785246c4835854"}, "fastq_input|fastq_input2": {"src": "hda", "id": "e74e849062cd20fc"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "163b4feb45fd4418", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:18:13.717294", "create_time": "2021-04-03T15:17:57.978513", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-xtfzg", "command_line": "ln -f -s '/galaxy/server/database/objects/b/0/0/dataset_b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/1/0/6/dataset_106529a4-537c-4c42-bded-d33e7ec94310.dat' '/galaxy/server/database/objects/c/f/3/dataset_cf311f2f-0171-4c26-9881-e504b0fd62f8.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/4/9/5/dataset_4957592f-877e-4406-9afa-56c735f351ff.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 2, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 7, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 10, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input2": {"id": "e74e849062cd20fc", "src": "hda", "uuid": "cf311f2f-0171-4c26-9881-e504b0fd62f8"}, "fastq_input1": {"id": "96785246c4835854", "src": "hda", "uuid": "106529a4-537c-4c42-bded-d33e7ec94310"}, "ref_file": {"id": "55b90e7705e285ee", "src": "hda", "uuid": "b00700d1-f78f-4c1c-9bc6-8a1f404eb4ac"}}, "outputs": {"alignment_output": {"id": "163b4feb45fd4418", "src": "hda", "uuid": "4957592f-877e-4406-9afa-56c735f351ff"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*1.01] collected minimizers\n[M::mm_idx_gen::0.004*1.16] sorted minimizers\n[M::main::0.004*1.16] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.16] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.15] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.018*1.49] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/0/6/dataset_106529a4-537c-4c42-bded-d33e7ec94310.dat /galaxy/server/database/objects/c/f/3/dataset_cf311f2f-0171-4c26-9881-e504b0fd62f8.dat\n[M::main] Real time: 0.020 sec; CPU: 0.027 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*1.01] collected minimizers\n[M::mm_idx_gen::0.004*1.16] sorted minimizers\n[M::main::0.004*1.16] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.16] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.15] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.018*1.49] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/0/6/dataset_106529a4-537c-4c42-bded-d33e7ec94310.dat /galaxy/server/database/objects/c/f/3/dataset_cf311f2f-0171-4c26-9881-e504b0fd62f8.dat\n[M::main] Real time: 0.020 sec; CPU: 0.027 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:18:12", "plugin": "core", "name": "end_epoch", "raw_value": "1617463092.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:18:12", "plugin": "core", "name": "start_epoch", "raw_value": "1617463092.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 4, "time_seconds": 31.263557195663452, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "c39d98fc53351ba1"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hdca", "id": "36561a8e92cf2cc1"}, "fastq_input|fastq_input_selector": "paired_collection"}, "job": {"model_class": "Job", "id": "98a09b7c41b36556", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:18:36.426082", "create_time": "2021-04-03T15:18:26.344978", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-hz8r4", "command_line": "ln -f -s '/galaxy/server/database/objects/8/5/4/dataset_854d5bae-b9be-4a41-aa57-4aa0e4ca055b.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/8/f/b/dataset_8fbba3d6-c464-42e6-9339-122032860d24.dat' '/galaxy/server/database/objects/9/0/a/dataset_90ac6d21-2828-4d0b-9815-9850aabfec6e.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/4/8/1/dataset_481faa43-a454-4f6f-8ed5-969ecd4d19c8.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 15, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"fastq_input12": {"id": "dc65a1626fa02666", "src": "hda", "uuid": "90ac6d21-2828-4d0b-9815-9850aabfec6e"}, "fastq_input11": {"id": "dd677dc88034a3a5", "src": "hda", "uuid": "8fbba3d6-c464-42e6-9339-122032860d24"}, "ref_file": {"id": "c39d98fc53351ba1", "src": "hda", "uuid": "854d5bae-b9be-4a41-aa57-4aa0e4ca055b"}}, "outputs": {"alignment_output": {"id": "98a09b7c41b36556", "src": "hda", "uuid": "481faa43-a454-4f6f-8ed5-969ecd4d19c8"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.95] collected minimizers\n[M::mm_idx_gen::0.005*1.06] sorted minimizers\n[M::main::0.005*1.06] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.06] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.06] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.022*1.29] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/8/f/b/dataset_8fbba3d6-c464-42e6-9339-122032860d24.dat /galaxy/server/database/objects/9/0/a/dataset_90ac6d21-2828-4d0b-9815-9850aabfec6e.dat\n[M::main] Real time: 0.024 sec; CPU: 0.030 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*0.95] collected minimizers\n[M::mm_idx_gen::0.005*1.06] sorted minimizers\n[M::main::0.005*1.06] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.06] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.06] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.022*1.29] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/8/f/b/dataset_8fbba3d6-c464-42e6-9339-122032860d24.dat /galaxy/server/database/objects/9/0/a/dataset_90ac6d21-2828-4d0b-9815-9850aabfec6e.dat\n[M::main] Real time: 0.024 sec; CPU: 0.030 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-03 15:18:33", "plugin": "core", "name": "end_epoch", "raw_value": "1617463113.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:18:33", "plugin": "core", "name": "start_epoch", "raw_value": "1617463113.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 5, "time_seconds": 12.894155263900757, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "ffb621d1c4d078d6"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: Schizosaccharomyces_pombe_1.1,nomLeu1,ce7,eschColi_O157H7_EDL933,eschColi_CFT073,gorGor3,droEre2,droVir3,papHam1,droGri2,galGal2,caeRem1,lMaj5,ce3,ce2,galGal3canon,gasAcu1,Homo_sapiens_nuHg19_mtrCRS,strPur3,danRer5,caeRem4,turTru2,monDom5,Hydra_JCVI,Tcas_3.0,ci2canon,panTro3full,fr1,galGal4,loxAfr1,eschColi_K12_W3110,bosTau6,petMar1,PhumU1,droYak1,danRer6,calJac3canon,saiBol1,panTro3canon,droVir2,strePneu_R6,tarSyr1,sarHar1,hg18,otoGar1,allMis1,caePb1,hg19,felCat4,droMoj2,hg18canon,Arabidopsis_thaliana_TAIR9,ce6,CpipJ1,Amel_4.5,taeGut2,danRer4,mm7canon,droMoj1,mm9female,droYak2,susScr2,loxAfr3,eschColi_O157H7,braFlo1,ornAna1,Sscrofa9.58,dp3,cb3canon,Bombyx_mori_p50T_2.0,caeJap2,hg38,vicPac1,xenTro1,apiMel2,eschColi_K12_DH10B,nomLeu3,Zea_mays_B73_RefGen_v2,oryLat2,priPac1,caeJap3,Ptrichocarpa_156,oviAri1,ce9,Xanthomonas_oryzae_PXO99A,calJac1,droSec1,rheMac2,dm3,bosTau7,burkPseu_K96243,rn6,eschColi_O157H7_EC4115,micMur1,hg38canon,ente638,droAna3,Araly1,baciSubt,hg19_rCRS_pUC18_phiX174,hetGla1,apiMel3,rn5,tupBel1,ce8,mm8,Homo_sapiens_AK1,sacCer1,tetNig2canon,aplCal1,strPur2,equCab1,burkPseu_668,pUC18,aptMan1,27835,taeGut1,bosTauMd3,eriEur1,myoLuc2,phiX,venter1,hg38female,vicPac2,panTro2,droWil1,oryLat2canon,apiMel1,droSim1,ce5,susScr3,caeJap4,triCas2,Xanthomonas_oryzae_KACC10331,equCab2,felCat5,calJac3,burkPseu_1710B,droAna2,Spur_v2.6,Xanthomonas_oryzae_MAFF_311018,mm10,droPer1,canFam2,pseuAeru_PA7,hg19chrM,panTro1canon,panPan1,cerSim1,mm7,borEut13,rn3,tetNig1canon,panTro1,oryCun2,canFam1,musFur1,geoFor1,melGal1,fr2,bordBron,hg18nohaps,felCat8,equCab2chrM,monDom4,rn4,Tcacao_1.0,dm2,panTro4,monDom1,speTri2,cb3full,sacCer2,felCat4canon,anoCar1,ce4,anoGam1,ponAbe2,eschColi_K12,danRer7,xenTro3,caePb2,dp4,hg18chr21,rn4canon,droMoj3,oryLat1,caeJap1,galGal2canon,mm9canon,hg_g1k_v37,susScr1,pseuAeru_UCBPP_PA14,caePb3,chrPic1,hg19female,mm8canon,otoGar3,hg19canon,gadMor1,hg19chrX,ce10,cavPor3,nomLeu2,danRer3,eschColi_APEC_O1,bosTau4,apiMel4,felCat3,xenTro2,bosTau2,bosTau3,oryza_sativa_japonica_nipponbare_IRGSP4.0,danRer10,bosTau8,tetNig2,eschColi_O157H7_TW14359,tetNig1,canFam3,hg17,caeRem2,droAna1,droVir1,rn3canon,galGal3,latCha1,choHof1,IscaW1,rheMac3,ci2full,AgamP3,AaegL1,ailMel1,dasNov3,pseuAeru_PAO1,melUnd1,hg17canon,dasNov1,bosTau5,droEre1,sacCer3,sorAra1,danRer2,mm9,caeRem3,oryCun1,anoCar2,taeGut1canon,papAnu2,panTro2canon,criGri1,dm6,droGri1,burkPseu_1106A,dipOrd1,echTel1,Arabidopsis_thaliana_TAIR10)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 6, "time_seconds": 14.690562963485718, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "ffb621d1c4d078d6"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "mapping_options|min_occ_floor": "1000", "alignment_options|A": "2", "alignment_options|B": "8", "alignment_options|O": "12", "alignment_options|O2": "32", "alignment_options|E": "2", "alignment_options|E2": "1", "alignment_options|z": "400", "alignment_options|s": "40"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: Schizosaccharomyces_pombe_1.1,nomLeu1,ce7,eschColi_O157H7_EDL933,eschColi_CFT073,gorGor3,droEre2,droVir3,papHam1,droGri2,galGal2,caeRem1,lMaj5,ce3,ce2,galGal3canon,gasAcu1,Homo_sapiens_nuHg19_mtrCRS,strPur3,danRer5,caeRem4,turTru2,monDom5,Hydra_JCVI,Tcas_3.0,ci2canon,panTro3full,fr1,galGal4,loxAfr1,eschColi_K12_W3110,bosTau6,petMar1,PhumU1,droYak1,danRer6,calJac3canon,saiBol1,panTro3canon,droVir2,strePneu_R6,tarSyr1,sarHar1,hg18,otoGar1,allMis1,caePb1,hg19,felCat4,droMoj2,hg18canon,Arabidopsis_thaliana_TAIR9,ce6,CpipJ1,Amel_4.5,taeGut2,danRer4,mm7canon,droMoj1,mm9female,droYak2,susScr2,loxAfr3,eschColi_O157H7,braFlo1,ornAna1,Sscrofa9.58,dp3,cb3canon,Bombyx_mori_p50T_2.0,caeJap2,hg38,vicPac1,xenTro1,apiMel2,eschColi_K12_DH10B,nomLeu3,Zea_mays_B73_RefGen_v2,oryLat2,priPac1,caeJap3,Ptrichocarpa_156,oviAri1,ce9,Xanthomonas_oryzae_PXO99A,calJac1,droSec1,rheMac2,dm3,bosTau7,burkPseu_K96243,rn6,eschColi_O157H7_EC4115,micMur1,hg38canon,ente638,droAna3,Araly1,baciSubt,hg19_rCRS_pUC18_phiX174,hetGla1,apiMel3,rn5,tupBel1,ce8,mm8,Homo_sapiens_AK1,sacCer1,tetNig2canon,aplCal1,strPur2,equCab1,burkPseu_668,pUC18,aptMan1,27835,taeGut1,bosTauMd3,eriEur1,myoLuc2,phiX,venter1,hg38female,vicPac2,panTro2,droWil1,oryLat2canon,apiMel1,droSim1,ce5,susScr3,caeJap4,triCas2,Xanthomonas_oryzae_KACC10331,equCab2,felCat5,calJac3,burkPseu_1710B,droAna2,Spur_v2.6,Xanthomonas_oryzae_MAFF_311018,mm10,droPer1,canFam2,pseuAeru_PA7,hg19chrM,panTro1canon,panPan1,cerSim1,mm7,borEut13,rn3,tetNig1canon,panTro1,oryCun2,canFam1,musFur1,geoFor1,melGal1,fr2,bordBron,hg18nohaps,felCat8,equCab2chrM,monDom4,rn4,Tcacao_1.0,dm2,panTro4,monDom1,speTri2,cb3full,sacCer2,felCat4canon,anoCar1,ce4,anoGam1,ponAbe2,eschColi_K12,danRer7,xenTro3,caePb2,dp4,hg18chr21,rn4canon,droMoj3,oryLat1,caeJap1,galGal2canon,mm9canon,hg_g1k_v37,susScr1,pseuAeru_UCBPP_PA14,caePb3,chrPic1,hg19female,mm8canon,otoGar3,hg19canon,gadMor1,hg19chrX,ce10,cavPor3,nomLeu2,danRer3,eschColi_APEC_O1,bosTau4,apiMel4,felCat3,xenTro2,bosTau2,bosTau3,oryza_sativa_japonica_nipponbare_IRGSP4.0,danRer10,bosTau8,tetNig2,eschColi_O157H7_TW14359,tetNig1,canFam3,hg17,caeRem2,droAna1,droVir1,rn3canon,galGal3,latCha1,choHof1,IscaW1,rheMac3,ci2full,AgamP3,AaegL1,ailMel1,dasNov3,pseuAeru_PAO1,melUnd1,hg17canon,dasNov1,bosTau5,droEre1,sacCer3,sorAra1,danRer2,mm9,caeRem3,oryCun1,anoCar2,taeGut1canon,papAnu2,panTro2canon,criGri1,dm6,droGri1,burkPseu_1106A,dipOrd1,echTel1,Arabidopsis_thaliana_TAIR10)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 7, "time_seconds": 29.273857831954956, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "63970ff2979aad45"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "63970ff2979aad45"}, "fastq_input|analysis_type_selector": "ava-ont", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "paf"}, "job": {"model_class": "Job", "id": "3e9a742a7564db8f", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:18:42.988491", "create_time": "2021-04-03T15:18:32.826059", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-85wz5", "command_line": "ln -f -s '/galaxy/server/database/objects/3/a/7/dataset_3a787c58-ae72-4d9e-88c6-1c158d86f0cd.dat' reference.fa && minimap2 -x ava-ont           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/3/a/7/dataset_3a787c58-ae72-4d9e-88c6-1c158d86f0cd.dat' > '/galaxy/server/database/objects/1/2/c/dataset_12c5a31a-b575-42d2-92b3-4c1e027e8244.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 20, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"ava-ont\", \"fastq_input1\": {\"values\": [{\"id\": 20, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"paf\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref_file": {"id": "63970ff2979aad45", "src": "hda", "uuid": "3a787c58-ae72-4d9e-88c6-1c158d86f0cd"}, "fastq_input1": {"id": "63970ff2979aad45", "src": "hda", "uuid": "3a787c58-ae72-4d9e-88c6-1c158d86f0cd"}}, "outputs": {"alignment_output": {"id": "3e9a742a7564db8f", "src": "hda", "uuid": "12c5a31a-b575-42d2-92b3-4c1e027e8244"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.020*0.95] collected minimizers\n[M::mm_idx_gen::0.035*1.38] sorted minimizers\n[M::main::0.035*1.38] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.038*1.35] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.040*1.33] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.061*1.50] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/3/a/7/dataset_3a787c58-ae72-4d9e-88c6-1c158d86f0cd.dat\n[M::main] Real time: 0.071 sec; CPU: 0.101 sec; Peak RSS: 0.009 GB\n", "stderr": "\n[M::mm_idx_gen::0.020*0.95] collected minimizers\n[M::mm_idx_gen::0.035*1.38] sorted minimizers\n[M::main::0.035*1.38] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.038*1.35] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.040*1.33] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.061*1.50] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/3/a/7/dataset_3a787c58-ae72-4d9e-88c6-1c158d86f0cd.dat\n[M::main] Real time: 0.071 sec; CPU: 0.101 sec; Peak RSS: 0.009 GB\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:18:40", "plugin": "core", "name": "start_epoch", "raw_value": "1617463120.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:18:40", "plugin": "core", "name": "end_epoch", "raw_value": "1617463120.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 8, "time_seconds": 28.147348403930664, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "188e6dc9d17d1734"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "188e6dc9d17d1734"}, "fastq_input|analysis_type_selector": "self-homology", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "c2c3ed3e779d0f86", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:18:47.418894", "create_time": "2021-04-03T15:18:34.495034", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-ngf96", "command_line": "ln -f -s '/galaxy/server/database/objects/9/d/0/dataset_9d0326b4-2851-43bb-b60e-56d6df6104bb.dat' reference.fa && minimap2 -DP -k19 -w19 -m200           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/9/d/0/dataset_9d0326b4-2851-43bb-b60e-56d6df6104bb.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/e/b/6/dataset_eb6d3fde-924e-4ab4-b98b-8f9d01c12fb3.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 21, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"self-homology\", \"fastq_input1\": {\"values\": [{\"id\": 21, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref_file": {"id": "188e6dc9d17d1734", "src": "hda", "uuid": "9d0326b4-2851-43bb-b60e-56d6df6104bb"}, "fastq_input1": {"id": "188e6dc9d17d1734", "src": "hda", "uuid": "9d0326b4-2851-43bb-b60e-56d6df6104bb"}}, "outputs": {"alignment_output": {"id": "c2c3ed3e779d0f86", "src": "hda", "uuid": "eb6d3fde-924e-4ab4-b98b-8f9d01c12fb3"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.94] collected minimizers\n[M::mm_idx_gen::0.006*1.17] sorted minimizers\n[M::main::0.006*1.17] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.16] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.15] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.048*1.00] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/9/d/0/dataset_9d0326b4-2851-43bb-b60e-56d6df6104bb.dat\n[M::main] Real time: 0.049 sec; CPU: 0.048 sec; Peak RSS: 0.010 GB\n", "stderr": "\n[M::mm_idx_gen::0.004*0.94] collected minimizers\n[M::mm_idx_gen::0.006*1.17] sorted minimizers\n[M::main::0.006*1.17] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.16] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.15] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.048*1.00] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/9/d/0/dataset_9d0326b4-2851-43bb-b60e-56d6df6104bb.dat\n[M::main] Real time: 0.049 sec; CPU: 0.048 sec; Peak RSS: 0.010 GB\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:18:45", "plugin": "core", "name": "start_epoch", "raw_value": "1617463125.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:18:45", "plugin": "core", "name": "end_epoch", "raw_value": "1617463125.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 0, "time_seconds": 59.80743908882141, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "8f2fb7c32ae997a9"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "550278b31125b038"}}, "job": {"model_class": "Job", "id": "5f900f4fcc178826", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:23:58.594943", "create_time": "2021-04-03T15:23:29.821828", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-bjkqr", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat --pe1-2 fastq:/galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat && python '/galaxy/server/database/jobs_directory/000/104/configs/tmpyj8jrbn9' < contigs.fasta > '/galaxy/server/database/objects/d/0/2/dataset_d02f9f41-2387-4f02-9166-d8d20e87c6e6.dat' && python '/galaxy/server/database/jobs_directory/000/104/configs/tmpyj8jrbn9' < scaffolds.fasta > '/galaxy/server/database/objects/9/1/9/dataset_919af3e8-96cd-45f1-93dc-3429900dd137.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 101, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 102, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "8f2fb7c32ae997a9", "src": "hda", "uuid": "9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1"}, "libraries_0|files_0|rev_reads": {"id": "550278b31125b038", "src": "hda", "uuid": "3dc3487c-e402-470f-acd6-7ce39b102453"}}, "outputs": {"out_contig_stats": {"id": "2c637327024aa056", "src": "hda", "uuid": "d02f9f41-2387-4f02-9166-d8d20e87c6e6"}, "out_scaffold_stats": {"id": "ca066fb306f0afc7", "src": "hda", "uuid": "919af3e8-96cd-45f1-93dc-3429900dd137"}, "out_contigs": {"id": "c8b2ac9e20206640", "src": "hda", "uuid": "5d4c7c14-dda6-4355-9f07-4e691d0fc181"}, "out_scaffolds": {"id": "2fe0c1a2a0b69d22", "src": "hda", "uuid": "0e47b957-bfbc-4f83-947a-6603a8d9738d"}, "out_log": {"id": "381dfd35593473ce", "src": "hda", "uuid": "baf1f204-347d-414d-ae41-67bcff170889"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/104/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/104/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat']\n      right reads: ['/galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/104/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/104/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/104/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/104/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat\n  0:00:00.536     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\n  0:00:01.054     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.058    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.284    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.284    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.421    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.459    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.480    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.481    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.494    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.494    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.494    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat\n  0:00:01.529    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\n  0:00:01.561    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.561    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.561    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.566    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.566    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat and /galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\n  0:00:01.614    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.625    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.629    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.659    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.659    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.659    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/104/working/corrected/corrected.yaml\n  0:00:01.663    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/104/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/104/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/104/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.125    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.130     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.308   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.314     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.500   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.562     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.562     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.562     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.563     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.563     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.563     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.563     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.704     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.706    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.706    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.799    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.799    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.799    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.800    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.800    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.800    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.332     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.338    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.554    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.554    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.720    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.740    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.740    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.742    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.742    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.899    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.900    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.900    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.900    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.900    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.900    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.900    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.900    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.914    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.914    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.914    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.918    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.918    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.918    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/before_rr.fasta\n  0:00:06.923    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph.fastg\n  0:00:06.927    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/simplified_contigs.fasta\n  0:00:06.931    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/intermediate_contigs.fasta\n  0:00:06.938    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.938    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.938    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.938    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.938    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.938    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.003    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.135    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.915    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.915    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.922    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.047   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.050   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.055   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.057   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.057   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.057   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.071   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.078   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.096    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.096    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.096    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.096    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.096    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.096    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.096    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.096    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.097    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.097    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.098    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.098    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.099    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/before_rr.fasta\n  0:00:09.104    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph.fastg\n  0:00:09.108    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/104/working//K33/final_contigs.paths\n  0:00:09.116    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/104/working//K33/scaffolds.paths\n  0:00:09.132    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.134    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/104/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/104/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/104/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/104/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/104/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/104/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/104/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/104/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/104/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/104/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat']\n      right reads: ['/galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/104/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/104/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/104/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/104/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat\n  0:00:00.536     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\n  0:00:01.054     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.058    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.284    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.284    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.421    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.459    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.480    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.481    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.494    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.494    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.494    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat\n  0:00:01.529    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\n  0:00:01.561    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.561    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.561    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.565    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.566    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.566    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/9/6/7/dataset_9679fbae-d8d9-431f-baaa-d2ddd5f2c2b1.dat and /galaxy/server/database/objects/3/d/c/dataset_3dc3487c-e402-470f-acd6-7ce39b102453.dat\n  0:00:01.614    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.625    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.629    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.659    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.659    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.659    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/104/working/corrected/corrected.yaml\n  0:00:01.663    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/104/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/104/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/104/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.125    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.130     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.308   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.314     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.500   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.562     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.562     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.562     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.563     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.563     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.563     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.563     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.704     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.706    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.706    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.799    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.799    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.799    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.800    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.800    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.800    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.332     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.338    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.554    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.554    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.720    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.740    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.740    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.742    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.742    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.899    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.900    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.900    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.900    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.900    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.900    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.900    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.900    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.900    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.900    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.914    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.914    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.914    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.918    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.918    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.918    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/before_rr.fasta\n  0:00:06.923    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph.fastg\n  0:00:06.927    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/simplified_contigs.fasta\n  0:00:06.931    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/intermediate_contigs.fasta\n  0:00:06.938    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.938    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.938    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.938    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.938    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.938    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.003    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.135    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.915    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.915    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.922    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.047   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.050   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.055   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.057   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.057   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.057   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.071   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.078   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.096    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.096    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.096    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.096    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.096    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.096    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.096    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.096    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.096    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.096    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.097    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.097    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.097    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.098    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.098    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.098    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.098    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.098    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.099    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/before_rr.fasta\n  0:00:09.104    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph.fastg\n  0:00:09.108    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/104/working//K33/final_contigs.paths\n  0:00:09.116    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/104/working//K33/scaffolds.paths\n  0:00:09.132    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.134    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/104/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/104/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/104/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/104/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/104/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/104/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/104/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/104/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:23:57", "plugin": "core", "name": "end_epoch", "raw_value": "1617463437.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:23:45", "plugin": "core", "name": "start_epoch", "raw_value": "1617463425.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 1, "time_seconds": 69.67585825920105, "inputs": {"sc": false, "onlyassembler": true, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "6487d163ec6d0eb8"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "5f900f4fcc178826"}}, "job": {"model_class": "Job", "id": "2c637327024aa056", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:24:13.680663", "create_time": "2021-04-03T15:23:34.271874", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-bn9sg", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output  --only-assembler  -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fasta:/galaxy/server/database/objects/1/b/5/dataset_1b5a3bc6-d19e-437c-9ae1-6f4da0d04c01.dat --pe1-2 fasta:/galaxy/server/database/objects/9/0/a/dataset_90aa3561-89a8-4094-9ac2-68db41e6fec4.dat && python '/galaxy/server/database/jobs_directory/000/107/configs/tmpt35gvfyc' < contigs.fasta > '/galaxy/server/database/objects/7/5/0/dataset_750d65db-df2d-43c7-80f9-3161e9a1ccc9.dat' && python '/galaxy/server/database/jobs_directory/000/107/configs/tmpt35gvfyc' < scaffolds.fasta > '/galaxy/server/database/objects/e/7/d/dataset_e7d23408-8dd8-4f46-93df-e2e81f4b6af0.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 103, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 104, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"true\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "6487d163ec6d0eb8", "src": "hda", "uuid": "1b5a3bc6-d19e-437c-9ae1-6f4da0d04c01"}, "libraries_0|files_0|rev_reads": {"id": "5f900f4fcc178826", "src": "hda", "uuid": "90aa3561-89a8-4094-9ac2-68db41e6fec4"}}, "outputs": {"out_log": {"id": "79d62f6e724da637", "src": "hda", "uuid": "6d089264-64cd-4242-a9b6-393a50ff2598"}, "out_contig_stats": {"id": "c037d0ad7af4b1ea", "src": "hda", "uuid": "750d65db-df2d-43c7-80f9-3161e9a1ccc9"}, "out_scaffold_stats": {"id": "1727fe16aec8493c", "src": "hda", "uuid": "e7d23408-8dd8-4f46-93df-e2e81f4b6af0"}, "out_contigs": {"id": "01d9adb0b15025f7", "src": "hda", "uuid": "1a33a2e6-7577-4ec7-9f99-e4f0a1529368"}, "out_scaffolds": {"id": "f9573de1dc6de80d", "src": "hda", "uuid": "e032e516-8fd1-4788-b6a1-5264ee8ad8e5"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/107/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/1/b/5/dataset_1b5a3bc6-d19e-437c-9ae1-6f4da0d04c01.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/9/0/a/dataset_90aa3561-89a8-4094-9ac2-68db41e6fec4.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/107/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/1/b/5/dataset_1b5a3bc6-d19e-437c-9ae1-6f4da0d04c01.dat']\n      right reads: ['/galaxy/server/database/objects/9/0/a/dataset_90aa3561-89a8-4094-9ac2-68db41e6fec4.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/107/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/107/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/107/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/107/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.297   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.303     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.478   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.537     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.537     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.537     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.537     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.538     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.538     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.538     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.667     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.669    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.669    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.724    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.724    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.758    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.758    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.758    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.759    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.759    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.759    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.223     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.229    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.445    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.445    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.582    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.633    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.657    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.657    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.658    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.665    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.665    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.667    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.667    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.668    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.668    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.668    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.668    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.678    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.678    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.691    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.696    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.740    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.860    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.251    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.921    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.150    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.148    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.149    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.149    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.149    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.149    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.149    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.150    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.150    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.151    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.151    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:06.151    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.626     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.630    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:06.848    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:06.848    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:06.981    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.021    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.044    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.044    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.045    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.047    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.048    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.052    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.052    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.052    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.052    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.053    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.053    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.053    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.053    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.054    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.054    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.054    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:\n..\n   INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.919    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.920    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.920    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.920    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.920    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:07.920    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.920    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.920    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.933    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.933    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.933    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.936    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.936    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.937    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/before_rr.fasta\n  0:00:07.942    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph.fastg\n  0:00:07.946    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/simplified_contigs.fasta\n  0:00:07.950    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/intermediate_contigs.fasta\n  0:00:07.958    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.958    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.958    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.958    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.958    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.958    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.025    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.145    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.953    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.953    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:09.960    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.100   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.103   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.108   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.110   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.110   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.110   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.123   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.134   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.157    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.157    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.157    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.157    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.157    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.157    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.157    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.158    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.158    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.158    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.158    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.158    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.158    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.158    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.158    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.159    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.159    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.161    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/before_rr.fasta\n  0:00:10.167    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph.fastg\n  0:00:10.171    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/107/working//K33/final_contigs.paths\n  0:00:10.178    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/107/working//K33/scaffolds.paths\n  0:00:10.195    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.197    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/107/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/107/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/107/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/107/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/107/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/107/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/107/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/107/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/1/b/5/dataset_1b5a3bc6-d19e-437c-9ae1-6f4da0d04c01.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/9/0/a/dataset_90aa3561-89a8-4094-9ac2-68db41e6fec4.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/107/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/1/b/5/dataset_1b5a3bc6-d19e-437c-9ae1-6f4da0d04c01.dat']\n      right reads: ['/galaxy/server/database/objects/9/0/a/dataset_90aa3561-89a8-4094-9ac2-68db41e6fec4.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/107/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/107/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/107/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/107/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.297   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.303     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.478   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.537     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.537     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.537     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.537     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.538     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.538     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.538     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.667     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.669    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.669    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.724    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.724    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.758    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.758    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.758    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.759    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.759    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.759    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.223     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.229    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.445    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.445    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.582    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.633    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.657    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.657    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.658    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.665    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.665    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.667    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.667    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.668    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.668    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.668    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.668    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.678    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.678    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.691    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.696    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.696    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.740    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.860    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.251    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.921    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.150    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.148    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.149    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.149    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.149    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.149    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.149    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.149    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.150    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.150    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.151    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.151    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:06.151    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.626     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.630    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:06.848    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:06.848    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:06.981    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.021    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.044    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.044    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.045    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.047    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.048    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.052    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.052    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.052    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.052    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.053    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.053    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.053    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.053    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.054    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.054    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.054    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.054    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:\n..\n   INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.919    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.920    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.920    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.920    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.920    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.920    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.920    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:07.920    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.920    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.920    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.933    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.933    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.933    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.936    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.936    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.937    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/before_rr.fasta\n  0:00:07.942    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph.fastg\n  0:00:07.946    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/simplified_contigs.fasta\n  0:00:07.950    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/intermediate_contigs.fasta\n  0:00:07.958    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.958    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.958    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.958    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.958    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.958    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.025    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.145    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.953    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.953    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:09.960    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.100   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.103   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.108   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.110   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.110   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.110   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.123   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.134   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.157    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.157    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.157    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.157    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.157    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.157    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.157    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.157    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.158    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.158    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.158    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.158    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.158    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.158    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.158    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.158    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.159    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.159    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.159    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.159    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.159    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.159    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.161    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/107/working//K33/before_rr.fasta\n  0:00:10.167    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/107/working//K33/assembly_graph.fastg\n  0:00:10.171    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/107/working//K33/final_contigs.paths\n  0:00:10.178    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/107/working//K33/scaffolds.paths\n  0:00:10.195    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.197    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/107/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/107/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/107/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/107/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/107/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/107/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/107/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:24:11", "plugin": "core", "name": "end_epoch", "raw_value": "1617463451.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:24:00", "plugin": "core", "name": "start_epoch", "raw_value": "1617463440.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 2, "time_seconds": 65.21020460128784, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "06c72ac6e704d1cd"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "d977ad34c53ddb90"}}, "job": {"model_class": "Job", "id": "2fe0c1a2a0b69d22", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:24:28.193128", "create_time": "2021-04-03T15:23:40.935013", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-5bgh8", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat && python '/galaxy/server/database/jobs_directory/000/110/configs/tmpgb_y7bz6' < contigs.fasta > '/galaxy/server/database/objects/6/1/8/dataset_618c6de1-8cea-49e4-bb43-1ffbed61ee30.dat' && python '/galaxy/server/database/jobs_directory/000/110/configs/tmpgb_y7bz6' < scaffolds.fasta > '/galaxy/server/database/objects/c/9/a/dataset_c9a30f05-ca06-4c1b-b579-9b9a8b990c0e.dat'", "params": {"__input_ext": "\"fastq.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 112, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 113, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "06c72ac6e704d1cd", "src": "hda", "uuid": "23c5020c-8ea6-4d66-ba57-bd4584434bbd"}, "libraries_0|files_0|rev_reads": {"id": "d977ad34c53ddb90", "src": "hda", "uuid": "8fdf1fe0-0524-445a-8817-50881eeb307f"}}, "outputs": {"out_contig_stats": {"id": "dc49e87cc0dce2ac", "src": "hda", "uuid": "618c6de1-8cea-49e4-bb43-1ffbed61ee30"}, "out_scaffold_stats": {"id": "0681d44cdb9b5588", "src": "hda", "uuid": "c9a30f05-ca06-4c1b-b579-9b9a8b990c0e"}, "out_contigs": {"id": "dbe4dbc92451914c", "src": "hda", "uuid": "1918d594-e9ec-4ad7-8a90-0314955a0057"}, "out_scaffolds": {"id": "4445edd532be19b1", "src": "hda", "uuid": "69613996-3e12-45c6-b4ef-e52e7baf4db2"}, "out_log": {"id": "293b60a2c4914d88", "src": "hda", "uuid": "bcb77bd6-5e18-4942-907b-233006623271"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/110/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/110/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat']\n      right reads: ['/galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/110/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/110/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/110/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/110/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat\n  0:00:00.517     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\n  0:00:00.975     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.979    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.176    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.176    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.299    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.332    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.351    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.353    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.355    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.358    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.366    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.366    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.366    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat\n  0:00:01.406    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\n  0:00:01.439    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.439    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.439    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.444    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.444    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.465    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.465    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.465    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.465    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat and /galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\n  0:00:01.502    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.509    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.512    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.541    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.541    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.541    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/110/working/corrected/corrected.yaml\n  0:00:01.545    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/110/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/110/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/110/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.298   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.305     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.495   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.555     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.555     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.555     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.556     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.556     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.556     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.690     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.692    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.692    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.750    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.751    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.791    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.791    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.791    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.274     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.279    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.491    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.491    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.627    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.658    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.678    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.678    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.680    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:06.897    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.898    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.898    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.898    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.898    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.898    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.898    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.898    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.911    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.911    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.911    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.914    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.914    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.914    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/before_rr.fasta\n  0:00:06.918    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph.fastg\n  0:00:06.923    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/simplified_contigs.fasta\n  0:00:06.927    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/intermediate_contigs.fasta\n  0:00:06.935    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.935    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.935    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.935    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.935    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.935    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.009    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.164    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.960    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.960    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.966    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.113   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.116   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.121   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.129   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.129   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.129   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.145   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.152   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.168    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.168    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.169    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.169    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.169    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.169    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.169    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.169    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.169    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.170    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.170    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.171    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.171    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.171    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.171    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.172    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/before_rr.fasta\n  0:00:09.177    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph.fastg\n  0:00:09.181    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/110/working//K33/final_contigs.paths\n  0:00:09.189    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/110/working//K33/scaffolds.paths\n  0:00:09.204    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.206    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/110/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/110/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/110/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/110/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/110/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/110/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/110/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/110/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/110/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/110/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat']\n      right reads: ['/galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/110/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/110/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/110/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/110/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat\n  0:00:00.517     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\n  0:00:00.975     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.979    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.176    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.176    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.299    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.332    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.351    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.353    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.355    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.358    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.366    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.366    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.366    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat\n  0:00:01.406    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\n  0:00:01.439    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.439    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.439    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.443    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.444    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.444    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.465    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.465    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.465    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.465    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/3/c/dataset_23c5020c-8ea6-4d66-ba57-bd4584434bbd.dat and /galaxy/server/database/objects/8/f/d/dataset_8fdf1fe0-0524-445a-8817-50881eeb307f.dat\n  0:00:01.502    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.509    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.512    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.541    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.541    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.541    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/110/working/corrected/corrected.yaml\n  0:00:01.545    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/110/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/110/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/110/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.298   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.305     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.495   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.555     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.555     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.555     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.556     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.556     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.556     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.690     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.692    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.692    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.750    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.751    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.791    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.791    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.791    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.791    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.274     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.279    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.491    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.491    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.627    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.658    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.678    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.678    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.680    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:06.897    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.898    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.898    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.898    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.898    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.898    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.898    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.898    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.898    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.898    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.911    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.911    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.911    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.914    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.914    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.914    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/before_rr.fasta\n  0:00:06.918    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph.fastg\n  0:00:06.923    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/simplified_contigs.fasta\n  0:00:06.927    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/intermediate_contigs.fasta\n  0:00:06.935    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.935    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.935    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.935    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.935    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.935    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.009    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.164    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.960    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.960    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.966    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.113   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.116   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.121   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.129   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.129   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.129   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.145   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.152   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.168    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.168    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.169    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.169    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.169    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.169    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.169    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.169    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.169    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.169    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.169    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.170    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.170    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.170    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.170    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.170    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.171    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.171    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.171    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.171    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.171    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.171    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.172    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/110/working//K33/before_rr.fasta\n  0:00:09.177    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/110/working//K33/assembly_graph.fastg\n  0:00:09.181    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/110/working//K33/final_contigs.paths\n  0:00:09.189    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/110/working//K33/scaffolds.paths\n  0:00:09.204    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.206    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/110/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/110/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/110/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/110/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/110/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/110/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/110/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/110/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:24:26", "plugin": "core", "name": "end_epoch", "raw_value": "1617463466.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:24:15", "plugin": "core", "name": "start_epoch", "raw_value": "1617463455.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 3, "time_seconds": 116.50976514816284, "inputs": {"sc": false, "careful": false, "kmer_choice|auto_kmer_choice": true, "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "dfe9a379d0f868cf"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "a8b5e36703783ef5"}}, "job": {"model_class": "Job", "id": "381dfd35593473ce", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:25:16.196872", "create_time": "2021-04-03T15:23:46.352207", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-5dk4h", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250}  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat --pe1-2 fastq:/galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat && python '/galaxy/server/database/jobs_directory/000/111/configs/tmplcb506x6' < contigs.fasta > '/galaxy/server/database/objects/c/4/2/dataset_c42e6a7a-0096-48a0-9385-988d9107fc97.dat' && python '/galaxy/server/database/jobs_directory/000/111/configs/tmplcb506x6' < scaffolds.fasta > '/galaxy/server/database/objects/1/8/a/dataset_18aec9a8-0b4e-460a-9465-07d67d5e5b0c.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 119, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 120, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 1, \"auto_kmer_choice\": \"true\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "dfe9a379d0f868cf", "src": "hda", "uuid": "df5e6498-c55b-4c0a-b7cd-66677189efb6"}, "libraries_0|files_0|rev_reads": {"id": "a8b5e36703783ef5", "src": "hda", "uuid": "15a090c8-0bc9-4bce-9cb0-3a9fbe647096"}}, "outputs": {"out_log": {"id": "488a0f1862bf4528", "src": "hda", "uuid": "9ac7d48c-7a21-4bdc-86b9-37c44de8b076"}, "out_scaffolds": {"id": "060d74cdb1b41792", "src": "hda", "uuid": "fd1e4be2-239d-4a65-b1dd-a080cc9dba17"}, "out_contigs": {"id": "4c7f65d6b465e16c", "src": "hda", "uuid": "092f3104-3600-4a3a-8d9d-4e5c28a8110d"}, "out_scaffold_stats": {"id": "da970ff1461eaa98", "src": "hda", "uuid": "18aec9a8-0b4e-460a-9465-07d67d5e5b0c"}, "out_contig_stats": {"id": "6f0e9c1944d436db", "src": "hda", "uuid": "c42e6a7a-0096-48a0-9385-988d9107fc97"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/111/working\t--disable-gzip-output\t-t\t4\t-m\t8\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/111/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat']\n      right reads: ['/galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/111/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/111/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/111/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/111/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat\n  0:00:00.532     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\n  0:00:01.009     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.014    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.231    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.231    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.358    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.394    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.414    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.415    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.418    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.420    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.430    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat\n  0:00:01.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\n  0:00:01.503    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.503    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.509    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.509    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat and /galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\n  0:00:01.557    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.568    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.571    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.600    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.600    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.600    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/111/working/corrected/corrected.yaml\n  0:00:01.604    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/111/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/111/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/111/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.127     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.313     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.494   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.553     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.554     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.697     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.699    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.699    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.760    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.760    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.794    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.794    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.795    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.795    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.795    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.293     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.298    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.520    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.520    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.651    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.688    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.707    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.707    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.711    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.712    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.712    16M / 3G    INFO    General                 (construction.cpp          : 2\n..\n:03.642    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.642    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.643    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.643    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.643    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.643    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.643    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.643    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.654    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.654    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.654    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.656    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.656    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.656    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/before_rr.fasta\n  0:00:03.661    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph.fastg\n  0:00:03.665    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/simplified_contigs.fasta\n  0:00:03.669    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/intermediate_contigs.fasta\n  0:00:03.677    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.677    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.677    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.677    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.677    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.677    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.741    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.858    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.636    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.636    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.642    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.773   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.776   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.781   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.795   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.801   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.818    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.818    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.818    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.818    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.819    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.819    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.819    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.819    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.819    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.819    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.820    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.820    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.822    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/before_rr.fasta\n  0:00:05.827    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph.fastg\n  0:00:05.832    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/111/working//K55/final_contigs.paths\n  0:00:05.840    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/111/working//K55/scaffolds.paths\n  0:00:05.855    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:05.857    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/111/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/111/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/111/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/111/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/111/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/111/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/111/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/111/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/111/working\t--disable-gzip-output\t-t\t4\t-m\t8\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/111/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat']\n      right reads: ['/galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/111/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/111/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/111/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/111/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat\n  0:00:00.532     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\n  0:00:01.009     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.014    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.231    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.231    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.358    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.394    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.414    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.415    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.418    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.420    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.430    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat\n  0:00:01.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\n  0:00:01.503    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.503    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.508    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.509    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.509    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.525    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/f/5/dataset_df5e6498-c55b-4c0a-b7cd-66677189efb6.dat and /galaxy/server/database/objects/1/5/a/dataset_15a090c8-0bc9-4bce-9cb0-3a9fbe647096.dat\n  0:00:01.557    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.568    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.571    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.600    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.600    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.600    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/111/working/corrected/corrected.yaml\n  0:00:01.604    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/111/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/111/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/111/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.127     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.313     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.494   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.553     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.554     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.697     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.699    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.699    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.760    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.760    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.794    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.794    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.795    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.795    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.795    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.293     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.298    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.520    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.520    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.651    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.688    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.707    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.707    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.711    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.712    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.712    16M / 3G    INFO    General                 (construction.cpp          : 2\n..\n:03.642    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.642    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.643    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.643    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.643    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.643    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.643    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.643    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.643    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.643    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.654    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.654    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.654    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.656    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.656    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.656    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/before_rr.fasta\n  0:00:03.661    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph.fastg\n  0:00:03.665    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/simplified_contigs.fasta\n  0:00:03.669    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/intermediate_contigs.fasta\n  0:00:03.677    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.677    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.677    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.677    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.677    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.677    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.741    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.858    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.636    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.636    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.642    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.773   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.776   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.781   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.795   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.801   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.818    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.818    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.818    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.818    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.819    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.819    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.819    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.819    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.819    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.819    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.819    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.819    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.820    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.820    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.820    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.820    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.820    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.820    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.822    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/111/working//K55/before_rr.fasta\n  0:00:05.827    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/111/working//K55/assembly_graph.fastg\n  0:00:05.832    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/111/working//K55/final_contigs.paths\n  0:00:05.840    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/111/working//K55/scaffolds.paths\n  0:00:05.855    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:05.857    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/111/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/111/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/111/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/111/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/111/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/111/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/111/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/111/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:25:14", "plugin": "core", "name": "end_epoch", "raw_value": "1617463514.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:24:55", "plugin": "core", "name": "start_epoch", "raw_value": "1617463495.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 4, "time_seconds": 38.07545590400696, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "77", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "5f0174789b9aa189"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "27e3a3110d387486"}}, "job": {"model_class": "Job", "id": "c037d0ad7af4b1ea", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:24:39.973189", "create_time": "2021-04-03T15:24:16.105440", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-bksx8", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"77\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat --pe1-2 fastq:/galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat && python '/galaxy/server/database/jobs_directory/000/114/configs/tmpj8f4iirl' < contigs.fasta > '/galaxy/server/database/objects/4/e/6/dataset_4e63301e-86c1-4cc0-a95f-abefd2a1e812.dat' && python '/galaxy/server/database/jobs_directory/000/114/configs/tmpj8f4iirl' < scaffolds.fasta > '/galaxy/server/database/objects/a/5/8/dataset_a582af75-9fb8-4009-9fec-6f36ac70de68.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 131, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 132, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"77\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "5f0174789b9aa189", "src": "hda", "uuid": "72d68134-9754-4df1-9d9a-2c92c6ea3de0"}, "libraries_0|files_0|rev_reads": {"id": "27e3a3110d387486", "src": "hda", "uuid": "f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2"}}, "outputs": {"out_contig_stats": {"id": "1e3011315563a38e", "src": "hda", "uuid": "4e63301e-86c1-4cc0-a95f-abefd2a1e812"}, "out_scaffold_stats": {"id": "5d5f7249a3248950", "src": "hda", "uuid": "a582af75-9fb8-4009-9fec-6f36ac70de68"}, "out_contigs": {"id": "1951aa3f4371e67b", "src": "hda", "uuid": "50995bf6-6b58-43ef-a9d1-38e69ae37eb8"}, "out_scaffolds": {"id": "5bd989e9c4a6a460", "src": "hda", "uuid": "b03b74f2-818e-4956-9824-9699aaa48bfc"}, "out_log": {"id": "430c7190f13890e7", "src": "hda", "uuid": "1928b9b5-af14-46be-be82-10e3af78959a"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/114/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/114/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat']\n      right reads: ['/galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/114/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/114/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/114/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/114/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat\n  0:00:00.439     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\n  0:00:00.866     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.871    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.071    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.071    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.194    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.226    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.246    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.248    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.250    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.252    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.259    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.259    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.259    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat\n  0:00:01.295    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\n  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.328    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.333    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.333    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.349    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.349    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat and /galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\n  0:00:01.383    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.394    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.398    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.426    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.426    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.426    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/114/working/corrected/corrected.yaml\n  0:00:01.429    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/114/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/114/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/114/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.292   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.298     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.476   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.533     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.533     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.533     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.534     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.534     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.534     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.534     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.659     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.660    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.660    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.712    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.712    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.743    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.744    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.744    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.744    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.744    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.744    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.216     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.222    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.566    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.599    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.618    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.618    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.619    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.620    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:03.769    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.770    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.770    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.770    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.770    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:03.770    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.770    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.770    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.779    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.779    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.779    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.781    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.781    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:03.781    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/before_rr.fasta\n  0:00:03.785    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph.fastg\n  0:00:03.789    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/simplified_contigs.fasta\n  0:00:03.792    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/intermediate_contigs.fasta\n  0:00:03.799    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.799    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.799    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.799    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:03.799    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.799    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.872    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.988    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.777    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.777    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:05.784    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.922   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.924   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.928   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.930   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.930   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.930   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.946   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.952   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.970    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.970    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.970    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.970    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.970    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.970    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.971    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.971    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.971    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.971    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.971    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.971    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.971    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.971    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.971    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.971    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.971    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.972    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.972    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:05.974    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/before_rr.fasta\n  0:00:05.978    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph.fastg\n  0:00:05.983    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/114/working//K77/final_contigs.paths\n  0:00:05.991    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/114/working//K77/scaffolds.paths\n  0:00:06.006    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.008    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/114/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/114/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/114/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/114/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/114/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/114/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/114/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/114/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/114/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/114/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat']\n      right reads: ['/galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/114/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/114/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/114/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/114/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat\n  0:00:00.439     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\n  0:00:00.866     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.871    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.071    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.071    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.194    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.226    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.246    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.248    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.250    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.252    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.259    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.259    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.259    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat\n  0:00:01.295    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\n  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.328    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.332    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.333    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.333    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.349    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.349    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.349    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/7/2/d/dataset_72d68134-9754-4df1-9d9a-2c92c6ea3de0.dat and /galaxy/server/database/objects/f/4/a/dataset_f4ab2ae3-6c4f-437b-9e63-86f54f6fe8c2.dat\n  0:00:01.383    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.394    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.398    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.426    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.426    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.426    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/114/working/corrected/corrected.yaml\n  0:00:01.429    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/114/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/114/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/114/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.292   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.298     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.476   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.533     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.533     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.533     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.534     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.534     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.534     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.534     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.659     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.660    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.660    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.712    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.712    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.743    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.744    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.744    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.744    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.744    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.744    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.216     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.222    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.566    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.599    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.618    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.618    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.619    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.620    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:03.769    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.770    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.770    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.770    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.770    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.770    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.770    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:03.770    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.770    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.770    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.779    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.779    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.779    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.781    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.781    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:03.781    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/before_rr.fasta\n  0:00:03.785    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph.fastg\n  0:00:03.789    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/simplified_contigs.fasta\n  0:00:03.792    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/intermediate_contigs.fasta\n  0:00:03.799    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.799    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.799    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.799    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:03.799    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.799    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.872    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.988    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.777    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.777    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:05.784    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.922   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.924   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.928   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.930   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.930   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.930   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.946   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.952   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.970    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.970    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.970    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.970    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.970    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.970    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.970    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.971    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.971    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.971    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.971    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.971    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.971    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.971    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.971    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.971    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.971    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.971    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.972    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.972    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.972    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.972    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.972    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.972    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:05.974    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/114/working//K77/before_rr.fasta\n  0:00:05.978    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/114/working//K77/assembly_graph.fastg\n  0:00:05.983    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/114/working//K77/final_contigs.paths\n  0:00:05.991    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/114/working//K77/scaffolds.paths\n  0:00:06.006    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.008    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/114/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/114/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/114/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/114/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/114/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/114/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/114/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/114/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:24:38", "plugin": "core", "name": "end_epoch", "raw_value": "1617463478.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:24:30", "plugin": "core", "name": "start_epoch", "raw_value": "1617463470.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 5, "time_seconds": 44.40307545661926, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "be2b47e840182aff"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "d1ab669a91c3a7d7"}, "contig_graph_out": true, "scaffold_graph_out": true}, "job": {"model_class": "Job", "id": "f9573de1dc6de80d", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:24:54.295971", "create_time": "2021-04-03T15:24:29.123592", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-s2jfd", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat --pe1-2 fastq:/galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat && python '/galaxy/server/database/jobs_directory/000/117/configs/tmpvadr76ah' < contigs.fasta > '/galaxy/server/database/objects/5/c/6/dataset_5c68497e-1c81-41ff-93d7-a005c632f284.dat' && python '/galaxy/server/database/jobs_directory/000/117/configs/tmpvadr76ah' < scaffolds.fasta > '/galaxy/server/database/objects/b/6/c/dataset_b6cb13ec-ac2c-4f89-89f4-131bfe27de33.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"true\"", "contig_graph_out": "\"true\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 138, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 139, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "be2b47e840182aff", "src": "hda", "uuid": "512af10e-4a52-4a70-8bf7-74f151692887"}, "libraries_0|files_0|rev_reads": {"id": "d1ab669a91c3a7d7", "src": "hda", "uuid": "59680263-50c6-4256-b5a9-379fb1bbb32c"}}, "outputs": {"scaffold_graph": {"id": "7819425f0b3f5c17", "src": "hda", "uuid": "74d88d49-e2a4-4b9d-93ed-94ea2df68987"}, "contig_graph": {"id": "7afc279830952bef", "src": "hda", "uuid": "de8130dc-3eda-4ffd-be5a-d43276c467aa"}, "out_log": {"id": "b1e1921be0a7c384", "src": "hda", "uuid": "ebb4db09-a956-4013-8a08-14899c9e2bbb"}, "out_scaffolds": {"id": "957204fbf281e9d4", "src": "hda", "uuid": "a898e062-00eb-4772-9366-280610982f99"}, "out_contigs": {"id": "5109c6dd0767f7d6", "src": "hda", "uuid": "1cb80b59-3163-4b80-89b4-02eb7e4a02d2"}, "out_scaffold_stats": {"id": "77d86a24c4901a5e", "src": "hda", "uuid": "b6cb13ec-ac2c-4f89-89f4-131bfe27de33"}, "out_contig_stats": {"id": "82b503626c066e6f", "src": "hda", "uuid": "5c68497e-1c81-41ff-93d7-a005c632f284"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/117/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/117/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat']\n      right reads: ['/galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/117/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/117/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/117/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/117/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat\n  0:00:00.525     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\n  0:00:01.011     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.016    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.228    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.228    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.363    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.398    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.419    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.421    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.427    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat\n  0:00:01.486    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\n  0:00:01.537    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.537    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.537    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.541    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.543    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.543    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.559    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.559    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat and /galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\n  0:00:01.596    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.607    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.611    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.638    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.638    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.638    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/117/working/corrected/corrected.yaml\n  0:00:01.642    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/117/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/117/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/117/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.124     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.544     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.545     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.675     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.766    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.767    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.767    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.252     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.257    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.481    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.481    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.621    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.657    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.677    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.679    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.830    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.830    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.830    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.831    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.831    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.831    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.831    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.831    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.831    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.831    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.831    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.831    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.846    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.847    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.847    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.849    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.849    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.850    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/before_rr.fasta\n  0:00:06.854    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph.fastg\n  0:00:06.858    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/simplified_contigs.fasta\n  0:00:06.861    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/intermediate_contigs.fasta\n  0:00:06.867    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.867    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.867    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.867    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.867    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.867    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.942    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.076    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.862    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.862    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.868    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.998   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.001   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.006   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.007   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.007   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.007   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.023   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.031   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.048    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.048    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.048    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.048    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.048    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.048    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.048    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.048    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.052    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.052    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.055    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/before_rr.fasta\n  0:00:09.059    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph.fastg\n  0:00:09.063    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/117/working//K33/final_contigs.paths\n  0:00:09.070    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/117/working//K33/scaffolds.paths\n  0:00:09.084    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.087    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/117/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/117/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/117/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/117/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/117/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/117/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/117/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/117/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/117/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/117/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat']\n      right reads: ['/galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/117/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/117/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/117/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/117/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat\n  0:00:00.525     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\n  0:00:01.011     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.016    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.228    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.228    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.363    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.398    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.419    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.421    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.427    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat\n  0:00:01.486    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\n  0:00:01.537    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.537    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.537    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.541    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.542    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.543    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.543    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.559    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.559    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/1/2/dataset_512af10e-4a52-4a70-8bf7-74f151692887.dat and /galaxy/server/database/objects/5/9/6/dataset_59680263-50c6-4256-b5a9-379fb1bbb32c.dat\n  0:00:01.596    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.607    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.611    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.638    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.638    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.638    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/117/working/corrected/corrected.yaml\n  0:00:01.642    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/117/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/117/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/117/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.124     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.544     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.545     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.675     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.766    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.767    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.767    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.252     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.257    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.481    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.481    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.621    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.657    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.677    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.679    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:06.830    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.830    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.830    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.831    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.831    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.831    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.831    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.831    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.831    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.831    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.831    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.831    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.831    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.846    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.847    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.847    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.849    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.849    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.850    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/before_rr.fasta\n  0:00:06.854    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph.fastg\n  0:00:06.858    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/simplified_contigs.fasta\n  0:00:06.861    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/intermediate_contigs.fasta\n  0:00:06.867    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.867    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.867    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.867    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.867    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.867    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.942    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.076    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.862    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.862    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.868    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.998   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.001   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.006   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.007   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.007   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.007   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.023   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.031   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.048    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.048    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.048    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.048    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.048    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.048    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.048    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.048    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.048    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.048    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.052    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.052    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.052    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.052    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.052    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.052    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.055    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/117/working//K33/before_rr.fasta\n  0:00:09.059    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/117/working//K33/assembly_graph.fastg\n  0:00:09.063    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/117/working//K33/final_contigs.paths\n  0:00:09.070    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/117/working//K33/scaffolds.paths\n  0:00:09.084    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.087    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/117/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/117/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/117/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/117/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/117/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/117/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/117/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/117/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:24:52", "plugin": "core", "name": "end_epoch", "raw_value": "1617463492.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:24:41", "plugin": "core", "name": "start_epoch", "raw_value": "1617463481.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 6, "time_seconds": 63.97527003288269, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "0485e1820a2cb6d2"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "3c5986c208b42371"}}, "job": {"model_class": "Job", "id": "a8b5e36703783ef5", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:25:32.885398", "create_time": "2021-04-03T15:24:43.965062", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-d844p", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat --pe1-2 fastq:/galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat && python '/galaxy/server/database/jobs_directory/000/120/configs/tmpdla9c1rd' < contigs.fasta > '/galaxy/server/database/objects/1/e/9/dataset_1e949cbc-2ec3-407a-90cd-9bc54d1a19ab.dat' && python '/galaxy/server/database/jobs_directory/000/120/configs/tmpdla9c1rd' < scaffolds.fasta > '/galaxy/server/database/objects/8/9/a/dataset_89a0422e-8de9-49e5-8afd-c8a406ed2644.dat'", "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 147, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 148, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "0485e1820a2cb6d2", "src": "hda", "uuid": "2c8186ae-6e1d-4c73-afde-0b45e7179f36"}, "libraries_0|files_0|rev_reads": {"id": "3c5986c208b42371", "src": "hda", "uuid": "e709bcb3-f261-4b7b-850a-926ff4457125"}}, "outputs": {"out_log": {"id": "db3db3917a85f639", "src": "hda", "uuid": "e18b361a-d121-4f73-b08e-75f24df4380a"}, "out_scaffolds": {"id": "a54fba3ac9a8624a", "src": "hda", "uuid": "80b4d61e-9e1b-46e0-8bcd-cdb3b19d3078"}, "out_contigs": {"id": "881439ca874defdb", "src": "hda", "uuid": "239b1f18-cb4b-4c29-85c4-09a546ab8ed3"}, "out_scaffold_stats": {"id": "a414f9db58d27b3c", "src": "hda", "uuid": "89a0422e-8de9-49e5-8afd-c8a406ed2644"}, "out_contig_stats": {"id": "96ea44c01c38c6cc", "src": "hda", "uuid": "1e949cbc-2ec3-407a-90cd-9bc54d1a19ab"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/120/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/120/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat']\n      right reads: ['/galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/120/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/120/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/120/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/120/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat\n  0:00:00.492     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\n  0:00:00.961     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.966    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.184    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.184    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.317    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.353    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.373    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.375    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.380    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.389    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.389    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.389    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat\n  0:00:01.429    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\n  0:00:01.461    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.461    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.461    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.466    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.466    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.483    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.483    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat and /galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\n  0:00:01.514    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.525    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.529    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/120/working/corrected/corrected.yaml\n  0:00:01.564    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/120/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/120/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/120/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.298   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.305     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.482   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.540     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.540     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.541     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.669     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.671    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.671    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.727    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.727    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.761    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.761    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.761    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.761    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.762    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.762    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.251     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.611    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.651    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.678    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.678    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.680    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:08.763    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.764    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.764    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.764    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.764    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:08.764    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.764    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.764    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.777    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.777    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.777    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.780    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.780    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.780    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/before_rr.fasta\n  0:00:08.785    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph.fastg\n  0:00:08.789    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/simplified_contigs.fasta\n  0:00:08.793    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/intermediate_contigs.fasta\n  0:00:08.802    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.802    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.802    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.802    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.802    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.802    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.867    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.986    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:10.764    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.893   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.896   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.901   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.902   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.902   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.903   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.916   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.923   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.939    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.939    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.939    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.939    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.939    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.939    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.939    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.940    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.940    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.940    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.940    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.940    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.940    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.940    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.940    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.940    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.941    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.941    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.942    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/before_rr.fasta\n  0:00:10.947    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph.fastg\n  0:00:10.951    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/120/working//K33/final_contigs.paths\n  0:00:10.958    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/120/working//K33/scaffolds.paths\n  0:00:10.973    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.974    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/120/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/120/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/120/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/120/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/120/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/120/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/120/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/120/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/120/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/120/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat']\n      right reads: ['/galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/120/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/120/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/120/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/120/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat\n  0:00:00.492     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\n  0:00:00.961     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.966    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.184    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.184    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.317    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.353    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.373    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.375    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.380    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.389    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.389    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.389    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat\n  0:00:01.429    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\n  0:00:01.461    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.461    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.461    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.465    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.466    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.466    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.483    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.483    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/c/8/dataset_2c8186ae-6e1d-4c73-afde-0b45e7179f36.dat and /galaxy/server/database/objects/e/7/0/dataset_e709bcb3-f261-4b7b-850a-926ff4457125.dat\n  0:00:01.514    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.525    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.529    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/120/working/corrected/corrected.yaml\n  0:00:01.564    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/120/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/120/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/120/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.298   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.305     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.482   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.540     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.540     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.541     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.669     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.671    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.671    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.727    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.727    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.761    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.761    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.761    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.761    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.762    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.762    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.251     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.256    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.611    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.651    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.678    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.678    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.680    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:08.763    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.764    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.764    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.764    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.764    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.764    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.764    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:08.764    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.764    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.764    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.777    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.777    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.777    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.780    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.780    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.780    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/before_rr.fasta\n  0:00:08.785    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph.fastg\n  0:00:08.789    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/simplified_contigs.fasta\n  0:00:08.793    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/intermediate_contigs.fasta\n  0:00:08.802    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.802    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.802    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.802    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.802    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.802    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.867    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.986    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:10.764    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.893   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.896   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.901   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.902   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.902   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.903   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.916   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.923   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.939    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.939    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.939    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.939    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.939    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.939    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.939    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.939    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.940    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.940    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.940    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.940    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.940    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.940    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.940    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.940    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.940    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.941    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.941    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.941    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.941    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.941    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.941    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.942    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/120/working//K33/before_rr.fasta\n  0:00:10.947    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/120/working//K33/assembly_graph.fastg\n  0:00:10.951    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/120/working//K33/final_contigs.paths\n  0:00:10.958    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/120/working//K33/scaffolds.paths\n  0:00:10.973    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.974    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/120/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/120/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/120/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/120/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/120/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/120/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/120/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/120/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "13 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "13.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:25:30", "plugin": "core", "name": "end_epoch", "raw_value": "1617463530.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:25:17", "plugin": "core", "name": "start_epoch", "raw_value": "1617463517.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 7, "time_seconds": 69.15980386734009, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "0b8cbb4ce5ed1c91"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "73c3e86002579bc1"}}, "job": {"model_class": "Job", "id": "dbe4dbc92451914c", "state": "ok", "exit_code": 0, "update_time": "2021-04-03T15:25:49.526353", "create_time": "2021-04-03T15:24:54.395023", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "36561a8e92cf2cc1", "external_id": "gxy-zg8tw", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat && python '/galaxy/server/database/jobs_directory/000/123/configs/tmpzjm1kele' < contigs.fasta > '/galaxy/server/database/objects/2/a/f/dataset_2af08cfd-2dd2-4332-9842-0cd20ccc0869.dat' && python '/galaxy/server/database/jobs_directory/000/123/configs/tmpzjm1kele' < scaffolds.fasta > '/galaxy/server/database/objects/0/4/6/dataset_04667980-6d58-432d-8e34-40c083b9ebd1.dat'", "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "0b8cbb4ce5ed1c91", "src": "hda", "uuid": "d5505a9e-74fa-47cc-aa09-952a3c3eafbc"}, "libraries_0|files_0|rev_reads": {"id": "73c3e86002579bc1", "src": "hda", "uuid": "e81b5da1-5ee0-474a-9979-04ac5252f074"}}, "outputs": {"out_log": {"id": "ea40be29e1287674", "src": "hda", "uuid": "26bc446e-c654-4403-962d-7090da3ce90c"}, "out_scaffolds": {"id": "5c4180e0fec862de", "src": "hda", "uuid": "aa99c203-ac97-4e14-a6b5-d4388e9860e7"}, "out_contigs": {"id": "c6ac3bd55ad694fb", "src": "hda", "uuid": "0f5972de-20dd-4996-bbf7-b6b094a5efce"}, "out_scaffold_stats": {"id": "19858535b8549a0c", "src": "hda", "uuid": "04667980-6d58-432d-8e34-40c083b9ebd1"}, "out_contig_stats": {"id": "db1fdda2d083cf48", "src": "hda", "uuid": "2af08cfd-2dd2-4332-9842-0cd20ccc0869"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/123/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/123/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat']\n      right reads: ['/galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/123/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/123/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/123/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/123/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat\n  0:00:00.530     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\n  0:00:01.073     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.078    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.418    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.418    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.574    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.610    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.631    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.633    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.635    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.638    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.648    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.648    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.648    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat\n  0:00:01.704    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\n  0:00:01.743    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.744    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.744    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.762    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.764    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.764    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.764    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.765    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.807    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.807    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.807    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.807    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat and /galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\n  0:00:01.844    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.856    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.860    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.888    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.888    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.888    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/123/working/corrected/corrected.yaml\n  0:00:01.892    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/123/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/123/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/123/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.123    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.317   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.323     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.506   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.570     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.570     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.570     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.571     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.572     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.572     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.572     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.713     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.716    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.716    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.777    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.777    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.812    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.813    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.813    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.341     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.356    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.664    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.664    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.828    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.867    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.893    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.893    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.895    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.895    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:07.503    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.506    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.506    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.506    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.506    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.506    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.506    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.506    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.506    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.507    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.507    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.507    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.507    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.507    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.507    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.521    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.521    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.521    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.525    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.525    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.526    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/before_rr.fasta\n  0:00:07.530    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph.fastg\n  0:00:07.542    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/simplified_contigs.fasta\n  0:00:07.546    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/intermediate_contigs.fasta\n  0:00:07.553    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.553    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.553    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.553    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.553    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.553    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.627    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.782    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.540    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.540    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.549    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.708   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.710   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.715   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.738   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.757   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.777    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.777    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.777    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.777    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.777    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.777    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.777    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.777    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.778    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.779    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.779    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.780    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/before_rr.fasta\n  0:00:09.784    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph.fastg\n  0:00:09.789    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/123/working//K33/final_contigs.paths\n  0:00:09.799    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/123/working//K33/scaffolds.paths\n  0:00:09.812    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.815    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/123/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/123/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/123/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/123/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/123/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/123/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/123/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/123/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/123/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/123/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat']\n      right reads: ['/galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/123/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/123/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/123/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/123/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat\n  0:00:00.530     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\n  0:00:01.073     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.078    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.418    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.418    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.574    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.610    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.631    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.633    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.635    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.638    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.648    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.648    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.648    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat\n  0:00:01.704    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\n  0:00:01.743    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.744    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.744    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.762    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.763    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.764    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.764    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.764    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.765    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.807    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.807    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.807    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.807    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/5/5/dataset_d5505a9e-74fa-47cc-aa09-952a3c3eafbc.dat and /galaxy/server/database/objects/e/8/1/dataset_e81b5da1-5ee0-474a-9979-04ac5252f074.dat\n  0:00:01.844    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.856    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.860    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.888    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.888    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.888    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/123/working/corrected/corrected.yaml\n  0:00:01.892    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/123/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/123/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/123/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.123    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.317   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.323     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.506   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.570     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.570     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.570     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.571     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.572     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.572     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.572     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.713     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.716    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.716    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.777    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.777    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.812    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.813    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.813    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.813    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.814    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.341     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.356    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.664    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.664    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.828    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.867    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.893    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.893    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.895    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.895    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n 0:00:07.503    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.506    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.506    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.506    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.506    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.506    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.506    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.506    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.506    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.507    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.507    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.507    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.507    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.507    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.507    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.507    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.521    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.521    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.521    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.525    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.525    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.526    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/before_rr.fasta\n  0:00:07.530    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph.fastg\n  0:00:07.542    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/simplified_contigs.fasta\n  0:00:07.546    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/intermediate_contigs.fasta\n  0:00:07.553    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.553    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.553    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.553    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.553    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.553    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.627    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.782    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.540    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.540    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.549    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.708   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.710   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.715   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.723   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.738   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.757   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.777    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.777    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.777    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.777    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.777    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.777    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.777    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.777    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.777    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.777    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.778    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.779    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.779    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.779    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.779    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.779    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.779    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.780    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/123/working//K33/before_rr.fasta\n  0:00:09.784    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/123/working//K33/assembly_graph.fastg\n  0:00:09.789    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/123/working//K33/final_contigs.paths\n  0:00:09.799    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/123/working//K33/scaffolds.paths\n  0:00:09.812    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.815    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/123/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/123/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/123/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/123/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/123/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/123/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/123/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/123/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "13 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "13.0000000"}, {"title": "Job End Time", "value": "2021-04-03 15:25:47", "plugin": "core", "name": "end_epoch", "raw_value": "1617463547.0000000"}, {"title": "Job Start Time", "value": "2021-04-03 15:25:34", "plugin": "core", "name": "start_epoch", "raw_value": "1617463534.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}]}