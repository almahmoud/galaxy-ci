<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Test Results (powered by Planemo)"
           tests="36"
           errors="2"
           failures="0"
           skip="0">
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #1)" name="0" time="38.492048263549805">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/9/9/a/dataset_99aabc3c-438b-4686-8dc6-e4f9e6d9db6f.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 6: 70%  bucket 5: 60%  bucket 6: 80%  bucket 5: 70%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  bucket 7: 10%  Calculating Z arrays for bucket 8  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 7: 60%  bucket 8: 30%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 7: 90%  bucket 8: 50%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 9:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Entering block accumulator loop for bucket 13:  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 14: 100%  bucket 13: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #2)" name="1" time="47.034873723983765">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/8/1/a/dataset_81a68f4c-2852-43cd-a784-8760d77aec88.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  bucket 2: 80%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 850 for bucket 2Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 3: 40%  bucket 4: 20%  bucket 3: 50%  bucket 3: 60%  bucket 4: 30%  bucket 3: 70%  bucket 4: 40%  bucket 3: 80%  bucket 4: 50%  bucket 3: 90%  bucket 4: 60%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  bucket 5: 10%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 6: 30%  bucket 5: 70%  bucket 5: 80%  bucket 6: 40%  bucket 5: 90%  bucket 5: 100%  bucket 6: 50%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  Sorting block time: 00:00:00Returning block of 547 for bucket 5  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Entering block accumulator loop for bucket 9:  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 7: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 8: 60%  bucket 7: 50%  bucket 8: 70%  bucket 7: 60%  bucket 8: 80%  bucket 7: 70%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #3)" name="2" time="42.91876721382141">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/8/1/a/dataset_81a68f4c-2852-43cd-a784-8760d77aec88.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 4: 70%  bucket 3: 60%  bucket 4: 80%  bucket 3: 70%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  bucket 5: 100%  Sorting block of length 1246 for bucket 6  Sorting block of length 546 for bucket 5  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 13: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 13: 70%  bucket 14: 90%  bucket 13: 80%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  bucket 9: 20%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 11: 50%  bucket 12: 40%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 967 for bucket 14Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #4)" name="3" time="47.58471083641052">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/b/f/dataset_1bf9791c-2130-4c07-810a-a929866e5a9f.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 7: 50%  bucket 8: 60%  bucket 7: 60%  bucket 8: 70%  bucket 7: 70%  bucket 8: 80%  bucket 7: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  bucket 7: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 12: 40%  bucket 11: 70%  bucket 12: 50%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%Getting block 14 of 15  bucket 13: 40%  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 50%  bucket 14: 10%  bucket 13: 60%  bucket 14: 20%  bucket 13: 70%  bucket 14: 30%  bucket 13: 80%  bucket 14: 40%  bucket 13: 90%  bucket 14: 50%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%Getting block 6 of 15  bucket 5: 30%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 40%  bucket 6: 10%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 6: 30%  bucket 5: 70%  bucket 6: 40%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  bucket 6: 70%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #5)" name="4" time="48.81006646156311">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/b/f/dataset_1bf9791c-2130-4c07-810a-a929866e5a9f.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 1: 60%  bucket 2: 30%  bucket 1: 70%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%  bucket 3: 40%  bucket 3: 50%  bucket 3: 60%  bucket 3: 70%  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 4: 20%  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index3 reads; of these:  3 (100.00%) were paired; of these:    2 (66.67%) aligned concordantly 0 times    1 (33.33%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    2 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    2 pairs aligned 0 times concordantly or discordantly; of these:      4 mates make up the pairs; of these:        3 (75.00%) aligned 0 times        1 (25.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times50.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #6)" name="5" time="63.41877889633179">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/f/0/2/dataset_f029985d-d641-4d79-83ae-49746978b474.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Returning block of 547 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15Getting block 12 of 15  Reserving size (1554) for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15Getting block 2 of 15  Reserving size (1554) for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  Sorting block time: 00:00:00Returning block of 390 for bucket 1  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  bucket 7: 10%  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Entering block accumulator loop for bucket 9:  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  bucket 11: 10%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 11: 70%  bucket 12: 30%  bucket 11: 80%  bucket 12: 40%  bucket 11: 90%  bucket 11: 100%  bucket 12: 50%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 13:  bucket 14: 10%  bucket 13: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 14: 40%  bucket 13: 30%  bucket 14: 50%  bucket 13: 40%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 14: 90%  bucket 13: 70%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #7)" name="6" time="59.4594087600708">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/f/0/2/dataset_f029985d-d641-4d79-83ae-49746978b474.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 15  Reserving size (1554) for bucket 2  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%  bucket 1: 40%  bucket 1: 50%  Calculating Z arrays for bucket 2  bucket 1: 60%  bucket 1: 70%  bucket 1: 80%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  Entering block accumulator loop for bucket 2:  bucket 2: 10%  bucket 2: 20%  bucket 2: 30%  bucket 2: 40%  bucket 2: 50%  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 850 for bucket 2Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 4: 70%  bucket 3: 60%  bucket 4: 80%  bucket 3: 70%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  bucket 9: 10%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 10: 50%  bucket 9: 70%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 12: 60%  bucket 11: 40%  bucket 12: 70%  bucket 11: 50%  bucket 12: 80%  bucket 12: 90%  bucket 11: 60%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  Sorting block time: 00:00:00Returning block of 717 for bucket 12  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 15  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 1: 50%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 3: 80%  bucket 4: 50%  bucket 3: 90%  bucket 4: 60%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  bucket 13: 10%  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 967 for bucket 14Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #8)" name="7" time="63.902596950531006">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/0/6/9/dataset_0697634b-f862-4b52-92df-3a91d0b48b0c.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 2: 90%  bucket 1: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  bucket 3: 10%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Entering block accumulator loop for bucket 7:  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 8: 50%  bucket 7: 70%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  bucket 9: 10%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 10: 10%  bucket 9: 60%  bucket 10: 20%  bucket 9: 70%  bucket 10: 30%  bucket 9: 80%  bucket 10: 40%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  Sorting block time: 00:00:00  (Using difference cover)Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 12 of 15Getting block 11 of 15  Reserving size (1554) for bucket 12  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 12  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 11: 30%  bucket 12: 40%  bucket 11: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 12: 100%  bucket 11: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 14: 40%  bucket 13: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 13: 100%  bucket 14: 90%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 1: 60%  bucket 2: 30%  bucket 2: 40%  bucket 1: 70%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  Sorting block time: 00:00:00Returning block of 390 for bucket 1  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 3: 40%  bucket 4: 10%  bucket 3: 50%  bucket 4: 20%  bucket 3: 60%  bucket 3: 70%  bucket 4: 30%  bucket 3: 80%  bucket 3: 90%  bucket 4: 40%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 5: 70%  bucket 6: 60%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 6: 100%  bucket 5: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #9)" name="8" time="62.46684765815735">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/0/6/9/dataset_0697634b-f862-4b52-92df-3a91d0b48b0c.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%  bucket 3: 40%  bucket 3: 50%  bucket 3: 60%  bucket 3: 70%  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 4: 20%  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 8: 80%  bucket 7: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  bucket 10: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%  bucket 3: 40%Getting block 4 of 15  Reserving size (1554) for bucket 4  bucket 3: 50%  Calculating Z arrays for bucket 4  bucket 3: 60%  Entering block accumulator loop for bucket 4:  bucket 3: 70%  bucket 3: 80%  bucket 4: 10%  bucket 3: 90%  bucket 4: 20%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 30%  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 7: 50%  bucket 8: 60%  bucket 7: 60%  bucket 8: 70%  bucket 7: 70%  bucket 8: 80%  bucket 7: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 991 for bucket 12Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 30%  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  bucket 14: 80%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #10)" name="9" time="54.77489709854126">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/d/a/4/dataset_da412dfa-c71f-40b0-98ea-bad03d4fb7c2.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  Entering block accumulator loop for bucket 7:  bucket 8: 10%  bucket 7: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 7: 50%  bucket 8: 60%  bucket 8: 70%  bucket 7: 60%  bucket 8: 80%  bucket 8: 90%  bucket 7: 70%  bucket 8: 100%  bucket 7: 80%  Sorting block of length 543 for bucket 8  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  bucket 9: 10%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 1: 50%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  bucket 4: 80%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 7: 80%  bucket 8: 50%  bucket 7: 90%  bucket 7: 100%  bucket 8: 60%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  bucket 9: 10%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 9: 50%  bucket 10: 20%  bucket 9: 60%  bucket 10: 30%  bucket 9: 70%  bucket 9: 80%  bucket 10: 40%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Entering block accumulator loop for bucket 11:  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  bucket 12: 80%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 13: 80%  bucket 14: 50%  bucket 13: 90%  bucket 14: 60%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2 (Test #1)" name="0" time="51.68998980522156">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2 (Test #2)" name="1" time="25.39783215522766">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2 (Test #1)" name="0" time="63.8694794178009">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.73 seconds elapse.[bwa_index] Update BWT... 0.02 sec[bwa_index] Pack forward-only FASTA... 0.01 sec[bwa_index] Construct SA from BWT and Occ... 0.18 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.030 sec; CPU: 0.957 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.027 CPU sec, 0.015 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.112 sec; CPU: 0.035 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2 (Test #2)" name="1" time="54.56816363334656">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.80 seconds elapse.[bwa_index] Update BWT... 0.01 sec[bwa_index] Pack forward-only FASTA... 0.01 sec[bwa_index] Construct SA from BWT and Occ... 0.19 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.148 sec; CPU: 1.034 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.029 CPU sec, 0.015 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.116 sec; CPU: 0.036 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #1)" name="0" time="29.487794637680054">
        
            
            <system-out><![CDATA[
            INFO [2021-04-10 15:23:01,780]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bamINFO [2021-04-10 15:23:01,795]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-10 15:23:05,118]: Executing lofreq filter -i /tmp/lofreq2_call_paralleljrxx0d1y/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #2)" name="1" time="24.51275396347046">
        
            
            <system-out><![CDATA[
            INFO [2021-04-10 15:23:12,147]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-04-10 15:23:12,160]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-10 15:23:15,780]: Executing lofreq filter -i /tmp/lofreq2_call_paralleljen52d74/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #3)" name="2" time="40.585349559783936">
        
            
            <system-out><![CDATA[
            INFO [2021-04-10 15:23:41,990]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-04-10 15:23:42,003]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-10 15:23:45,778]: Executing lofreq filter -i /tmp/lofreq2_call_parallelrd3axvym/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #4)" name="3" time="35.752196311950684">
        
            
            <system-out><![CDATA[
            INFO [2021-04-10 15:23:38,525]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-04-10 15:23:38,537]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-10 15:23:41,642]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #5)" name="4" time="33.6493604183197">
        
            
            <system-out><![CDATA[
            INFO [2021-04-10 15:23:45,757]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-04-10 15:23:45,773]: Adding 3 commands to mp-poolNumber of substitution tests performed: 0Number of indel tests performed: 9INFO [2021-04-10 15:23:50,699]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #1)" name="0" time="45.473103761672974">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.72] collected minimizers[M::mm_idx_gen::0.006*0.97] sorted minimizers[M::main::0.006*0.97] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*0.97] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*0.97] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.011*1.08] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/5/3/e/dataset_53e179e0-0199-4195-993a-26e06f3b273b.dat[M::main] Real time: 0.012 sec; CPU: 0.013 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #2)" name="1" time="46.400054931640625">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.006*0.81] collected minimizers[M::mm_idx_gen::0.007*1.00] sorted minimizers[M::main::0.007*1.00] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.007*1.00] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.007*1.00] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.012*1.07] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/5/3/e/dataset_53e179e0-0199-4195-993a-26e06f3b273b.dat[M::main] Real time: 0.014 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #3)" name="2" time="53.888453245162964">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*0.84] collected minimizers[M::mm_idx_gen::0.004*0.97] sorted minimizers[M::main::0.004*0.97] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*0.97] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*0.97] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.015*1.39] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/b/d/9/dataset_bd9fb9be-04f3-4c64-a6d6-14ed12a5973a.dat /galaxy/server/database/objects/8/d/f/dataset_8dfb5fd7-d877-4d57-9cb5-43ec1861d00a.dat[M::main] Real time: 0.017 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #4)" name="3" time="57.280542612075806">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*0.87] collected minimizers[M::mm_idx_gen::0.005*1.13] sorted minimizers[M::main::0.005*1.13] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.13] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.12] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.019*1.42] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/b/3/f/dataset_b3fb45ce-9660-4262-b1e2-76b1ec7b7d30.dat /galaxy/server/database/objects/8/d/f/dataset_8dfb5fd7-d877-4d57-9cb5-43ec1861d00a.dat[M::main] Real time: 0.020 sec; CPU: 0.028 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #5)" name="4" time="30.94200372695923">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*0.88] collected minimizers[M::mm_idx_gen::0.005*1.08] sorted minimizers[M::main::0.005*1.08] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.08] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.08] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.016*1.37] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/f/4/2/dataset_f422dcbc-a32f-4de1-a7b1-e2838aa5cf7f.dat /galaxy/server/database/objects/4/c/9/dataset_4c9b88b5-9119-4449-9a7f-923d683b0727.dat[M::main] Real time: 0.017 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #6)" name="5" time="12.671966791152954">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: dm3,sarHar1,monDom1,canFam2,speTri2,danRer6,danRer10,panTro1canon,oryLat2,xenTro1,cb3canon,cb3full,droWil1,mm8,droSim1,mm7canon,rheMac3,hg18,apiMel1,burkPseu_668,ce4,rheMac2,ce5,oryLat1,allMis1,geoFor1,danRer2,lMaj5,papAnu2,felCat4,oryLat2canon,droGri2,criGri1,PhumU1,caeJap3,hg18chr21,sorAra1,Ptrichocarpa_156,rn3canon,latCha1,panTro2canon,canFam3,taeGut1canon,cavPor3,Arabidopsis_thaliana_TAIR9,echTel1,bosTauMd3,pseuAeru_PAO1,aptMan1,caePb1,panPan1,tarSyr1,equCab2chrM,aplCal1,Hydra_JCVI,mm10,panTro3canon,hg17,CpipJ1,micMur1,petMar1,hg19chrX,bosTau5,panTro4,eschColi_K12_W3110,eschColi_O157H7_TW14359,droVir3,calJac3,susScr3,gasAcu1,otoGar3,burkPseu_1106A,Bombyx_mori_p50T_2.0,sacCer2,taeGut2,hg19female,hg17canon,rn6,nomLeu1,ce3,galGal4,ce10,droVir1,caeJap2,calJac3canon,Homo_sapiens_AK1,ornAna1,eschColi_K12,droMoj3,danRer5,mm9female,venter1,hg38,galGal3canon,panTro2,bosTau3,droVir2,pseuAeru_PA7,oryCun1,panTro1,caeRem3,eschColi_CFT073,felCat8,turTru2,loxAfr1,danRer7,xenTro2,Arabidopsis_thaliana_TAIR10,droMoj1,eschColi_APEC_O1,equCab2,droGri1,Araly1,felCat3,fr2,Zea_mays_B73_RefGen_v2,ci2full,droYak1,braFlo1,dasNov3,hg19chrM,bosTau2,oryza_sativa_japonica_nipponbare_IRGSP4.0,hg38canon,fr1,danRer3,saiBol1,Xanthomonas_oryzae_KACC10331,bosTau8,galGal2canon,hg18nohaps,bosTau4,burkPseu_1710B,dp3,hg_g1k_v37,hg38female,bordBron,Tcacao_1.0,droAna3,droMoj2,Xanthomonas_oryzae_MAFF_311018,Xanthomonas_oryzae_PXO99A,calJac1,droPer1,strPur3,mm8canon,Amel_4.5,felCat4canon,droAna1,droAna2,baciSubt,nomLeu3,caeRem1,hetGla1,eschColi_O157H7,Schizosaccharomyces_pombe_1.1,Homo_sapiens_nuHg19_mtrCRS,caeJap1,chrPic1,danRer4,ce8,apiMel4,pseuAeru_UCBPP_PA14,dm2,cerSim1,panTro3full,vicPac2,dp4,AgamP3,rn4,choHof1,gadMor1,droEre1,sacCer1,musFur1,strPur2,sacCer3,mm7,tetNig1,triCas2,ente638,anoCar1,apiMel2,priPac1,monDom5,dm6,oviAri1,loxAfr3,ailMel1,monDom4,eriEur1,27835,ponAbe2,susScr1,xenTro3,vicPac1,caeJap4,anoGam1,oryCun2,mm9,hg18canon,anoCar2,eschColi_K12_DH10B,tetNig1canon,gorGor3,papHam1,dasNov1,melUnd1,canFam1,nomLeu2,droSec1,rn4canon,equCab1,caeRem4,hg19,tetNig2,bosTau6,Tcas_3.0,ce7,felCat5,hg19_rCRS_pUC18_phiX174,dipOrd1,rn3,hg19canon,bosTau7,galGal3,rn5,tetNig2canon,melGal1,pUC18,ce6,caePb2,ci2canon,taeGut1,ce2,phiX,tupBel1,galGal2,Sscrofa9.58,ce9,caeRem2,otoGar1,susScr2,mm9canon,borEut13,apiMel3,IscaW1,droYak2,caePb3,eschColi_O157H7_EC4115,droEre2,eschColi_O157H7_EDL933,myoLuc2,Spur_v2.6,strePneu_R6,AaegL1,burkPseu_K96243)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: dm3,sarHar1,monDom1,canFam2,speTri2,danRer6,danRer10,panTro1canon,oryLat2,xenTro1,cb3canon,cb3full,droWil1,mm8,droSim1,mm7canon,rheMac3,hg18,apiMel1,burkPseu_668,ce4,rheMac2,ce5,oryLat1,allMis1,geoFor1,danRer2,lMaj5,papAnu2,felCat4,oryLat2canon,droGri2,criGri1,PhumU1,caeJap3,hg18chr21,sorAra1,Ptrichocarpa_156,rn3canon,latCha1,panTro2canon,canFam3,taeGut1canon,cavPor3,Arabidopsis_thaliana_TAIR9,echTel1,bosTauMd3,pseuAeru_PAO1,aptMan1,caePb1,panPan1,tarSyr1,equCab2chrM,aplCal1,Hydra_JCVI,mm10,panTro3canon,hg17,CpipJ1,micMur1,petMar1,hg19chrX,bosTau5,panTro4,eschColi_K12_W3110,eschColi_O157H7_TW14359,droVir3,calJac3,susScr3,gasAcu1,otoGar3,burkPseu_1106A,Bombyx_mori_p50T_2.0,sacCer2,taeGut2,hg19female,hg17canon,rn6,nomLeu1,ce3,galGal4,ce10,droVir1,caeJap2,calJac3canon,Homo_sapiens_AK1,ornAna1,eschColi_K12,droMoj3,danRer5,mm9female,venter1,hg38,galGal3canon,panTro2,bosTau3,droVir2,pseuAeru_PA7,oryCun1,panTro1,caeRem3,eschColi_CFT073,felCat8,turTru2,loxAfr1,danRer7,xenTro2,Arabidopsis_thaliana_TAIR10,droMoj1,eschColi_APEC_O1,equCab2,droGri1,Araly1,felCat3,fr2,Zea_mays_B73_RefGen_v2,ci2full,droYak1,braFlo1,dasNov3,hg19chrM,bosTau2,oryza_sativa_japonica_nipponbare_IRGSP4.0,hg38canon,fr1,danRer3,saiBol1,Xanthomonas_oryzae_KACC10331,bosTau8,galGal2canon,hg18nohaps,bosTau4,burkPseu_1710B,dp3,hg_g1k_v37,hg38female,bordBron,Tcacao_1.0,droAna3,droMoj2,Xanthomonas_oryzae_MAFF_311018,Xanthomonas_oryzae_PXO99A,calJac1,droPer1,strPur3,mm8canon,Amel_4.5,felCat4canon,droAna1,droAna2,baciSubt,nomLeu3,caeRem1,hetGla1,eschColi_O157H7,Schizosaccharomyces_pombe_1.1,Homo_sapiens_nuHg19_mtrCRS,caeJap1,chrPic1,danRer4,ce8,apiMel4,pseuAeru_UCBPP_PA14,dm2,cerSim1,panTro3full,vicPac2,dp4,AgamP3,rn4,choHof1,gadMor1,droEre1,sacCer1,musFur1,strPur2,sacCer3,mm7,tetNig1,triCas2,ente638,anoCar1,apiMel2,priPac1,monDom5,dm6,oviAri1,loxAfr3,ailMel1,monDom4,eriEur1,27835,ponAbe2,susScr1,xenTro3,vicPac1,caeJap4,anoGam1,oryCun2,mm9,hg18canon,anoCar2,eschColi_K12_DH10B,tetNig1canon,gorGor3,papHam1,dasNov1,melUnd1,canFam1,nomLeu2,droSec1,rn4canon,equCab1,caeRem4,hg19,tetNig2,bosTau6,Tcas_3.0,ce7,felCat5,hg19_rCRS_pUC18_phiX174,dipOrd1,rn3,hg19canon,bosTau7,galGal3,rn5,tetNig2canon,melGal1,pUC18,ce6,caePb2,ci2canon,taeGut1,ce2,phiX,tupBel1,galGal2,Sscrofa9.58,ce9,caeRem2,otoGar1,susScr2,mm9canon,borEut13,apiMel3,IscaW1,droYak2,caePb3,eschColi_O157H7_EC4115,droEre2,eschColi_O157H7_EDL933,myoLuc2,Spur_v2.6,strePneu_R6,AaegL1,burkPseu_K96243)", "inputs": {  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "e8a47a300eaf494a",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 5, "time_seconds": 12.671966791152954, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #7)" name="6" time="10.736075401306152">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: dm3,sarHar1,monDom1,canFam2,speTri2,danRer6,danRer10,panTro1canon,oryLat2,xenTro1,cb3canon,cb3full,droWil1,mm8,droSim1,mm7canon,rheMac3,hg18,apiMel1,burkPseu_668,ce4,rheMac2,ce5,oryLat1,allMis1,geoFor1,danRer2,lMaj5,papAnu2,felCat4,oryLat2canon,droGri2,criGri1,PhumU1,caeJap3,hg18chr21,sorAra1,Ptrichocarpa_156,rn3canon,latCha1,panTro2canon,canFam3,taeGut1canon,cavPor3,Arabidopsis_thaliana_TAIR9,echTel1,bosTauMd3,pseuAeru_PAO1,aptMan1,caePb1,panPan1,tarSyr1,equCab2chrM,aplCal1,Hydra_JCVI,mm10,panTro3canon,hg17,CpipJ1,micMur1,petMar1,hg19chrX,bosTau5,panTro4,eschColi_K12_W3110,eschColi_O157H7_TW14359,droVir3,calJac3,susScr3,gasAcu1,otoGar3,burkPseu_1106A,Bombyx_mori_p50T_2.0,sacCer2,taeGut2,hg19female,hg17canon,rn6,nomLeu1,ce3,galGal4,ce10,droVir1,caeJap2,calJac3canon,Homo_sapiens_AK1,ornAna1,eschColi_K12,droMoj3,danRer5,mm9female,venter1,hg38,galGal3canon,panTro2,bosTau3,droVir2,pseuAeru_PA7,oryCun1,panTro1,caeRem3,eschColi_CFT073,felCat8,turTru2,loxAfr1,danRer7,xenTro2,Arabidopsis_thaliana_TAIR10,droMoj1,eschColi_APEC_O1,equCab2,droGri1,Araly1,felCat3,fr2,Zea_mays_B73_RefGen_v2,ci2full,droYak1,braFlo1,dasNov3,hg19chrM,bosTau2,oryza_sativa_japonica_nipponbare_IRGSP4.0,hg38canon,fr1,danRer3,saiBol1,Xanthomonas_oryzae_KACC10331,bosTau8,galGal2canon,hg18nohaps,bosTau4,burkPseu_1710B,dp3,hg_g1k_v37,hg38female,bordBron,Tcacao_1.0,droAna3,droMoj2,Xanthomonas_oryzae_MAFF_311018,Xanthomonas_oryzae_PXO99A,calJac1,droPer1,strPur3,mm8canon,Amel_4.5,felCat4canon,droAna1,droAna2,baciSubt,nomLeu3,caeRem1,hetGla1,eschColi_O157H7,Schizosaccharomyces_pombe_1.1,Homo_sapiens_nuHg19_mtrCRS,caeJap1,chrPic1,danRer4,ce8,apiMel4,pseuAeru_UCBPP_PA14,dm2,cerSim1,panTro3full,vicPac2,dp4,AgamP3,rn4,choHof1,gadMor1,droEre1,sacCer1,musFur1,strPur2,sacCer3,mm7,tetNig1,triCas2,ente638,anoCar1,apiMel2,priPac1,monDom5,dm6,oviAri1,loxAfr3,ailMel1,monDom4,eriEur1,27835,ponAbe2,susScr1,xenTro3,vicPac1,caeJap4,anoGam1,oryCun2,mm9,hg18canon,anoCar2,eschColi_K12_DH10B,tetNig1canon,gorGor3,papHam1,dasNov1,melUnd1,canFam1,nomLeu2,droSec1,rn4canon,equCab1,caeRem4,hg19,tetNig2,bosTau6,Tcas_3.0,ce7,felCat5,hg19_rCRS_pUC18_phiX174,dipOrd1,rn3,hg19canon,bosTau7,galGal3,rn5,tetNig2canon,melGal1,pUC18,ce6,caePb2,ci2canon,taeGut1,ce2,phiX,tupBel1,galGal2,Sscrofa9.58,ce9,caeRem2,otoGar1,susScr2,mm9canon,borEut13,apiMel3,IscaW1,droYak2,caePb3,eschColi_O157H7_EC4115,droEre2,eschColi_O157H7_EDL933,myoLuc2,Spur_v2.6,strePneu_R6,AaegL1,burkPseu_K96243)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: dm3,sarHar1,monDom1,canFam2,speTri2,danRer6,danRer10,panTro1canon,oryLat2,xenTro1,cb3canon,cb3full,droWil1,mm8,droSim1,mm7canon,rheMac3,hg18,apiMel1,burkPseu_668,ce4,rheMac2,ce5,oryLat1,allMis1,geoFor1,danRer2,lMaj5,papAnu2,felCat4,oryLat2canon,droGri2,criGri1,PhumU1,caeJap3,hg18chr21,sorAra1,Ptrichocarpa_156,rn3canon,latCha1,panTro2canon,canFam3,taeGut1canon,cavPor3,Arabidopsis_thaliana_TAIR9,echTel1,bosTauMd3,pseuAeru_PAO1,aptMan1,caePb1,panPan1,tarSyr1,equCab2chrM,aplCal1,Hydra_JCVI,mm10,panTro3canon,hg17,CpipJ1,micMur1,petMar1,hg19chrX,bosTau5,panTro4,eschColi_K12_W3110,eschColi_O157H7_TW14359,droVir3,calJac3,susScr3,gasAcu1,otoGar3,burkPseu_1106A,Bombyx_mori_p50T_2.0,sacCer2,taeGut2,hg19female,hg17canon,rn6,nomLeu1,ce3,galGal4,ce10,droVir1,caeJap2,calJac3canon,Homo_sapiens_AK1,ornAna1,eschColi_K12,droMoj3,danRer5,mm9female,venter1,hg38,galGal3canon,panTro2,bosTau3,droVir2,pseuAeru_PA7,oryCun1,panTro1,caeRem3,eschColi_CFT073,felCat8,turTru2,loxAfr1,danRer7,xenTro2,Arabidopsis_thaliana_TAIR10,droMoj1,eschColi_APEC_O1,equCab2,droGri1,Araly1,felCat3,fr2,Zea_mays_B73_RefGen_v2,ci2full,droYak1,braFlo1,dasNov3,hg19chrM,bosTau2,oryza_sativa_japonica_nipponbare_IRGSP4.0,hg38canon,fr1,danRer3,saiBol1,Xanthomonas_oryzae_KACC10331,bosTau8,galGal2canon,hg18nohaps,bosTau4,burkPseu_1710B,dp3,hg_g1k_v37,hg38female,bordBron,Tcacao_1.0,droAna3,droMoj2,Xanthomonas_oryzae_MAFF_311018,Xanthomonas_oryzae_PXO99A,calJac1,droPer1,strPur3,mm8canon,Amel_4.5,felCat4canon,droAna1,droAna2,baciSubt,nomLeu3,caeRem1,hetGla1,eschColi_O157H7,Schizosaccharomyces_pombe_1.1,Homo_sapiens_nuHg19_mtrCRS,caeJap1,chrPic1,danRer4,ce8,apiMel4,pseuAeru_UCBPP_PA14,dm2,cerSim1,panTro3full,vicPac2,dp4,AgamP3,rn4,choHof1,gadMor1,droEre1,sacCer1,musFur1,strPur2,sacCer3,mm7,tetNig1,triCas2,ente638,anoCar1,apiMel2,priPac1,monDom5,dm6,oviAri1,loxAfr3,ailMel1,monDom4,eriEur1,27835,ponAbe2,susScr1,xenTro3,vicPac1,caeJap4,anoGam1,oryCun2,mm9,hg18canon,anoCar2,eschColi_K12_DH10B,tetNig1canon,gorGor3,papHam1,dasNov1,melUnd1,canFam1,nomLeu2,droSec1,rn4canon,equCab1,caeRem4,hg19,tetNig2,bosTau6,Tcas_3.0,ce7,felCat5,hg19_rCRS_pUC18_phiX174,dipOrd1,rn3,hg19canon,bosTau7,galGal3,rn5,tetNig2canon,melGal1,pUC18,ce6,caePb2,ci2canon,taeGut1,ce2,phiX,tupBel1,galGal2,Sscrofa9.58,ce9,caeRem2,otoGar1,susScr2,mm9canon,borEut13,apiMel3,IscaW1,droYak2,caePb3,eschColi_O157H7_EC4115,droEre2,eschColi_O157H7_EDL933,myoLuc2,Spur_v2.6,strePneu_R6,AaegL1,burkPseu_K96243)", "inputs": {  "alignment_options|A": "2",  "alignment_options|B": "8",  "alignment_options|E": "2",  "alignment_options|E2": "1",  "alignment_options|O": "12",  "alignment_options|O2": "32",  "alignment_options|s": "40",  "alignment_options|z": "400",  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "e8a47a300eaf494a",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "mapping_options|min_occ_floor": "1000",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 6, "time_seconds": 10.736075401306152, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #8)" name="7" time="27.114404678344727">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.015*0.96] collected minimizers[M::mm_idx_gen::0.031*1.44] sorted minimizers[M::main::0.031*1.44] loaded/built the index for 25 target sequence(s)[M::mm_mapopt_update::0.033*1.41] mid_occ = 3[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25[M::mm_idx_stat::0.035*1.40] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935[M::worker_pipeline::0.047*1.45] mapped 25 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/2/c/3/dataset_2c3b0868-3125-4d69-a8f0-1f44a9452bd4.dat[M::main] Real time: 0.053 sec; CPU: 0.074 sec; Peak RSS: 0.009 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #9)" name="8" time="27.208369731903076">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.91] collected minimizers[M::mm_idx_gen::0.005*1.10] sorted minimizers[M::main::0.005*1.10] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.09] mid_occ = 9[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*1.09] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057[M::worker_pipeline::0.047*0.99] mapped 1 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/2/a/1/dataset_2a123fdd-e2c3-4bca-98d8-6f0fc6953e18.dat[M::main] Real time: 0.048 sec; CPU: 0.047 sec; Peak RSS: 0.010 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #1)" name="0" time="45.75566530227661">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/83/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/4/a/e/dataset_4aeba2c9-291d-438f-81c9-197c03bac037.dat--pe1-2fastq:/galaxy/server/database/objects/5/a/6/dataset_5a669673-5eab-4bc3-8a3d-011b352066b5.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/83/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/4/a/e/dataset_4aeba2c9-291d-438f-81c9-197c03bac037.dat']      right reads: ['/galaxy/server/database/objects/5/a/6/dataset_5a669673-5eab-4bc3-8a3d-011b352066b5.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/83/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/83/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/83/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/83/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/a/e/dataset_4aeba2c9-291d-438f-81c9-197c03bac037.dat  0:00:00.552     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/a/6/dataset_5a669673-5eab-4bc3-8a3d-011b352066b5.dat  0:00:01.120     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.125    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.364    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.364    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.483    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.515    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.532    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.534    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.536    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.539    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.548    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.548    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.548    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/a/e/dataset_4aeba2c9-291d-438f-81c9-197c03bac037.dat  0:00:01.598    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/a/6/dataset_5a669673-5eab-4bc3-8a3d-011b352066b5.dat  0:00:01.628    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.628    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.628    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.632    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.632    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.663    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.663    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.663    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.663    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/a/e/dataset_4aeba2c9-291d-438f-81c9-197c03bac037.dat and /galaxy/server/database/objects/5/a/6/dataset_5a669673-5eab-4bc3-8a3d-011b352066b5.dat  0:00:01.699    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.710    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.715    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.742    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.742    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.742    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/83/working/corrected/corrected.yaml  0:00:01.746    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/83/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/83/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/83/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.126     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.326   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.331     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.540   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.599     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.599     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.599     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.600     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.600     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.600     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.600     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.726     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.728    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.728    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.778    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.778    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.811    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.811    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.811    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.812    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.812    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.812    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.303     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.308    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.526    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.526    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.654    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.695    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.713    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.713    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.714    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.715    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:07.238    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.239    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.239    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.239    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.239    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.239    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.239    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.239    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.239    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.239    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.239    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.239    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.239    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.252    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.252    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.252    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.254    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/83/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.254    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/83/working//K33/before_rr.fasta  0:00:07.258    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/83/working//K33/assembly_graph.fastg  0:00:07.262    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/83/working//K33/simplified_contigs.fasta  0:00:07.265    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/83/working//K33/intermediate_contigs.fasta  0:00:07.273    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.273    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.273    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.273    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.273    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.273    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.338    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.459    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.238    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.238    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.244    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.373   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.376   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.381   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.383   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.383   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.383   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.396   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.403   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.420    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.420    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.420    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.420    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.420    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.420    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.420    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.420    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.420    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.420    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.420    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.420    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.420    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.421    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.421    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.421    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.421    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.421    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.421    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.421    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.421    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.421    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.421    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.421    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.421    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.421    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.421    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.421    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.422    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.422    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.422    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.422    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.422    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.422    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.422    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.422    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.422    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.422    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.422    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/83/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.422    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/83/working//K33/before_rr.fasta  0:00:09.427    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/83/working//K33/assembly_graph.fastg  0:00:09.431    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/83/working//K33/final_contigs.paths  0:00:09.438    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/83/working//K33/scaffolds.paths  0:00:09.452    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.454    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/83/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/83/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/83/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/83/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/83/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/83/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/83/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/83/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #2)" name="1" time="44.284114360809326">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/90/working--disable-gzip-output--only-assembler-t4-m8-k33--pe1-fr--pe1-1fasta:/galaxy/server/database/objects/5/e/3/dataset_5e39aa7a-64db-4d8b-a456-ee8b5ed48319.dat--pe1-2fasta:/galaxy/server/database/objects/8/e/2/dataset_8e2dcc6b-cbc6-4953-b4c3-3f0eeaf5c520.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/90/workingMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/5/e/3/dataset_5e39aa7a-64db-4d8b-a456-ee8b5ed48319.dat']      right reads: ['/galaxy/server/database/objects/8/e/2/dataset_8e2dcc6b-cbc6-4953-b4c3-3f0eeaf5c520.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/90/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/90/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/90/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.004     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.109    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.114     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.292   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.299     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.546     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.547     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611  0:00:00.547     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.547     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.548     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.548     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.548     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.671     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.673    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.673    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.725    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:00.725    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.755    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.756    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.756    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.756    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.756    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.756    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.227     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.  0:00:01.232    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.449    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.  0:00:01.449    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.569    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.599    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.619    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).  0:00:01.619    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.625    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.626    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph  0:00:01.626    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths  0:00:01.627    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted  0:00:01.627    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops  0:00:01.627    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected  0:00:01.627    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.627    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.627    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.637    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).  0:00:01.637    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.649    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM  0:00:01.654    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding  0:00:01.654    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0  0:00:01.654    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356  0:00:01.654    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478  0:00:01.654    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.697    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:01.808    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.207    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:02.868    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.067    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:06.059    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849  0:00:06.060    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568  0:00:06.060    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251  0:00:06.060    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135  0:00:06.060    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738  0:00:06.060    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705  0:00:06.060    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135  0:00:06.060    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0  0:00:06.060    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer  0:00:06.060    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill  0:00:06.062    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:06.062    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:06.062    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:06.062    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:06.062    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:06.525     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.  0:00:06.529    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:06.790    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:06.790    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:06.915    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:06.950    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:06.970    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).  0:00:06.970    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.  0:00:06.974    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled  0:00:06.975    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps  0:00:06.975    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)  0:00:06.980    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads  0:00:06.980    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices  0:00:06.980    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:06.980    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:06.981    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification  0:00:06.981    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:06.981    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover  0:00:06.981    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times  0:00:06.981    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification  0:00:06.981    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started  0:00:06.981    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:06....878    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:07.878    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.879    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.879    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.879    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.879    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.879    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.879    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.879    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.879    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.880    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.880    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.880    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.880    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.880    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.880    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.880    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.880    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.880    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.880    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865  0:00:07.880    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.880    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.880    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.893    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.893    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.893    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.895    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.895    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.895    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta  0:00:07.899    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg  0:00:07.903    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/simplified_contigs.fasta  0:00:07.907    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/intermediate_contigs.fasta  0:00:07.913    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.913    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.913    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.913    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.913    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.913    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.976    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.103    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.895    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.895    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges  0:00:09.910    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100  0:00:10.047   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:10.050   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.056   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.059   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:10.060   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:10.060   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:10.072   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.079   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.095    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:10.095    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.095    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.095    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:10.095    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.095    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:10.095    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.095    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.095    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.095    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:10.095    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:10.095    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:10.095    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:10.096    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.096    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.096    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:10.096    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:10.096    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.096    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.096    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.096    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.096    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.096    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.096    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.096    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.096    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:10.096    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:10.097    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:10.097    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:10.097    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.097    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.097    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.097    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.097    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.097    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.097    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.097    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.097    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.097    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.097    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.097    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.097    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:10.097    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:10.097    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa  0:00:10.097    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta  0:00:10.103    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg  0:00:10.107    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/final_contigs.paths  0:00:10.115    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/scaffolds.paths  0:00:10.129    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:10.131    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds===== Assembling finished. Used k-mer sizes: 33  * Assembled contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #3)" name="2" time="59.01860594749451">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/91/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/c/5/f/dataset_c5f885a3-4886-4e43-b697-42d1a92216e5.dat--pe1-2fastq.gz:/galaxy/server/database/objects/9/0/3/dataset_903799b7-2f9f-49d7-ad1d-f6558198e401.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/91/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/c/5/f/dataset_c5f885a3-4886-4e43-b697-42d1a92216e5.dat']      right reads: ['/galaxy/server/database/objects/9/0/3/dataset_903799b7-2f9f-49d7-ad1d-f6558198e401.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/91/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/5/f/dataset_c5f885a3-4886-4e43-b697-42d1a92216e5.dat  0:00:00.498     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/0/3/dataset_903799b7-2f9f-49d7-ad1d-f6558198e401.dat  0:00:00.974     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.978    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.177    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.177    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.301    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.345    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.365    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.367    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.369    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.372    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.380    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.380    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.380    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/5/f/dataset_c5f885a3-4886-4e43-b697-42d1a92216e5.dat  0:00:01.419    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/0/3/dataset_903799b7-2f9f-49d7-ad1d-f6558198e401.dat  0:00:01.451    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.452    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.452    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.455    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.456    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.456    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.478    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.478    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/5/f/dataset_c5f885a3-4886-4e43-b697-42d1a92216e5.dat and /galaxy/server/database/objects/9/0/3/dataset_903799b7-2f9f-49d7-ad1d-f6558198e401.dat  0:00:01.518    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.529    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.533    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.562    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.562    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.562    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml  0:00:01.566    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/91/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/91/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.125    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.130     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.312   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.318     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.508   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.565     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.566     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.566     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.693     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.696    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.696    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.748    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.748    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.780    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.780    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.780    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.781    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.244     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.249    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.466    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.466    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.589    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.626    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.648    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.648    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.649    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.650    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDU..osing short gaps  0:00:07.027    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.027    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.028    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.028    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.028    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.028    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.028    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.028    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.028    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.028    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.028    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.028    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.028    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.028    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.028    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.042    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.042    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.042    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.044    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.044    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.044    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K33/before_rr.fasta  0:00:07.048    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K33/assembly_graph.fastg  0:00:07.053    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K33/simplified_contigs.fasta  0:00:07.058    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K33/intermediate_contigs.fasta  0:00:07.066    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.066    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.066    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.066    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.066    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.066    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.140    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.261    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.046    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.046    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.054    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.212   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.214   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.220   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.221   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.221   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.221   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.234   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.242   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.258    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.258    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.258    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.258    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.258    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.258    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.258    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.258    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.258    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.258    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.259    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.259    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.259    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.259    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.259    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.259    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.259    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.259    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.259    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.260    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.260    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.260    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.260    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.260    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.260    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.261    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K33/before_rr.fasta  0:00:09.266    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K33/assembly_graph.fastg  0:00:09.270    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K33/final_contigs.paths  0:00:09.278    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K33/scaffolds.paths  0:00:09.294    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.296    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/91/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #4)" name="3" time="80.21130776405334">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/92/working--disable-gzip-output-t4-m8--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/2/b/7/dataset_2b729480-1cee-40d7-a23c-fd0c87a3c36d.dat--pe1-2fastq:/galaxy/server/database/objects/a/a/5/dataset_aa5f2a9e-4cc0-4b0b-9496-2a66251af103.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/92/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/2/b/7/dataset_2b729480-1cee-40d7-a23c-fd0c87a3c36d.dat']      right reads: ['/galaxy/server/database/objects/a/a/5/dataset_aa5f2a9e-4cc0-4b0b-9496-2a66251af103.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: automatic selection based on read length  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/92/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/92/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/92/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/92/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/b/7/dataset_2b729480-1cee-40d7-a23c-fd0c87a3c36d.dat  0:00:00.477     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/a/5/dataset_aa5f2a9e-4cc0-4b0b-9496-2a66251af103.dat  0:00:00.969     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.974    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.190    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.190    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.310    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.356    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.377    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.378    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.381    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.383    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.392    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.392    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.392    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/b/7/dataset_2b729480-1cee-40d7-a23c-fd0c87a3c36d.dat  0:00:01.432    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/a/5/dataset_aa5f2a9e-4cc0-4b0b-9496-2a66251af103.dat  0:00:01.475    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.475    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.475    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.506    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.506    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.506    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.506    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/b/7/dataset_2b729480-1cee-40d7-a23c-fd0c87a3c36d.dat and /galaxy/server/database/objects/a/a/5/dataset_aa5f2a9e-4cc0-4b0b-9496-2a66251af103.dat  0:00:01.538    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.549    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.554    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.585    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.585    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.585    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/92/working/corrected/corrected.yaml  0:00:01.589    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/92/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/92/working/K21/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/92/working/dataset.info) with K=21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.116     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.295   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.301     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.550     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.551     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.552     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.552     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.552     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.696     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.698    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.698    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.751    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.  0:00:00.751    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.781    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.781    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.781    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.782    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.782    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.782    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.239     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.  0:00:01.244    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.449    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.  0:00:01.449    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.569    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.610    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.629    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).  0:00:01.629    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.631    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.631    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping  0:00:01.631    16M / 3G    INFO    General                 (construction.cpp          : 253)   Earl.. short gaps  0:00:03.284    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:03.285    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:03.285    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:03.285    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:03.285    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:03.285    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.285    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:03.285    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:03.285    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:03.285    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62  0:00:03.285    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:03.285    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.285    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.297    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:03.297    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:03.297    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:03.300    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:03.300    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/92/working//K55/assembly_graph_with_scaffolds.gfa  0:00:03.301    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/92/working//K55/before_rr.fasta  0:00:03.305    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/92/working//K55/assembly_graph.fastg  0:00:03.309    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/92/working//K55/simplified_contigs.fasta  0:00:03.312    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/92/working//K55/intermediate_contigs.fasta  0:00:03.319    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:03.319    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.319    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.319    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945  0:00:03.319    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:03.319    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:03.382    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:03.494    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.277    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:05.277    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges  0:00:05.284    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100  0:00:05.407   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:05.409   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.413   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.415   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:05.415   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:05.415   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:05.427   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.434   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.451    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:05.451    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:05.451    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:05.451    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:05.451    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.451    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.451    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.451    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:05.451    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:05.451    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:05.451    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.451    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.451    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:05.452    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:05.452    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.452    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.452    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.452    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:05.452    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:05.452    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:05.452    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:05.452    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:05.452    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.452    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.452    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:05.452    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:05.452    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:05.452    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.453    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.453    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.453    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.453    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.453    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.453    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:05.453    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:05.453    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/92/working//K55/assembly_graph_with_scaffolds.gfa  0:00:05.454    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/92/working//K55/before_rr.fasta  0:00:05.458    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/92/working//K55/assembly_graph.fastg  0:00:05.462    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/92/working//K55/final_contigs.paths  0:00:05.470    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/92/working//K55/scaffolds.paths  0:00:05.484    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:05.486    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds===== Assembling finished. Used k-mer sizes: 21, 33, 55  * Corrected reads are in /galaxy/server/database/jobs_directory/000/92/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/92/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/92/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/92/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/92/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/92/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/92/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/92/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #5)" name="4" time="63.06304383277893">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/95/working--disable-gzip-output-t4-m8-k77--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/d/8/5/dataset_d858589e-7764-4583-9443-04691c165703.dat--pe1-2fastq:/galaxy/server/database/objects/5/b/e/dataset_5beadd31-a214-4142-a5cc-ffff6c6de2a3.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/95/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/d/8/5/dataset_d858589e-7764-4583-9443-04691c165703.dat']      right reads: ['/galaxy/server/database/objects/5/b/e/dataset_5beadd31-a214-4142-a5cc-ffff6c6de2a3.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [77]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/95/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/95/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/95/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/8/5/dataset_d858589e-7764-4583-9443-04691c165703.dat  0:00:00.472     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/b/e/dataset_5beadd31-a214-4142-a5cc-ffff6c6de2a3.dat  0:00:00.940     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.944    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.141    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.141    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.267    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.303    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.320    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.322    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.324    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.327    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.335    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.335    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.335    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/8/5/dataset_d858589e-7764-4583-9443-04691c165703.dat  0:00:01.367    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/b/e/dataset_5beadd31-a214-4142-a5cc-ffff6c6de2a3.dat  0:00:01.397    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.397    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.397    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.402    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.403    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.403    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.417    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.417    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.417    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.417    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/8/5/dataset_d858589e-7764-4583-9443-04691c165703.dat and /galaxy/server/database/objects/5/b/e/dataset_5beadd31-a214-4142-a5cc-ffff6c6de2a3.dat  0:00:01.449    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.459    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.463    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.491    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.491    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.491    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/95/working/corrected/corrected.yaml  0:00:01.495    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/95/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/95/working/K77/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/95/working/dataset.info) with K=77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.122     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.300   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.306     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.479   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.537     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.537     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.537     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.538     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.538     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.538     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.538     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101  0:00:00.661     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.662    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.662    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.719    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.  0:00:00.719    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.749    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.750    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.750    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.750    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.750    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.750    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525  0:00:01.205     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.  0:00:01.210    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.418    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.  0:00:01.418    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.542    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.573    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.592    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).  0:00:01.592    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.593    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.593    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:03.768    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:03.769    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:03.769    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:03.769    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:03.769    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:03.769    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.769    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:03.769    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:03.769    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:03.769    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594  0:00:03.769    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:03.769    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.769    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.780    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:03.780    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:03.780    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:03.783    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:03.783    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/95/working//K77/assembly_graph_with_scaffolds.gfa  0:00:03.783    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working//K77/before_rr.fasta  0:00:03.788    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/95/working//K77/assembly_graph.fastg  0:00:03.792    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working//K77/simplified_contigs.fasta  0:00:03.796    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working//K77/intermediate_contigs.fasta  0:00:03.803    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:03.803    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.803    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.803    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899  0:00:03.803    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:03.803    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:03.871    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:03.998    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.785    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:05.785    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges  0:00:05.791    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100  0:00:05.923   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:05.926   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.931   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.932   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:05.933   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:05.933   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:05.945   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.950   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.965    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:05.965    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:05.965    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:05.965    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:05.966    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.966    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.966    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.966    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:05.966    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:05.966    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:05.966    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.966    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.966    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:05.966    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:05.966    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.966    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.966    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.966    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:05.966    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:05.966    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:05.966    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:05.967    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:05.967    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:05.967    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:05.967    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:05.967    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.967    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.967    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.967    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.967    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.967    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.967    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.968    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.968    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.968    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.968    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:05.968    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:05.968    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/95/working//K77/assembly_graph_with_scaffolds.gfa  0:00:05.968    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working//K77/before_rr.fasta  0:00:05.976    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/95/working//K77/assembly_graph.fastg  0:00:05.980    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working//K77/final_contigs.paths  0:00:05.987    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working//K77/scaffolds.paths  0:00:06.028    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:06.030    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds===== Assembling finished. Used k-mer sizes: 77  * Corrected reads are in /galaxy/server/database/jobs_directory/000/95/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/95/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/95/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/95/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/95/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #6)" name="5" time="64.59003257751465">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/98/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/f/3/8/dataset_f3822918-fe06-44e8-88b3-326d7cc3579f.dat--pe1-2fastq:/galaxy/server/database/objects/a/1/c/dataset_a1c5b158-0bca-4b33-aa4c-881cc7de776f.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/98/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/f/3/8/dataset_f3822918-fe06-44e8-88b3-326d7cc3579f.dat']      right reads: ['/galaxy/server/database/objects/a/1/c/dataset_a1c5b158-0bca-4b33-aa4c-881cc7de776f.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/98/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/98/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/98/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/98/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/3/8/dataset_f3822918-fe06-44e8-88b3-326d7cc3579f.dat  0:00:00.465     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/1/c/dataset_a1c5b158-0bca-4b33-aa4c-881cc7de776f.dat  0:00:00.925     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.930    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.138    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.138    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.260    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.294    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.313    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.314    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.316    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.319    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.329    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.329    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.329    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/3/8/dataset_f3822918-fe06-44e8-88b3-326d7cc3579f.dat  0:00:01.373    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/1/c/dataset_a1c5b158-0bca-4b33-aa4c-881cc7de776f.dat  0:00:01.416    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.416    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.416    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.420    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.421    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.421    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.437    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.437    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.437    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.437    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/f/3/8/dataset_f3822918-fe06-44e8-88b3-326d7cc3579f.dat and /galaxy/server/database/objects/a/1/c/dataset_a1c5b158-0bca-4b33-aa4c-881cc7de776f.dat  0:00:01.472    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.483    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.486    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.514    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.514    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.514    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/98/working/corrected/corrected.yaml  0:00:01.518    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/98/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/98/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/98/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.301   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.308     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.504   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.560     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.560     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.560     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.561     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.561     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.561     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.561     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.673     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.675    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.675    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.756    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.756    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.756    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.757    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.757    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.757    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.206     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.212    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.423    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.423    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.541    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.573    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.592    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.592    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.595    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.596    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:06.693    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:06.696    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:06.696    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:06.696    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:06.696    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:06.696    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.696    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:06.696    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:06.696    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:06.696    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:06.696    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:06.696    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.696    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.710    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:06.710    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:06.710    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:06.713    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.713    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/98/working//K33/assembly_graph_with_scaffolds.gfa  0:00:06.713    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/98/working//K33/before_rr.fasta  0:00:06.719    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/98/working//K33/assembly_graph.fastg  0:00:06.723    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/98/working//K33/simplified_contigs.fasta  0:00:06.727    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/98/working//K33/intermediate_contigs.fasta  0:00:06.733    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:06.733    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.733    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.733    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:06.733    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:06.733    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:06.804    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:06.930    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.699    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:08.699    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:08.705    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:08.828   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:08.830   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.835   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.837   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:08.837   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:08.837   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:08.852   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.859   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.873    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:08.873    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:08.873    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:08.873    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:08.874    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:08.874    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:08.874    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:08.874    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:08.874    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:08.874    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:08.874    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:08.874    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:08.874    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:08.874    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:08.874    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:08.874    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:08.874    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:08.874    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:08.874    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:08.874    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:08.874    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:08.875    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:08.875    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:08.875    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:08.875    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:08.875    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:08.875    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:08.875    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:08.875    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:08.875    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:08.875    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:08.875    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:08.875    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:08.875    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:08.875    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:08.876    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:08.876    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:08.876    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:08.876    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:08.876    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:08.876    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:08.876    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:08.876    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:08.876    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:08.876    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:08.876    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:08.876    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:08.876    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:08.876    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:08.876    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:08.876    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/98/working//K33/assembly_graph_with_scaffolds.gfa  0:00:08.876    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/98/working//K33/before_rr.fasta  0:00:08.881    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/98/working//K33/assembly_graph.fastg  0:00:08.885    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/98/working//K33/final_contigs.paths  0:00:08.892    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/98/working//K33/scaffolds.paths  0:00:08.906    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:08.907    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 8 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/98/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/98/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/98/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/98/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/98/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/98/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/98/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/98/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #7)" name="6" time="64.80941104888916">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/101/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/1/4/0/dataset_1407077f-880e-4f8a-912f-1cbb009fe15f.dat--pe1-2fastq:/galaxy/server/database/objects/2/5/9/dataset_25929421-fa95-4b18-9e46-8bdcfd9a9c43.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/101/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/1/4/0/dataset_1407077f-880e-4f8a-912f-1cbb009fe15f.dat']      right reads: ['/galaxy/server/database/objects/2/5/9/dataset_25929421-fa95-4b18-9e46-8bdcfd9a9c43.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/101/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/101/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/101/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/101/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/4/0/dataset_1407077f-880e-4f8a-912f-1cbb009fe15f.dat  0:00:00.472     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/5/9/dataset_25929421-fa95-4b18-9e46-8bdcfd9a9c43.dat  0:00:00.938     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.942    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.151    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.151    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.269    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.303    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.326    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.330    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.333    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.341    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.341    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.341    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/4/0/dataset_1407077f-880e-4f8a-912f-1cbb009fe15f.dat  0:00:01.381    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/5/9/dataset_25929421-fa95-4b18-9e46-8bdcfd9a9c43.dat  0:00:01.419    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.419    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.419    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.423    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.437    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.437    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.437    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.438    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/1/4/0/dataset_1407077f-880e-4f8a-912f-1cbb009fe15f.dat and /galaxy/server/database/objects/2/5/9/dataset_25929421-fa95-4b18-9e46-8bdcfd9a9c43.dat  0:00:01.468    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.475    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.478    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.507    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.507    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.507    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/101/working/corrected/corrected.yaml  0:00:01.511    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/101/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/101/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/101/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.110    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.116     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.292   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.297     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.487   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.546     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.546     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.546     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.546     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.547     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.547     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.547     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.674     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.676    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.676    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.729    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.729    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.756    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.756    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.756    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.757    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.757    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.757    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.224     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.229    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.435    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.435    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.561    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.593    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.610    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.610    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.611    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.612    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO.. 0:00:06.734    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:06.735    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:06.735    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:06.735    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:06.735    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:06.735    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.735    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:06.735    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:06.735    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:06.735    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:06.735    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:06.735    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.735    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.749    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:06.749    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:06.749    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:06.751    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.751    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/101/working//K33/assembly_graph_with_scaffolds.gfa  0:00:06.751    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/101/working//K33/before_rr.fasta  0:00:06.757    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/101/working//K33/assembly_graph.fastg  0:00:06.761    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/101/working//K33/simplified_contigs.fasta  0:00:06.765    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/101/working//K33/intermediate_contigs.fasta  0:00:06.771    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:06.771    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.771    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.771    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:06.771    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:06.771    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:06.844    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.005    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.801    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:08.801    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:08.808    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:08.976   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:08.979   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.984   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.988   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:08.988   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:08.988   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.005   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.012   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.031    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.031    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.031    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.031    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.038    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.038    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.038    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.038    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.038    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.038    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.039    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.039    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.039    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.039    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.039    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.039    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.039    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.039    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.039    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.039    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.039    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.041    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.042    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.042    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.042    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.042    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.042    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.042    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.042    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.042    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.042    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.042    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/101/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.050    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/101/working//K33/before_rr.fasta  0:00:09.055    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/101/working//K33/assembly_graph.fastg  0:00:09.059    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/101/working//K33/final_contigs.paths  0:00:09.066    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/101/working//K33/scaffolds.paths  0:00:09.081    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.084    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/101/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/101/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/101/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/101/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/101/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/101/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/101/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/101/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #8)" name="7" time="58.81814885139465">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/104/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/1/b/1/dataset_1b1c237c-74d3-48f9-8b2d-448cc9ec5b7c.dat--pe1-2fastq.gz:/galaxy/server/database/objects/3/0/5/dataset_3058b973-04bf-4b0f-9d0f-26d0b66012db.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/104/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/1/b/1/dataset_1b1c237c-74d3-48f9-8b2d-448cc9ec5b7c.dat']      right reads: ['/galaxy/server/database/objects/3/0/5/dataset_3058b973-04bf-4b0f-9d0f-26d0b66012db.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/104/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/104/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/104/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/104/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/b/1/dataset_1b1c237c-74d3-48f9-8b2d-448cc9ec5b7c.dat  0:00:00.477     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/0/5/dataset_3058b973-04bf-4b0f-9d0f-26d0b66012db.dat  0:00:00.944     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.948    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.157    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.157    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.269    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.300    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.319    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.320    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.322    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.324    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.332    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.332    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.333    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/b/1/dataset_1b1c237c-74d3-48f9-8b2d-448cc9ec5b7c.dat  0:00:01.378    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/0/5/dataset_3058b973-04bf-4b0f-9d0f-26d0b66012db.dat  0:00:01.424    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.424    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.424    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.427    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.428    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.428    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.428    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.450    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.450    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.450    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.450    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/1/b/1/dataset_1b1c237c-74d3-48f9-8b2d-448cc9ec5b7c.dat and /galaxy/server/database/objects/3/0/5/dataset_3058b973-04bf-4b0f-9d0f-26d0b66012db.dat  0:00:01.489    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.499    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.504    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.531    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.531    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.531    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/104/working/corrected/corrected.yaml  0:00:01.535    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/104/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/104/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/104/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.310   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.316     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.499   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.554     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.554     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.554     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.555     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.555     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.555     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.555     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.681     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.683    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.683    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.735    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.735    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.773    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.773    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.773    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.774    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.774    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.774    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.215     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.221    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.427    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.427    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.537    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.572    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.589    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.589    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.591    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.591    16M / 3G    INFO    General                 (stage.cpp                 : 101).. 0:00:07.197    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.198    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.198    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.198    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.198    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.198    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.198    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.198    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.198    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.198    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.198    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.198    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.198    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.215    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.215    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.215    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.222    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.222    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.223    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/before_rr.fasta  0:00:07.227    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph.fastg  0:00:07.230    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/simplified_contigs.fasta  0:00:07.234    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/intermediate_contigs.fasta  0:00:07.240    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.240    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.240    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.240    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.240    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.240    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.307    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.441    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.230    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.231    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.236    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.377   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.380   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.385   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.388   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.388   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.388   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.405   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.413   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.443    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.443    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.443    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.443    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.443    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.443    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.443    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.444    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.444    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.444    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.465    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.469    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.469    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.469    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.469    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.469    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.469    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.469    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.469    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.469    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.469    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.473    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.473    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.473    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.473    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.473    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.473    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.473    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.473    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.473    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.473    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.473    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.473    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.473    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.474    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/104/working//K33/before_rr.fasta  0:00:09.478    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/104/working//K33/assembly_graph.fastg  0:00:09.482    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/104/working//K33/final_contigs.paths  0:00:09.489    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/104/working//K33/scaffolds.paths  0:00:09.503    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.505    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/104/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/104/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/104/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/104/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/104/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/104/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/104/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/104/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>