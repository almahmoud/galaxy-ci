<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="103"
           errors="3"
           failures="26"
           skip="0">
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon (Test #1)" name="0" time="51.86677002906799">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [racon::Polisher::initialize] loaded target sequences 0.001290 s[racon::Polisher::initialize] loaded sequences 0.018790 s[racon::Polisher::initialize] loaded overlaps 0.013657 s[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.012231 s[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.012783 s[racon::Polisher::initialize] aligning overlaps [===>                ] 0.013401 s[racon::Polisher::initialize] aligning overlaps [====>               ] 0.013977 s[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.014448 s[racon::Polisher::initialize] aligning overlaps [======>             ] 0.015161 s[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.016103 s[racon::Polisher::initialize] aligning overlaps [========>           ] 0.016729 s[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.017441 s[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.017852 s[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.018606 s[racon::Polisher::initialize] aligning overlaps [============>       ] 0.019514 s[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.020288 s[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.020800 s[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.021372 s[racon::Polisher::initialize] aligning overlaps [================>   ] 0.021977 s[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.022352 s[racon::Polisher::initialize] aligning overlaps [==================> ] 0.022955 s[racon::Polisher::initialize] aligning overlaps [===================>] 0.023672 s[racon::Polisher::initialize] aligning overlaps [====================] 0.024330 s[racon::Polisher::initialize] transformed data into windows 0.000288 s[racon::Polisher::polish] generating consensus [=>                  ] 0.168944 s[racon::Polisher::polish] generating consensus [==>                 ] 0.328354 s[racon::Polisher::polish] generating consensus [===>                ] 0.448779 s[racon::Polisher::polish] generating consensus [====>               ] 0.530055 s[racon::Polisher::polish] generating consensus [=====>              ] 0.601592 s[racon::Polisher::polish] generating consensus [======>             ] 0.692751 s[racon::Polisher::polish] generating consensus [=======>            ] 0.785336 s[racon::Polisher::polish] generating consensus [========>           ] 0.914290 s[racon::Polisher::polish] generating consensus [=========>          ] 1.122497 s[racon::Polisher::polish] generating consensus [==========>         ] 1.368343 s[racon::Polisher::polish] generating consensus [===========>        ] 1.705831 s[racon::Polisher::polish] generating consensus [============>       ] 2.000836 s[racon::Polisher::polish] generating consensus [=============>      ] 2.263898 s[racon::Polisher::polish] generating consensus [==============>     ] 2.496532 s[racon::Polisher::polish] generating consensus [===============>    ] 2.648990 s[racon::Polisher::polish] generating consensus [================>   ] 2.844330 s[racon::Polisher::polish] generating consensus [=================>  ] 2.926828 s[racon::Polisher::polish] generating consensus [==================> ] 3.148120 s[racon::Polisher::polish] generating consensus [===================>] 3.388965 s[racon::Polisher::polish] generating consensus [====================] 3.536494 s[racon::Polisher::] total = 3.595987 s
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon (Test #2)" name="1" time="51.05420470237732">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [racon::Polisher::initialize] loaded target sequences 0.000607 s[racon::Polisher::initialize] loaded sequences 0.017920 s[racon::Polisher::initialize] loaded overlaps 0.000762 s[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.060497 s[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.102872 s[racon::Polisher::initialize] aligning overlaps [===>                ] 0.143578 s[racon::Polisher::initialize] aligning overlaps [====>               ] 0.168936 s[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.216358 s[racon::Polisher::initialize] aligning overlaps [======>             ] 0.242193 s[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.279939 s[racon::Polisher::initialize] aligning overlaps [========>           ] 0.315523 s[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.361973 s[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.407870 s[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.437384 s[racon::Polisher::initialize] aligning overlaps [============>       ] 0.490452 s[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.542802 s[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.586900 s[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.635728 s[racon::Polisher::initialize] aligning overlaps [================>   ] 0.697777 s[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.746092 s[racon::Polisher::initialize] aligning overlaps [==================> ] 0.779520 s[racon::Polisher::initialize] aligning overlaps [===================>] 0.822783 s[racon::Polisher::initialize] aligning overlaps [====================] 0.948699 s[racon::Polisher::initialize] transformed data into windows 0.000307 s[racon::Polisher::polish] generating consensus [=>                  ] 0.091490 s[racon::Polisher::polish] generating consensus [==>                 ] 0.179804 s[racon::Polisher::polish] generating consensus [===>                ] 0.259122 s[racon::Polisher::polish] generating consensus [====>               ] 0.315072 s[racon::Polisher::polish] generating consensus [=====>              ] 0.362765 s[racon::Polisher::polish] generating consensus [======>             ] 0.396692 s[racon::Polisher::polish] generating consensus [=======>            ] 0.438484 s[racon::Polisher::polish] generating consensus [========>           ] 0.477627 s[racon::Polisher::polish] generating consensus [=========>          ] 0.521183 s[racon::Polisher::polish] generating consensus [==========>         ] 0.585479 s[racon::Polisher::polish] generating consensus [===========>        ] 0.693496 s[racon::Polisher::polish] generating consensus [============>       ] 0.817787 s[racon::Polisher::polish] generating consensus [=============>      ] 0.968862 s[racon::Polisher::polish] generating consensus [==============>     ] 1.143124 s[racon::Polisher::polish] generating consensus [===============>    ] 1.288769 s[racon::Polisher::polish] generating consensus [================>   ] 1.401323 s[racon::Polisher::polish] generating consensus [=================>  ] 1.519592 s[racon::Polisher::polish] generating consensus [==================> ] 1.594908 s[racon::Polisher::polish] generating consensus [===================>] 1.688284 s[racon::Polisher::polish] generating consensus [====================] 2.223003 s[racon::Polisher::] total = 3.192033 s
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #1)" name="0" time="63.952786684036255">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "45f85eee8b9b56ba",   "src": "hda"  },  "library|input_2": {   "id": "53e0c1c48c483f82",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "4966c710f810ae1e",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/5/3/f/dataset_53f5f3eb-12bb-4628-9a8f-02d955431a15.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/f/c/2/dataset_fc2156f2-02c9-4031-b978-73f0ca27cad4.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/4/e/4/dataset_4e4f332f-6573-473a-a049-88aab8f0d7c8.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:27:53.349005",  "exit_code": 0,  "external_id": "gxy-n8xwb",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "6021c4a7163af946",  "inputs": {   "input_1": {    "id": "45f85eee8b9b56ba",    "src": "hda",    "uuid": "53f5f3eb-12bb-4628-9a8f-02d955431a15"   },   "input_2": {    "id": "53e0c1c48c483f82",    "src": "hda",    "uuid": "fc2156f2-02c9-4031-b978-73f0ca27cad4"   },   "own_file": {    "id": "4966c710f810ae1e",    "src": "hda",    "uuid": "cb21aa73-28c9-4234-a66c-fb44861a3eb8"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030518.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:28:38"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030518.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:28:38"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 50%\n  bucket 4: 10%\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 3: 70%\n  bucket 4: 30%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  bucket 11: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  bucket 13: 90%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "outputs": {   "output": {    "id": "2370f0f4b08c5e7e",    "src": "hda",    "uuid": "4e4f332f-6573-473a-a049-88aab8f0d7c8"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 157, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 50%\n  bucket 4: 10%\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 3: 70%\n  bucket 4: 30%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  bucket 11: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  bucket 13: 90%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:28:39.941769",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_q0kf9ngy.sam v. /tmp/history_bam_converted_to_sam_q27ormdi.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/121/tmp -O bam -o /galaxy/server/database/objects/4/e/4/dataset_4e4f332f-6573-473a-a049-88aab8f0d7c8.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D\u003eFFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF\u003eCC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t\u003e\u003eA3\u003eAAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=\u003eB//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF\u003eFDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 0, "time_seconds": 63.952786684036255, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 40%  Entering block accumulator loop for bucket 4:  bucket 3: 50%  bucket 4: 10%  bucket 3: 60%  bucket 4: 20%  bucket 3: 70%  bucket 4: 30%  bucket 3: 80%  bucket 4: 40%  bucket 3: 90%  bucket 4: 50%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 12: 100%  bucket 11: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 14: 100%  bucket 13: 90%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #2)" name="1" time="64.67289280891418">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "fb8f0b161288ce20",   "src": "hdca"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired_collection",  "library|unaligned_file": true,  "reference_genome|own_file": {   "id": "4966c710f810ae1e",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/5/3/f/dataset_53f5f3eb-12bb-4628-9a8f-02d955431a15.dat\u0027 input_f.fastq \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/f/c/2/dataset_fc2156f2-02c9-4031-b978-73f0ca27cad4.dat\u0027 input_r.fastq \u0026\u0026    bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027 --un-conc \u0027/galaxy/server/database/objects/2/6/4/dataset_26464a0d-7578-4b61-ae90-9ea4977cdf43.dat\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/5/d/d/dataset_5dd6cce7-1590-4df8-b0e4-a0a8c0b89731.dat\u0027  \u0026\u0026 mv \u0027/galaxy/server/database/objects/2/6/4/dataset_26464a0d-7578-4b61-ae90-9ea4977cdf43.1.dat\u0027 \u0027/galaxy/server/database/objects/2/6/4/dataset_26464a0d-7578-4b61-ae90-9ea4977cdf43.dat\u0027 \u0026\u0026 mv \u0027/galaxy/server/database/objects/2/6/4/dataset_26464a0d-7578-4b61-ae90-9ea4977cdf43.2.dat\u0027 \u0027/galaxy/server/database/objects/2/7/e/dataset_27ed8bf5-3c47-4631-a945-84edd8a8b49e.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:28:07.151571",  "exit_code": 0,  "external_id": "gxy-m7xxp",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "0da30115dbfc06dd",  "inputs": {   "input_11": {    "id": "45f85eee8b9b56ba",    "src": "hda",    "uuid": "53f5f3eb-12bb-4628-9a8f-02d955431a15"   },   "input_12": {    "id": "53e0c1c48c483f82",    "src": "hda",    "uuid": "fc2156f2-02c9-4031-b978-73f0ca27cad4"   },   "own_file": {    "id": "4966c710f810ae1e",    "src": "hda",    "uuid": "cb21aa73-28c9-4234-a66c-fb44861a3eb8"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030518.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:28:38"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030518.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:28:38"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 15\n  Entering block accumulator loop for bucket 1:\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 60%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "outputs": {   "output": {    "id": "cda6fb5603293160",    "src": "hda",    "uuid": "5dd6cce7-1590-4df8-b0e4-a0a8c0b89731"   },   "output_unaligned_reads_l": {    "id": "2ca9cd878f030a04",    "src": "hda",    "uuid": "26464a0d-7578-4b61-ae90-9ea4977cdf43"   },   "output_unaligned_reads_r": {    "id": "bd284c75f407bdfe",    "src": "hda",    "uuid": "27ed8bf5-3c47-4631-a945-84edd8a8b49e"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 157, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 15\n  Entering block accumulator loop for bucket 1:\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 60%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:28:41.082592",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_3pi09d2f.sam v. /tmp/history_bam_converted_to_sam_emsbdm3z.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome --passthrough -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/122/tmp -O bam -o /galaxy/server/database/objects/5/d/d/dataset_5dd6cce7-1590-4df8-b0e4-a0a8c0b89731.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n@@ -107,24 +126,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF\u003cGGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//\u003e\u003e1F10\u003eB?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11\u003c/?//\u003c@?/F\u003c\u003c\u003cA-\u003cFBGH0.00=G0\u003c\u003cC//./0;;GC....\u003cC.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA\u003e\u003eABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10\u003eGGFGHHGHFFBGFGB2\u003eF\u003cEEF0@C@9:AAF00;9@-9.;FBBBBB-\u003e@;-A@FF\u003c-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0\u003cEFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD\u003eD\u003eD9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3\u003e\u003eA@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE\u003c/ECDFHHBF1DGBFBFGFH\u003c1GHGDGGFDFE0/\u003c--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?-\u003e;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C\u003c-\u003e.ADDGE1GA\u003cDBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA\u003eABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF\u003c@-9?BDEFFF?B--?DFFFB9FA\u003eB;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG\u003cC???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tABBAAFFF@FFFGGGGGGGGGGHHHHHHGHHHHHGGGGGHHHHHHHHGHGHHHHHHHHHHHGHGHFHFGE?CGDGGHHGGGGGGGHHHHGHGGGGGGFGGGHGHGGGGGGGGGGGGGGGGGGDGAFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFB/9FFBFFFFFFFFFFFFFD@D=BEFFF;FDDB////B=CF-.;BAFFFFFF;;BFE/BFFFFB:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tBBBBBFFFFFDFGGGGGGGFGGGGHGGHHHHHHHGFFHHCHGGGGGHHHHHHFHFFGFGHHHHHG0EEEHHGHFFGFFHGGGCFGEFHGGGGGHGFEEGEFHGHFFGFGGGGFGDGGGG?DCCCCCDDFGHHFHCGHGHHGHHFBAFGGHE.\u003cDCDD\u003cCD;GFFEFHH.@?A//B0F0/;09CFFBBCF0;;F;B0;009FBFFB9.9ADDFFFFAACAC;-9;BB/B././9//;//...-;///---;9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tBBBBBFFFFFFFGGGGGGGGGGGGHHHGGGGGGHHHGGGGGFCEGGHHHGHHGGGEGGHHHAFGGGGGGAFG//EGHHHHCGEHHHHEEHHFHGHFHHGGEF/FGGC?FDFH2DHHFFGGFGHHHHGGHHFGHHGHGHHGFHDHBGBBGHHFHHGGCCDC\u003c=D\u003cDGHHC;CGFCCFBECDG?FGGA-;EB9FBGFFBBF\u003eDFFFE?FFF/--;;9/:BFFFBA///9----;B.//////;...---9---\tYT:Z:UP\n" ], "status": "failure", "test_index": 1, "time_seconds": 64.67289280891418, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 15  Entering block accumulator loop for bucket 1:  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 1: 70%  bucket 2: 40%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 3: 90%  bucket 4: 60%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 7: 50%  bucket 8: 20%  bucket 7: 60%  bucket 8: 30%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 8: 50%  bucket 7: 90%  bucket 7: 100%  bucket 8: 60%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #3)" name="2" time="60.62269878387451">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "45f85eee8b9b56ba",   "src": "hda"  },  "library|input_2": {   "id": "53e0c1c48c483f82",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "4966c710f810ae1e",   "src": "hda"  },  "reference_genome|source": "history",  "rg|PL": "CAPILLARY",  "rg|read_group_id_conditional|ID": "rg1",  "rg|rg_selector": "set" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/5/3/f/dataset_53f5f3eb-12bb-4628-9a8f-02d955431a15.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/f/c/2/dataset_fc2156f2-02c9-4031-b978-73f0ca27cad4.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/1/b/5/dataset_1b5cd778-24b7-412a-bb48-e3c009efb849.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:28:19.686065",  "exit_code": 0,  "external_id": "gxy-sbwq2",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "157d2c2231560523",  "inputs": {   "input_1": {    "id": "45f85eee8b9b56ba",    "src": "hda",    "uuid": "53f5f3eb-12bb-4628-9a8f-02d955431a15"   },   "input_2": {    "id": "53e0c1c48c483f82",    "src": "hda",    "uuid": "fc2156f2-02c9-4031-b978-73f0ca27cad4"   },   "own_file": {    "id": "4966c710f810ae1e",    "src": "hda",    "uuid": "cb21aa73-28c9-4234-a66c-fb44861a3eb8"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030524.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:28:44"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030523.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:28:43"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "model_class": "Job",  "outputs": {   "output": {    "id": "b9a58ba044ca4c06",    "src": "hda",    "uuid": "1b5cd778-24b7-412a-bb48-e3c009efb849"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 157, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:28:46.994383",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_9nhx3led.sam v. /tmp/history_bam_converted_to_sam_4ad78xhv.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/123/tmp -O bam -o /galaxy/server/database/objects/1/b/5/dataset_1b5cd778-24b7-412a-bb48-e3c009efb849.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n********\n*SNIP *\n********\n@@ -108,24 +127,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF\u003cGGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//\u003e\u003e1F10\u003eB?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11\u003c/?//\u003c@?/F\u003c\u003c\u003cA-\u003cFBGH0.00=G0\u003c\u003cC//./0;;GC....\u003cC.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA\u003e\u003eABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10\u003eGGFGHHGHFFBGFGB2\u003eF\u003cEEF0@C@9:AAF00;9@-9.;FBBBBB-\u003e@;-A@FF\u003c-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0\u003cEFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD\u003eD\u003eD9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3\u003e\u003eA@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE\u003c/ECDFHHBF1DGBFBFGFH\u003c1GHGDGGFDFE0/\u003c--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?-\u003e;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C\u003c-\u003e.ADDGE1GA\u003cDBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA\u003eABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF\u003c@-9?BDEFFF?B--?DFFFB9FA\u003eB;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG\u003cC???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tABBAAFFF@FFFGGGGGGGGGGHHHHHHGHHHHHGGGGGHHHHHHHHGHGHHHHHHHHHHHGHGHFHFGE?CGDGGHHGGGGGGGHHHHGHGGGGGGFGGGHGHGGGGGGGGGGGGGGGGGGDGAFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFB/9FFBFFFFFFFFFFFFFD@D=BEFFF;FDDB////B=CF-.;BAFFFFFF;;BFE/BFFFFB:\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tBBBBBFFFFFDFGGGGGGGFGGGGHGGHHHHHHHGFFHHCHGGGGGHHHHHHFHFFGFGHHHHHG0EEEHHGHFFGFFHGGGCFGEFHGGGGGHGFEEGEFHGHFFGFGGGGFGDGGGG?DCCCCCDDFGHHFHCGHGHHGHHFBAFGGHE.\u003cDCDD\u003cCD;GFFEFHH.@?A//B0F0/;09CFFBBCF0;;F;B0;009FBFFB9.9ADDFFFFAACAC;-9;BB/B././9//;//...-;///---;9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tBBBBBFFFFFFFGGGGGGGGGGGGHHHGGGGGGHHHGGGGGFCEGGHHHGHHGGGEGGHHHAFGGGGGGAFG//EGHHHHCGEHHHHEEHHFHGHFHHGGEF/FGGC?FDFH2DHHFFGGFGHHHHGGHHFGHHGHGHHGFHDHBGBBGHHFHHGGCCDC\u003c=D\u003cDGHHC;CGFCCFBECDG?FGGA-;EB9FBGFFBBF\u003eDFFFE?FFF/--;;9/:BFFFBA///9----;B.//////;...---9---\tYT:Z:UP\tRG:Z:rg1\n" ], "status": "failure", "test_index": 2, "time_seconds": 60.62269878387451, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 1: 50%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 2: 40%  bucket 1: 40%  bucket 2: 50%  bucket 1: 50%  bucket 2: 60%  bucket 1: 60%  bucket 2: 70%  bucket 1: 70%  bucket 2: 80%  bucket 1: 80%  bucket 1: 90%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 4: 90%  bucket 3: 80%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #4)" name="3" time="60.37502360343933">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "45f85eee8b9b56ba",   "src": "hda"  },  "library|input_2": {   "id": "53e0c1c48c483f82",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "4966c710f810ae1e",   "src": "hda"  },  "reference_genome|source": "history",  "save_mapping_stats": true }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/5/3/f/dataset_53f5f3eb-12bb-4628-9a8f-02d955431a15.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/f/c/2/dataset_fc2156f2-02c9-4031-b978-73f0ca27cad4.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                2\u003e \u0027/galaxy/server/database/objects/3/c/0/dataset_3c0a8a22-1484-4039-acac-91e506174f97.dat\u0027  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/d/7/1/dataset_d7112e19-08ba-46be-8f49-870bfd91a146.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:28:20.518989",  "exit_code": 0,  "external_id": "gxy-v5rk8",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "31e04f68fa2e84a4",  "inputs": {   "input_1": {    "id": "45f85eee8b9b56ba",    "src": "hda",    "uuid": "53f5f3eb-12bb-4628-9a8f-02d955431a15"   },   "input_2": {    "id": "53e0c1c48c483f82",    "src": "hda",    "uuid": "fc2156f2-02c9-4031-b978-73f0ca27cad4"   },   "own_file": {    "id": "4966c710f810ae1e",    "src": "hda",    "uuid": "cb21aa73-28c9-4234-a66c-fb44861a3eb8"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030527.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:28:47"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030527.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:28:47"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 90%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  bucket 3: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  Sorting block time: 00:00:00\n  bucket 5: 100%\nReturning block of 482 for bucket 6\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\nGetting block 8 of 15\n  Reserving size (1554) for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "outputs": {   "mapping_stats": {    "id": "87bc1de52fcb43ab",    "src": "hda",    "uuid": "3c0a8a22-1484-4039-acac-91e506174f97"   },   "output": {    "id": "64de5f975f4f4d05",    "src": "hda",    "uuid": "d7112e19-08ba-46be-8f49-870bfd91a146"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 157, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"true\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 90%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  bucket 3: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  Sorting block time: 00:00:00\n  bucket 5: 100%\nReturning block of 482 for bucket 6\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\nGetting block 8 of 15\n  Reserving size (1554) for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:28:49.263451",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_cm_s089w.sam v. /tmp/history_bam_converted_to_sam_pflqu2zf.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/124/tmp -O bam -o /galaxy/server/database/objects/d/7/1/dataset_d7112e19-08ba-46be-8f49-870bfd91a146.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n@@ -107,24 +126,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF\u003cGGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//\u003e\u003e1F10\u003eB?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11\u003c/?//\u003c@?/F\u003c\u003c\u003cA-\u003cFBGH0.00=G0\u003c\u003cC//./0;;GC....\u003cC.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA\u003e\u003eABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10\u003eGGFGHHGHFFBGFGB2\u003eF\u003cEEF0@C@9:AAF00;9@-9.;FBBBBB-\u003e@;-A@FF\u003c-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0\u003cEFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD\u003eD\u003eD9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3\u003e\u003eA@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE\u003c/ECDFHHBF1DGBFBFGFH\u003c1GHGDGGFDFE0/\u003c--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?-\u003e;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C\u003c-\u003e.ADDGE1GA\u003cDBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA\u003eABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF\u003c@-9?BDEFFF?B--?DFFFB9FA\u003eB;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG\u003cC???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tABBAAFFF@FFFGGGGGGGGGGHHHHHHGHHHHHGGGGGHHHHHHHHGHGHHHHHHHHHHHGHGHFHFGE?CGDGGHHGGGGGGGHHHHGHGGGGGGFGGGHGHGGGGGGGGGGGGGGGGGGDGAFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFB/9FFBFFFFFFFFFFFFFD@D=BEFFF;FDDB////B=CF-.;BAFFFFFF;;BFE/BFFFFB:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tBBBBBFFFFFDFGGGGGGGFGGGGHGGHHHHHHHGFFHHCHGGGGGHHHHHHFHFFGFGHHHHHG0EEEHHGHFFGFFHGGGCFGEFHGGGGGHGFEEGEFHGHFFGFGGGGFGDGGGG?DCCCCCDDFGHHFHCGHGHHGHHFBAFGGHE.\u003cDCDD\u003cCD;GFFEFHH.@?A//B0F0/;09CFFBBCF0;;F;B0;009FBFFB9.9ADDFFFFAACAC;-9;BB/B././9//;//...-;///---;9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tBBBBBFFFFFFFGGGGGGGGGGGGHHHGGGGGGHHHGGGGGFCEGGHHHGHHGGGEGGHHHAFGGGGGGAFG//EGHHHHCGEHHHHEEHHFHGHFHHGGEF/FGGC?FDFH2DHHFFGGFGHHHHGGHHFGHHGHGHHGFHDHBGBBGHHFHHGGCCDC\u003c=D\u003cDGHHC;CGFCCFBECDG?FGGA-;EB9FBGFFBBF\u003eDFFFE?FFF/--;;9/:BFFFBA///9----;B.//////;...---9---\tYT:Z:UP\n" ], "status": "failure", "test_index": 3, "time_seconds": 60.37502360343933, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/c/b/2/dataset_cb21aa73-28c9-4234-a66c-fb44861a3eb8.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%  bucket 1: 40%  bucket 1: 50%  bucket 1: 60%  bucket 1: 70%  bucket 1: 80%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  bucket 2: 10%  bucket 2: 20%  bucket 2: 30%  bucket 2: 40%  bucket 2: 50%  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 3: 100%  bucket 4: 80%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  bucket 5: 10%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 7: 100%  bucket 8: 90%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  bucket 14: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  bucket 3: 10%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 3: 40%  bucket 4: 20%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 6: 30%  bucket 5: 20%  bucket 6: 40%  bucket 5: 30%  bucket 6: 50%  bucket 6: 60%  bucket 5: 40%  bucket 6: 70%  bucket 5: 50%  bucket 6: 80%  bucket 5: 60%  bucket 6: 90%  bucket 5: 70%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  Sorting block time: 00:00:00  bucket 5: 100%Returning block of 482 for bucket 6  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15Getting block 8 of 15  Reserving size (1554) for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 8: 50%  bucket 7: 70%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #5)" name="4" time="49.045655488967896">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "2084038c65856b27",   "src": "hda"  },  "library|type": "paired_interleaved",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "2f819c97177d59f4",   "src": "hda"  },  "reference_genome|source": "history",  "rg|PL": "CAPILLARY",  "rg|read_group_id_conditional|ID": "rg1",  "rg|rg_selector": "set" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/9/4/5/dataset_945a8a20-20cf-49be-b132-63e79c4c1927.dat\u0027 input_il.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   --interleaved \u0027input_il.fastq\u0027                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/3/3/e/dataset_33ea5373-b4f7-4c1e-9e4c-df12b1f2e9d7.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:28:56.072797",  "exit_code": 0,  "external_id": "gxy-dlcxw",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "44311f5d566eeb2c",  "inputs": {   "input_1": {    "id": "2084038c65856b27",    "src": "hda",    "uuid": "945a8a20-20cf-49be-b132-63e79c4c1927"   },   "own_file": {    "id": "2f819c97177d59f4",    "src": "hda",    "uuid": "38817d79-6cc9-47c9-986a-fdd171e9b3cd"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030566.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:29:26"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030565.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:29:25"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n50.00% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  bucket 9: 10%\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 70%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 100%\n  Sorting block of length 389 for bucket 1\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  bucket 7: 10%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "outputs": {   "output": {    "id": "5bef726a0d9289b5",    "src": "hda",    "uuid": "33ea5373-b4f7-4c1e-9e4c-df12b1f2e9d7"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 165, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 175, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n50.00% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  bucket 9: 10%\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 70%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 100%\n  Sorting block of length 389 for bucket 1\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  bucket 7: 10%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:29:29.244479",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_4395u9ej.sam v. /tmp/history_bam_converted_to_sam_vikio0v1.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/136/tmp -O bam -o /galaxy/server/database/objects/3/3/e/dataset_33ea5373-b4f7-4c1e-9e4c-df12b1f2e9d7.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n" ], "status": "failure", "test_index": 4, "time_seconds": 49.045655488967896, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 1: 100%  bucket 2: 70%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 6: 70%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 7: 90%  bucket 8: 60%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  bucket 8: 70%  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  bucket 9: 10%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 11: 10%  bucket 12: 30%  bucket 11: 20%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 11: 50%  bucket 12: 70%  bucket 11: 60%  bucket 12: 80%  bucket 12: 90%  bucket 11: 70%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 2: 20%  bucket 1: 20%  bucket 2: 30%  bucket 1: 30%  bucket 2: 40%  bucket 1: 40%  bucket 2: 50%  bucket 1: 50%  bucket 2: 60%  bucket 1: 60%  bucket 2: 70%  bucket 1: 70%  bucket 2: 80%  bucket 1: 80%  bucket 2: 90%  bucket 1: 90%  bucket 1: 100%  bucket 2: 100%  Sorting block of length 389 for bucket 1  Sorting block of length 1283 for bucket 2  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  bucket 7: 10%  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 7: 40%  bucket 8: 10%  bucket 7: 50%  bucket 8: 20%  bucket 7: 60%  bucket 8: 30%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 7: 90%  bucket 8: 50%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index3 reads; of these:  3 (100.00%) were paired; of these:    2 (66.67%) aligned concordantly 0 times    1 (33.33%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    2 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    2 pairs aligned 0 times concordantly or discordantly; of these:      4 mates make up the pairs; of these:        3 (75.00%) aligned 0 times        1 (25.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times50.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #6)" name="5" time="51.960434675216675">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "76de3acfeba364df",   "src": "hda"  },  "library|input_2": {   "id": "a14ba3c87ed054d0",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "2f819c97177d59f4",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/5/e/3/dataset_5e3640e9-5c79-4d56-a90a-7aca9883fb0e.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/9/0/9/dataset_909fe967-632a-4064-bb79-2b31fc96db8a.dat\u0027 input_r.fastq.gz \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq.gz\u0027 -2 \u0027input_r.fastq.gz\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/8/0/2/dataset_802aa0c1-ad01-46cc-a56d-88a03cfe294f.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:29:09.382248",  "exit_code": 0,  "external_id": "gxy-r7crx",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "6de704901ed1f40c",  "inputs": {   "input_1": {    "id": "76de3acfeba364df",    "src": "hda",    "uuid": "5e3640e9-5c79-4d56-a90a-7aca9883fb0e"   },   "input_2": {    "id": "a14ba3c87ed054d0",    "src": "hda",    "uuid": "909fe967-632a-4064-bb79-2b31fc96db8a"   },   "own_file": {    "id": "2f819c97177d59f4",    "src": "hda",    "uuid": "38817d79-6cc9-47c9-986a-fdd171e9b3cd"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030569.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:29:29"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030569.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:29:29"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nReturning block of 850 for bucket 2\nGetting block 4 of 15\nGetting block 3 of 15\n  Reserving size (1554) for bucket 4\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  bucket 7: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  bucket 11: 10%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  bucket 13: 90%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "outputs": {   "output": {    "id": "6d92b23bb47763d4",    "src": "hda",    "uuid": "802aa0c1-ad01-46cc-a56d-88a03cfe294f"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 167, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 175, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nReturning block of 850 for bucket 2\nGetting block 4 of 15\nGetting block 3 of 15\n  Reserving size (1554) for bucket 4\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  bucket 7: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  bucket 11: 10%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  bucket 13: 90%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:29:32.972589",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_l1itep_e.sam v. /tmp/history_bam_converted_to_sam_pio2je8_.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 input_f.fastq.gz -2 input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/137/tmp -O bam -o /galaxy/server/database/objects/8/0/2/dataset_802aa0c1-ad01-46cc-a56d-88a03cfe294f.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n@@ -107,24 +126,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tBBCCCFFFFFFFGGGGGGGGGGGGGHGGGGGGGHHHGFGGHHFGGGHGHHGHGFGECGHHHHGGGGGGGHEGFGGGHHGHFHHHHFGHFHHHHGHHHHFGGFGG3FFGGHHHHHHH2?FFGHFHHHHHHHHHBGHDGC0FGHHGHHGHHHHHHHHHHFGHHGGGGGHG-:@?FAGA:.:09CB0000;9B0.9-;---:./----.0;B00;:0;;.../90009..-..00000000-...90:.00/00\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tAAA?AFFF3DFFFGGBGFF3EAEEEHFHHFHHHGHHHHDGHHGAEFGHHHGFCHHGHHHBGHHHAEGGHGGFHFBFHHHHHHHHHHFHH1EEHEEHH1FFDEEFCGHBGHHFHEHHHHHH1FCGHHHHEEFGEEGFFCHHH11\u003eGHHF/FG2DGGCGAGGHGGGG@@@BEFFF?@@@FFEFFFFFF?@@FB@BB@FFFE=;==---A9EFBBB/;E;A9B/B/FFFEF/B///;/;9/A/;/9BFFFBFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tAABBBFFFFFFFGAFGG5GGGGHDGHHHHHHHHHHHHFHCFGC2F3BFGFGHBGHHFHEDHFGGGGGHHHG3F?GHHGGC/EFEHFGAEFFHGGAEHGGGG3EEGEEDHFHAAD@DGGGHG/\u003cC/CHHHHHHEDHFHGHHG0\u003eAC1\u003eGED-\u003c\u003c-.;C0:0C:C;GH:::::0B90;FFGEGFBFF0C.;9F0;0090;900;00FA9D.A...-9=BBFFFE/FE9;9E//BBBB.BBB///B/9/B..;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF\u003cGGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//\u003e\u003e1F10\u003eB?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11\u003c/?//\u003c@?/F\u003c\u003c\u003cA-\u003cFBGH0.00=G0\u003c\u003cC//./0;;GC....\u003cC.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA\u003e\u003eABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10\u003eGGFGHHGHFFBGFGB2\u003eF\u003cEEF0@C@9:AAF00;9@-9.;FBBBBB-\u003e@;-A@FF\u003c-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0\u003cEFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD\u003eD\u003eD9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3\u003e\u003eA@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE\u003c/ECDFHHBF1DGBFBFGFH\u003c1GHGDGGFDFE0/\u003c--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?-\u003e;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C\u003c-\u003e.ADDGE1GA\u003cDBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA\u003eABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF\u003c@-9?BDEFFF?B--?DFFFB9FA\u003eB;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG\u003cC???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tABBAAFFF@FFFGGGGGGGGGGHHHHHHGHHHHHGGGGGHHHHHHHHGHGHHHHHHHHHHHGHGHFHFGE?CGDGGHHGGGGGGGHHHHGHGGGGGGFGGGHGHGGGGGGGGGGGGGGGGGGDGAFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFB/9FFBFFFFFFFFFFFFFD@D=BEFFF;FDDB////B=CF-.;BAFFFFFF;;BFE/BFFFFB:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tBBBBBFFFFFDFGGGGGGGFGGGGHGGHHHHHHHGFFHHCHGGGGGHHHHHHFHFFGFGHHHHHG0EEEHHGHFFGFFHGGGCFGEFHGGGGGHGFEEGEFHGHFFGFGGGGFGDGGGG?DCCCCCDDFGHHFHCGHGHHGHHFBAFGGHE.\u003cDCDD\u003cCD;GFFEFHH.@?A//B0F0/;09CFFBBCF0;;F;B0;009FBFFB9.9ADDFFFFAACAC;-9;BB/B././9//;//...-;///---;9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tBBBBBFFFFFFFGGGGGGGGGGGGHHHGGGGGGHHHGGGGGFCEGGHHHGHHGGGEGGHHHAFGGGGGGAFG//EGHHHHCGEHHHHEEHHFHGHFHHGGEF/FGGC?FDFH2DHHFFGGFGHHHHGGHHFGHHGHGHHGFHDHBGBBGHHFHHGGCCDC\u003c=D\u003cDGHHC;CGFCCFBECDG?FGGA-;EB9FBGFFBBF\u003eDFFFE?FFF/--;;9/:BFFFBA///9----;B.//////;...---9---\tYT:Z:UP\n" ], "status": "failure", "test_index": 5, "time_seconds": 51.960434675216675, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Returning block of 850 for bucket 2Getting block 4 of 15Getting block 3 of 15  Reserving size (1554) for bucket 4  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  bucket 7: 10%  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 8: 50%  bucket 7: 90%  bucket 8: 60%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 11: 60%  bucket 12: 40%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 4: 40%  bucket 3: 30%  bucket 4: 50%  bucket 3: 40%  bucket 4: 60%  bucket 3: 50%  bucket 4: 70%  bucket 4: 80%  bucket 3: 60%  bucket 4: 90%  bucket 3: 70%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  bucket 6: 90%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 7: 50%  bucket 8: 20%  bucket 7: 60%  bucket 8: 30%  bucket 7: 70%  bucket 7: 80%  bucket 8: 40%  bucket 7: 90%  bucket 8: 50%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Entering block accumulator loop for bucket 9:  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  bucket 11: 10%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 12: 40%  bucket 11: 70%  bucket 12: 50%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 14: 90%  bucket 13: 80%  bucket 14: 100%  bucket 13: 90%  Sorting block of length 966 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #7)" name="6" time="48.6318941116333">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "178dd5b16ab0ff64",   "src": "hda"  },  "library|input_2": {   "id": "9371bda069e0a294",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "2f819c97177d59f4",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/7/a/a/dataset_7aa942bc-7886-41f9-9437-bfd79abd6aae.dat\u0027 input_f.fastq.bz2 \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/9/e/2/dataset_9e25f343-34b9-4a01-9073-8cc4b87cc06a.dat\u0027 input_r.fastq.bz2 \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq.bz2\u0027 -2 \u0027input_r.fastq.bz2\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/f/c/9/dataset_fc9513b4-6917-4fe0-bfe5-e5857b159f4c.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:29:11.602818",  "exit_code": 0,  "external_id": "gxy-tvpzt",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "faeeaf4e23a54805",  "inputs": {   "input_1": {    "id": "178dd5b16ab0ff64",    "src": "hda",    "uuid": "7aa942bc-7886-41f9-9437-bfd79abd6aae"   },   "input_2": {    "id": "9371bda069e0a294",    "src": "hda",    "uuid": "9e25f343-34b9-4a01-9073-8cc4b87cc06a"   },   "own_file": {    "id": "2f819c97177d59f4",    "src": "hda",    "uuid": "38817d79-6cc9-47c9-986a-fdd171e9b3cd"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030574.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:29:34"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030573.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:29:33"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "outputs": {   "output": {    "id": "fcbb9c21157249c4",    "src": "hda",    "uuid": "fc9513b4-6917-4fe0-bfe5-e5857b159f4c"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 171, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 175, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:29:35.562304",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_dyyvwbbw.sam v. /tmp/history_bam_converted_to_sam_yr4w39up.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -1 /tmp/gxy-tvpzt-mhtv8_43mate1 -2 /tmp/gxy-tvpzt-mhtv8_43mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/138/tmp -O bam -o /galaxy/server/database/objects/f/c/9/dataset_fc9513b4-6917-4fe0-bfe5-e5857b159f4c.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D\u003eFFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF\u003eCC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t\u003e\u003eA3\u003eAAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=\u003eB//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF\u003eFDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 6, "time_seconds": 48.6318941116333, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 2: 40%  bucket 1: 50%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  bucket 9: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 3: 30%  bucket 4: 10%  bucket 3: 40%  bucket 3: 50%  bucket 4: 20%  bucket 3: 60%  bucket 4: 30%  bucket 3: 70%  bucket 3: 80%  bucket 4: 40%  bucket 3: 90%  bucket 4: 50%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  bucket 6: 90%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #8)" name="7" time="49.478097438812256">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "210b33214039f2aa",   "src": "hda"  },  "library|input_2": {   "id": "7ee30f927c4c98dd",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "2f819c97177d59f4",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/5/0/b/dataset_50bc1476-352a-4f0f-91bb-256d790929ee.dat\u0027 input_f.fasta \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/a/e/c/dataset_aec8c133-55b7-4753-b163-3acbc9da64f6.dat\u0027 input_r.fasta \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027  -f  -1 \u0027input_f.fasta\u0027 -2 \u0027input_r.fasta\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/5/c/7/dataset_5c7c5595-3065-4630-8de1-5b694729befc.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n",  "create_time": "2021-11-27T16:29:20.613342",  "exit_code": 0,  "external_id": "gxy-5sfjk",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "094b3980747fe959",  "inputs": {   "input_1": {    "id": "210b33214039f2aa",    "src": "hda",    "uuid": "50bc1476-352a-4f0f-91bb-256d790929ee"   },   "input_2": {    "id": "7ee30f927c4c98dd",    "src": "hda",    "uuid": "aec8c133-55b7-4753-b163-3acbc9da64f6"   },   "own_file": {    "id": "2f819c97177d59f4",    "src": "hda",    "uuid": "38817d79-6cc9-47c9-986a-fdd171e9b3cd"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030576.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:29:36"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030575.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:29:35"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  bucket 9: 10%\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\nGetting block 12 of 15\n  Reserving size (1554) for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "outputs": {   "output": {    "id": "dc7743200bda37b0",    "src": "hda",    "uuid": "5c7c5595-3065-4630-8de1-5b694729befc"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 173, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 174, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 175, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  bucket 9: 10%\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\nGetting block 12 of 15\n  Reserving size (1554) for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:29:38.658639",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_tksawbr1.sam v. /tmp/history_bam_converted_to_sam_69g35uuq.sam )\n--- local_file\n+++ history_data\n@@ -1,26 +1,27 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 2 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@2 -T /galaxy/server/database/jobs_directory/000/139/tmp -O bam -o /galaxy/server/database/objects/5/c/7/dataset_5c7c5595-3065-4630-8de1-5b694729befc.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-101\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-74\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M8I3M1I5M\t=\t1\t-239\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-90\tXN:i:0\tXM:i:6\tXO:i:3\tXG:i:13\tNM:i:19\tMD:Z:2C0A67A115A46T1A1\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t3\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-149\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-44\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M8I3M1I5M\t=\t1\t-239\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-90\tXN:i:0\tXM:i:6\tXO:i:3\tXG:i:13\tNM:i:19\tMD:Z:2C0A67A115A46T1A1\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t24\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t2\t0\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-107\tXN:i:0\tXM:i:5\tXO:i:1\tXG:i:24\tNM:i:29\tMD:Z:0A0T1A10A56A155\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-140\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n@@ -175,6 +176,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:7437:24508\t77\t*\t0\t0\t*\t*\t0\t0\tACACACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTGTCTCTTATACACATCTCCGAGCCCACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n" ], "status": "failure", "test_index": 7, "time_seconds": 49.478097438812256, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/8/8/dataset_38817d79-6cc9-47c9-986a-fdd171e9b3cd.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  Reserving size (1554) for bucket 10  bucket 9: 10%  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15Getting block 12 of 15  Reserving size (1554) for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 11: 30%  bucket 12: 40%  bucket 11: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 2: 80%  bucket 1: 90%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #9)" name="8" time="43.028289794921875">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/6/f/4/dataset_6f41518e-48d5-4079-b640-a870ad1df4e5.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 4: 50%  bucket 3: 40%  bucket 4: 60%  bucket 3: 50%  bucket 4: 70%  bucket 4: 80%  bucket 3: 60%  bucket 4: 90%  bucket 3: 70%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 14: 70%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 3: 30%  bucket 4: 10%  bucket 3: 40%  bucket 4: 20%  bucket 3: 50%  bucket 3: 60%  bucket 4: 30%  bucket 3: 70%  bucket 4: 40%  bucket 3: 80%  bucket 3: 90%  bucket 4: 50%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 5: 90%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 10: 40%  bucket 9: 30%  bucket 10: 50%  bucket 9: 40%  bucket 10: 60%  bucket 9: 50%  bucket 10: 70%  bucket 9: 60%  bucket 10: 80%  bucket 10: 90%  bucket 9: 70%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 12: 30%  bucket 11: 20%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 11: 50%  bucket 12: 70%  bucket 12: 80%  bucket 11: 60%  bucket 12: 90%  bucket 11: 70%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 14: 100%  bucket 13: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2 (Test #10)" name="9" time="43.73231029510498">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/6/f/4/dataset_6f41518e-48d5-4079-b640-a870ad1df4e5.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15Getting block 2 of 15  Reserving size (1554) for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 850 for bucket 2Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 4: 90%  bucket 3: 80%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  bucket 5: 20%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 30%  Entering block accumulator loop for bucket 6:  bucket 5: 40%  bucket 6: 10%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 6: 30%  bucket 5: 70%  bucket 6: 40%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  Sorting block time: 00:00:00  (Using difference cover)Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  bucket 3: 10%  Reserving size (1554) for bucket 4  bucket 3: 20%  Calculating Z arrays for bucket 4  bucket 3: 30%  Entering block accumulator loop for bucket 4:  bucket 3: 40%  bucket 3: 50%  bucket 3: 60%  bucket 4: 10%  bucket 3: 70%  bucket 4: 20%  bucket 3: 80%  bucket 3: 90%  bucket 4: 30%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  bucket 9: 10%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  bucket 11: 10%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 12: 30%  bucket 11: 90%  bucket 12: 40%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #1)" name="0" time="49.34874892234802">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.058 sec; CPU: 0.011 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/3/3/3/dataset_3337ed37-7a45-4459-9e94-b1df9b39aad6.dat[main] Real time: 0.020 sec; CPU: 0.047 sec[bwa_aln_core] convert to sequence coordinate... 0.00 sec[bwa_aln_core] refine gapped alignments... 0.00 sec[bwa_aln_core] print alignments... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/3/3/3/dataset_3337ed37-7a45-4459-9e94-b1df9b39aad6.dat[main] Real time: 0.007 sec; CPU: 0.003 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #2)" name="1" time="48.44718647003174">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.046 sec; CPU: 0.012 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.05 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/7/6/c/dataset_76c5e04e-1722-40db-ba29-b38afe5ded4e.dat[main] Real time: 0.023 sec; CPU: 0.051 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/c/e/0/dataset_ce02a5a1-e253-4d78-ba43-4e9bbd342dba.dat[main] Real time: 0.027 sec; CPU: 0.046 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/7/6/c/dataset_76c5e04e-1722-40db-ba29-b38afe5ded4e.dat /galaxy/server/database/objects/c/e/0/dataset_ce02a5a1-e253-4d78-ba43-4e9bbd342dba.dat[main] Real time: 0.012 sec; CPU: 0.005 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #3)" name="2" time="58.397072076797485">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.044 sec; CPU: 0.011 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.05 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/a/f/5/dataset_af58daf7-2359-467f-842a-7db1ef80d5e3.dat[main] Real time: 0.024 sec; CPU: 0.055 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/6/2/f/dataset_62fc6571-98f2-4ddd-aad8-ed87557425e1.dat[main] Real time: 0.019 sec; CPU: 0.039 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/a/f/5/dataset_af58daf7-2359-467f-842a-7db1ef80d5e3.dat /galaxy/server/database/objects/6/2/f/dataset_62fc6571-98f2-4ddd-aad8-ed87557425e1.dat[main] Real time: 0.009 sec; CPU: 0.005 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #4)" name="3" time="44.55380439758301">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.043 sec; CPU: 0.010 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/b/2/5/dataset_b251d812-f666-471f-89b8-4762300d56f5.dat[main] Real time: 0.022 sec; CPU: 0.047 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/b/2/5/dataset_b251d812-f666-471f-89b8-4762300d56f5.dat[main] Real time: 0.021 sec; CPU: 0.040 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/b/2/5/dataset_b251d812-f666-471f-89b8-4762300d56f5.dat /galaxy/server/database/objects/b/2/5/dataset_b251d812-f666-471f-89b8-4762300d56f5.dat[main] Real time: 0.011 sec; CPU: 0.006 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa (Test #5)" name="4" time="54.24400019645691">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.046 sec; CPU: 0.011 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.05 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/d/e/2/dataset_de2f2117-8a6a-415e-918b-34c2b49bffbf.dat[main] Real time: 0.022 sec; CPU: 0.054 sec[bwa_aln] 17bp reads: max_diff = 2[bwa_aln] 38bp reads: max_diff = 3[bwa_aln] 64bp reads: max_diff = 4[bwa_aln] 93bp reads: max_diff = 5[bwa_aln] 124bp reads: max_diff = 6[bwa_aln] 157bp reads: max_diff = 7[bwa_aln] 190bp reads: max_diff = 8[bwa_aln] 225bp reads: max_diff = 9[bwa_aln_core] calculate SA coordinate... 0.04 sec[bwa_aln_core] write to the disk... 0.00 sec[bwa_aln_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/6/2/f/dataset_62fc6571-98f2-4ddd-aad8-ed87557425e1.dat[main] Real time: 0.021 sec; CPU: 0.046 sec[bwa_sai2sam_pe_core] convert to sequence coordinate... [infer_isize] fail to infer insert size: too few good pairs[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.[bwa_sai2sam_pe_core] align unmapped mate...[bwa_sai2sam_pe_core] time elapses: 0.00 sec[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec[bwa_sai2sam_pe_core] print alignments... 0.00 sec[bwa_sai2sam_pe_core] 100 sequences have been processed.[main] Version: 0.7.17-r1188[main] CMD: bwa sampe -r @RG\tID:rg1\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/d/e/2/dataset_de2f2117-8a6a-415e-918b-34c2b49bffbf.dat /galaxy/server/database/objects/6/2/f/dataset_62fc6571-98f2-4ddd-aad8-ed87557425e1.dat[main] Real time: 0.011 sec; CPU: 0.006 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #1)" name="0" time="37.09530329704285">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.044 sec; CPU: 0.011 sec[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)[M::mem_pestat] mean and std.dev: (192.97, 35.99)[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/d/e/2/dataset_de2f2117-8a6a-415e-918b-34c2b49bffbf.dat /galaxy/server/database/objects/6/2/f/dataset_62fc6571-98f2-4ddd-aad8-ed87557425e1.dat[main] Real time: 0.021 sec; CPU: 0.044 sec[bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #2)" name="1" time="37.23009753227234">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.046 sec; CPU: 0.012 sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/7/d/f/dataset_7df33adc-1d53-40bb-872b-9e71bc3ea451.dat[main] Real time: 0.011 sec; CPU: 0.017 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #3)" name="2" time="39.940109968185425">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index localref.fa[main] Real time: 0.051 sec; CPU: 0.011 sec[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)[M::mem_pestat] mean and std.dev: (192.97, 35.99)[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/7/f/6/dataset_7f6d46a9-b7d8-4f4f-808f-45d1d17880d2.dat /galaxy/server/database/objects/d/0/a/dataset_d0a5517b-5f8e-420e-865c-a1a3c744f285.dat[main] Real time: 0.023 sec; CPU: 0.046 sec[bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem (Test #4)" name="3" time="36.80131006240845">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.00 sec[bwa_index] Construct BWT for the packed sequence...[bwa_index] 0.00 seconds elapse.[bwa_index] Update BWT... 0.00 sec[bwa_index] Pack forward-only FASTA... 0.00 sec[bwa_index] Construct SA from BWT and Occ... 0.00 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a is localref.fa[main] Real time: 0.046 sec; CPU: 0.011 sec[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)[M::mem_pestat] mean and std.dev: (192.97, 35.99)[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[main] Version: 0.7.17-r1188[main] CMD: bwa mem -t 4 -v 1 -R @RG\tID:rg1\tPL:CAPILLARY\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/a/c/7/dataset_ac703fd0-80c9-46a8-b5f4-b90b8026b56f.dat /galaxy/server/database/objects/d/0/a/dataset_d0a5517b-5f8e-420e-865c-a1a3c744f285.dat[main] Real time: 0.023 sec; CPU: 0.042 sec[bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper (Test #1)" name="0" time="36.2008695602417">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper (Test #2)" name="1" time="46.70342683792114">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #1)" name="0" time="17.77715015411377">
        
            <error type="error" message="parameter 'target_2bit': an invalid option ('phiX174') was selected (valid options: aptMan1,otoGar1,ce9,dasNov3,hg19_rCRS_pUC18_phiX174,CpipJ1,monDom5,galGal4,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,felCat8,borEut13,caePb3,tetNig1,16297,tetNig2,cb3,dm6,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,ce10,xenTro1,gadMor1,petMar1,caeJap4,hg_g1k_v37,caePb2,fr1,ponAbe2,13953,ce8,melUnd1,burkPseu_1106A,Amel_4.5,Bombyx_mori_p50T_2.0,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,aplCal1,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,16351,mm10,rn3,saiBol1,bosTauMd3,Spur_v2.6,echTel1,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,Hydra_JCVI,Araly1,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,oryza_sativa_japonica_nipponbare_IRGSP4.0,fr2,equCab1,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,monDom4,galGal2,susScr1,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,lMaj5,oviAri1,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,micMur1,PhumU1,papAnu2,tupBel1,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,droSim1,danRer10,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,danRer4,eriEur1,178,bosTau6,nomLeu1,strPur3,caeRem3,priPac1,apiMel1,droYak1,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,bosTau8,chrPic1,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,caeJap2,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,ce4,canFam1,felCat4,cavPor3,13954,braFlo1,baciSubt,nomLeu3,caeRem4,dasNov1,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,ailMel1,papHam1,ce7,bosTau3,dm2,oryLat2,259,eschColi_O157H7,calJac3,/cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,oryCun2,caeRem1,ce2,gorGor3,oryLat1,16720,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,venter1,Tcas_3.0,caeRem2,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,AaegL1,caeJap3,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,sacCer1,Homo_sapiens_AK1,turTru2,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,gasAcu1,ce3,bordBron,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,Arabidopsis_thaliana_TAIR10,ci2,eschColi_APEC_O1,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,sacCer3,musFur1,278,hg38,speTri2,hg17,ce5,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,eschColi_EC4115,eschColi_K12,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,allMis1,20079,rn6,bosTau5,oryCun1,eschColi_TW14359,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,vicPac2,27835,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,Ptrichocarpa_156,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,triCas2,386,monDom1,loxAfr3,droWil1,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,dp3,pseuAeru,droYak2,arabidopsis,IscaW1,cerSim1,caePb1,Schizosaccharomyces_pombe_1.1,bosTau2,dp4,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,sorAra1,Homo_sapiens_nuHg19_mtrCRS,12931,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,myoLuc2,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,panTro2,Zea_mays_B73_RefGen_v2,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,panTro1,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,felCat5,loxAfr1,ente638,eschColi_CFT073,panPan1,otoGar3,vicPac1,AgamP3,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,Xanthomonas_oryzae_PXO99A,nomLeu2,panTro3,panTro4,rn5,tarSyr1,rheMac3,dipOrd1,apiMel4,bosTau7,caeJap1,anoCar2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027target_2bit\u0027: an invalid option (\u0027phiX174\u0027) was selected (valid options: aptMan1,otoGar1,ce9,dasNov3,hg19_rCRS_pUC18_phiX174,CpipJ1,monDom5,galGal4,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,felCat8,borEut13,caePb3,tetNig1,16297,tetNig2,cb3,dm6,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,ce10,xenTro1,gadMor1,petMar1,caeJap4,hg_g1k_v37,caePb2,fr1,ponAbe2,13953,ce8,melUnd1,burkPseu_1106A,Amel_4.5,Bombyx_mori_p50T_2.0,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,aplCal1,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,16351,mm10,rn3,saiBol1,bosTauMd3,Spur_v2.6,echTel1,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,Hydra_JCVI,Araly1,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,oryza_sativa_japonica_nipponbare_IRGSP4.0,fr2,equCab1,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,monDom4,galGal2,susScr1,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,lMaj5,oviAri1,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,micMur1,PhumU1,papAnu2,tupBel1,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,droSim1,danRer10,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,danRer4,eriEur1,178,bosTau6,nomLeu1,strPur3,caeRem3,priPac1,apiMel1,droYak1,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,bosTau8,chrPic1,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,caeJap2,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,ce4,canFam1,felCat4,cavPor3,13954,braFlo1,baciSubt,nomLeu3,caeRem4,dasNov1,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,ailMel1,papHam1,ce7,bosTau3,dm2,oryLat2,259,eschColi_O157H7,calJac3,/cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,oryCun2,caeRem1,ce2,gorGor3,oryLat1,16720,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,venter1,Tcas_3.0,caeRem2,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,AaegL1,caeJap3,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,sacCer1,Homo_sapiens_AK1,turTru2,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,gasAcu1,ce3,bordBron,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,Arabidopsis_thaliana_TAIR10,ci2,eschColi_APEC_O1,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,sacCer3,musFur1,278,hg38,speTri2,hg17,ce5,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,eschColi_EC4115,eschColi_K12,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,allMis1,20079,rn6,bosTau5,oryCun1,eschColi_TW14359,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,vicPac2,27835,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,Ptrichocarpa_156,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,triCas2,386,monDom1,loxAfr3,droWil1,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,dp3,pseuAeru,droYak2,arabidopsis,IscaW1,cerSim1,caePb1,Schizosaccharomyces_pombe_1.1,bosTau2,dp4,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,sorAra1,Homo_sapiens_nuHg19_mtrCRS,12931,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,myoLuc2,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,panTro2,Zea_mays_B73_RefGen_v2,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,panTro1,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,felCat5,loxAfr1,ente638,eschColi_CFT073,panPan1,otoGar3,vicPac1,AgamP3,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,Xanthomonas_oryzae_PXO99A,nomLeu2,panTro3,panTro4,rn5,tarSyr1,rheMac3,dipOrd1,apiMel4,bosTau7,caeJap1,anoCar2)", "inputs": {  "output_format|out|format": "general_def",  "query": {   "id": "2bd7f1c69ee4a31d",   "src": "hda"  },  "source|ref_source": "cached",  "source|target_2bit": "phiX174",  "where_to_look|strand": "--strand=both" }, "status": "error", "test_index": 0, "time_seconds": 17.77715015411377, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #2)" name="1" time="52.24797511100769">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #3)" name="2" time="37.38890194892883">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #4)" name="3" time="28.47606611251831">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #5)" name="4" time="27.424999237060547">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #6)" name="5" time="28.34914231300354">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2 (Test #7)" name="6" time="26.883688926696777">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth (Test #1)" name="0" time="59.195639848709106">
        
            
                <error type="error" message="Tool exit code: 1"><![CDATA[
                    { "inputs": {  "referenceSource|reference": {   "id": "77ce058debd3f9a8",   "src": "hda"  },  "single_or_paired|input_mate1": {   "id": "fd465b151b1e7dad",   "src": "hda"  },  "single_or_paired|input_mate2": {   "id": "96d6b289544809d1",   "src": "hda"  },  "single_or_paired|single_or_paired_opts": "paired" }, "job": {  "command_line": "mkdir index_dir \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/1/3/8/dataset_1387f2a4-1e6f-498f-a8fd-6cfd93f6f49e.dat\u0027 index_dir/genome.fa \u0026\u0026 bwameth.py index index_dir/genome.fa \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/8/7/5/dataset_8755a5c4-f074-4e4e-8b0d-92b42cbba7bc.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/b/7/7/dataset_b77bfde7-f6aa-4b79-aec6-aa886b57f9d9.dat\u0027 input_r.fastq.gz \u0026\u0026  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference \u0027index_dir/genome.fa\u0027   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -",  "command_version": "bwa-meth.py 0.2.2\n",  "create_time": "2021-11-27T16:31:49.661528",  "exit_code": 1,  "external_id": "gxy-p4j8z",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "71f0aba7ac9af187",  "inputs": {   "input_mate1": {    "id": "fd465b151b1e7dad",    "src": "hda",    "uuid": "8755a5c4-f074-4e4e-8b0d-92b42cbba7bc"   },   "input_mate2": {    "id": "96d6b289544809d1",    "src": "hda",    "uuid": "b77bfde7-f6aa-4b79-aec6-aa886b57f9d9"   },   "reference": {    "id": "77ce058debd3f9a8",    "src": "hda",    "uuid": "1387f2a4-1e6f-498f-a8fd-6cfd93f6f49e"   }  },  "job_messages": [   {    "code_desc": "",    "desc": "Fatal error: Exit code 1 ()",    "error_level": 3,    "exit_code": 1,    "type": "exit_code"   },   {    "code_desc": "",    "desc": "Fatal error: ",    "error_level": 3,    "match": "Error:",    "stream": "stderr",    "type": "regex"   }  ],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030737.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:32:17"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030737.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:32:17"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "outputs": {   "output": {    "id": "fe97e72c59d1b650",    "src": "hda",    "uuid": "b1679b79-91c3-48ee-a33d-aed07fcc10cd"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "readGroup": "\"\"",   "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 224, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 225, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 226, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}"  },  "state": "error",  "stderr": "converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in \u003cmodule\u003e\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in \u003cgenexpr\u003e\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \"\u003e\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: \u0027utf-8\u0027 codec can\u0027t decode byte 0x8b in position 1: invalid start byte\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2",  "tool_stderr": "converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in \u003cmodule\u003e\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in \u003cgenexpr\u003e\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \"\u003e\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: \u0027utf-8\u0027 codec can\u0027t decode byte 0x8b in position 1: invalid start byte\n",  "tool_stdout": "",  "update_time": "2021-11-27T16:32:18.527737",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2, exit_code: 1, stderr: converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in \u003cmodule\u003e\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in \u003cgenexpr\u003e\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \"\u003e\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: \u0027utf-8\u0027 codec can\u0027t decode byte 0x8b in position 1: invalid start byte\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2, exit_code: 1, stderr: converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in \u003cmodule\u003e\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in \u003cgenexpr\u003e\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \"\u003e\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: \u0027utf-8\u0027 codec can\u0027t decode byte 0x8b in position 1: invalid start byte\n." ], "status": "failure", "test_index": 0, "time_seconds": 59.195639848709106, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tTraceback (most recent call last):  File "/usr/local/bin/bwameth.py", line 509, in <module>    main(sys.argv[1:])  File "/usr/local/bin/bwameth.py", line 470, in main    sys.exit(bwa_index(convert_fasta(args[1])))  File "/usr/local/bin/bwameth.py", line 179, in convert_fasta    for header, seq in fasta_iter(ref_fasta):  File "/usr/local/bin/bwameth.py", line 91, in fasta_iter    for header in faiter:  File "/usr/local/bin/bwameth.py", line 90, in <genexpr>    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == ">"))  File "/usr/local/lib/python3.8/codecs.py", line 322, in decode    (result, consumed) = self._buffer_decode(data, self.errors, final)UnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth (Test #2)" name="1" time="41.629584312438965">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "referenceSource|reference": {   "id": "77ce058debd3f9a8",   "src": "hda"  },  "single_or_paired|input_mate1": {   "id": "b5885762c56e19fb",   "src": "hdca"  },  "single_or_paired|single_or_paired_opts": "paired_collection" }, "job": {  "command_line": "mkdir index_dir \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/f/9/d/dataset_f9dbb5c6-6fbe-48a0-aa82-c58e8baf9be2.dat\u0027 index_dir/genome.fa \u0026\u0026 bwameth.py index index_dir/genome.fa \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/8/7/5/dataset_8755a5c4-f074-4e4e-8b0d-92b42cbba7bc.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/b/7/7/dataset_b77bfde7-f6aa-4b79-aec6-aa886b57f9d9.dat\u0027 input_r.fastq.gz \u0026\u0026  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference \u0027index_dir/genome.fa\u0027   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -",  "command_version": "bwa-meth.py 0.2.2\n",  "create_time": "2021-11-27T16:31:59.809879",  "exit_code": 0,  "external_id": "gxy-8nvsx",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "2c15fd968ebca17b",  "inputs": {   "input_mate11": {    "id": "fd465b151b1e7dad",    "src": "hda",    "uuid": "8755a5c4-f074-4e4e-8b0d-92b42cbba7bc"   },   "input_mate12": {    "id": "96d6b289544809d1",    "src": "hda",    "uuid": "b77bfde7-f6aa-4b79-aec6-aa886b57f9d9"   },   "reference": {    "id": "007d1b5b4105ea79",    "src": "hda",    "uuid": "f9dbb5c6-6fbe-48a0-aa82-c58e8baf9be2"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030738.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:32:18"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030737.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:32:17"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4000.0000000",    "title": "Memory Allocated (MB)",    "value": "4000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "outputs": {   "output": {    "id": "76e2494db4da7601",    "src": "hda",    "uuid": "5bbda692-8f45-4097-97a9-21b5799c9876"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "readGroup": "\"\"",   "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 231, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}"  },  "state": "ok",  "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.87 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.21 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.203 sec; CPU: 1.128 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.030 CPU sec, 0.016 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.112 sec; CPU: 0.038 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R \u0027@RG\\tID:input_\\tSM:input_\u0027 -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2",  "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.87 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.21 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.203 sec; CPU: 1.128 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.030 CPU sec, 0.016 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.112 sec; CPU: 0.038 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R \u0027@RG\\tID:input_\\tSM:input_\u0027 -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "tool_stdout": "",  "update_time": "2021-11-27T16:32:20.515089",  "user_email": "alex@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_h9dabb6s.sam v. /tmp/history_bam_converted_to_sam_m2zjb8jk.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/192/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0\u0027\u0027B\u003c\u003c\u003c00FB7\u003c000\u0027BBB0B\u003c0FFFFFFFFFFFFFFFFFBFFB\u003c7FFIFFFBBB\u003cFFB\u003c\u003c7FFIFFFFFBBFF\u003cIIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB\u003cFFFI\u003cFBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF\u003cBBFFF\u002707BBBBFFFFFFFFFFB0\u003cBF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n" ], "status": "failure", "test_index": 1, "time_seconds": 41.629584312438965, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.87 seconds elapse.[bwa_index] Update BWT... 0.02 sec[bwa_index] Pack forward-only FASTA... 0.01 sec[bwa_index] Construct SA from BWT and Occ... 0.21 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.203 sec; CPU: 1.128 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.030 CPU sec, 0.016 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.112 sec; CPU: 0.038 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #1)" name="0" time="28.912251472473145">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #2)" name="1" time="45.378247022628784">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #3)" name="2" time="41.99021124839783">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #4)" name="3" time="34.72029423713684">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual (Test #5)" name="4" time="35.344732999801636">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #1)" name="0" time="58.54313373565674">
        
            
            <system-out><![CDATA[
            INFO [2021-11-27 18:05:42,985]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bamINFO [2021-11-27 18:05:43,002]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-11-27 18:05:46,611]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/271/tmp/lofreq2_call_parallel0r800nq5/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #2)" name="1" time="39.55218148231506">
        
            
            <system-out><![CDATA[
            INFO [2021-11-27 18:05:43,074]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-11-27 18:05:43,096]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-11-27 18:05:46,787]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/272/tmp/lofreq2_call_parallel0z64goxo/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #3)" name="2" time="57.023398876190186">
        
            
            <system-out><![CDATA[
            INFO [2021-11-27 18:06:27,211]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-11-27 18:06:27,224]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-11-27 18:06:31,316]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/283/tmp/lofreq2_call_parallelke9jxym1/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #4)" name="3" time="47.592257022857666">
        
            
            <system-out><![CDATA[
            INFO [2021-11-27 18:06:17,712]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-11-27 18:06:17,724]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-11-27 18:06:20,819]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call (Test #5)" name="4" time="39.81877851486206">
        
            
            <system-out><![CDATA[
            INFO [2021-11-27 18:06:21,274]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-11-27 18:06:21,289]: Adding 3 commands to mp-poolNumber of substitution tests performed: 0Number of indel tests performed: 9INFO [2021-11-27 18:06:26,677]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter (Test #1)" name="0" time="28.420543670654297">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Skipping default settingsAt least one type of multiple testing correction requested. Doing first pass of vcfMTC application completedSuccessful exit.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter (Test #2)" name="1" time="22.76012420654297">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Skipping default settingsAt least one type of multiple testing correction requested. Doing first pass of vcfMTC application completedSuccessful exit.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter (Test #3)" name="2" time="26.41089391708374">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Skipping default settingsAt least one type of multiple testing correction requested. Doing first pass of vcfMTC application completedSuccessful exit.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual (Test #1)" name="0" time="32.60677528381348">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual (Test #2)" name="1" time="28.620527505874634">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual (Test #3)" name="2" time="27.512998342514038">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi (Test #1)" name="0" time="37.06552600860596">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi (Test #2)" name="1" time="36.023242712020874">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm (Test #1)" name="0" time="19.784003973007202">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::main] ===> Step 1: reading read mappings <===[M::ma_hit_read::0.216*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)[M::main] ===> Step 2: 1-pass (crude) read selection <===[M::ma_hit_sub::0.244*1.00] 9155 query sequences remain after sub[M::ma_hit_cut::0.249*1.00] 161122 hits remain after cut[M::ma_hit_flt::0.252*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85[M::main] ===> Step 3: 2-pass (fine) read selection <===[M::ma_hit_sub::0.262*1.00] 9023 query sequences remain after sub[M::ma_hit_cut::0.267*1.00] 152071 hits remain after cut[M::ma_hit_contained::0.273*1.00] 1536 sequences and 8359 hits remain after containment removal[M::main] ===> Step 4: graph cleaning <===[M::ma_sg_gen] read 8236 arcs[M::main] ===> Step 4.1: transitive reduction <===[M::asg_arc_del_trans] transitively reduced 4182 arcs[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 362 asymmetric arcs[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===[M::asg_cut_tip] cut 260 tips[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 29 asymmetric arcs[M::asg_arc_del_short] removed 37 short overlaps[M::asg_cut_tip] cut 104 tips[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 1 asymmetric arcs[M::asg_arc_del_short] removed 1 short overlaps[M::asg_cut_tip] cut 3 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::asg_arc_del_short] removed 0 short overlaps[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===[M::asg_cut_internal] cut 0 internal sequences[M::asg_cut_biloop] cut 0 small bi-loops[M::asg_cut_tip] cut 0 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::main] ===> Step 4.5: aggressively cutting short overlaps <===[M::asg_arc_del_short] removed 0 short overlaps[M::main] ===> Step 5: generating unitigs <===[M::main] Version: 0.3-r179[M::main] CMD: miniasm -f /galaxy/server/database/objects/1/6/a/dataset_16af20b9-1ec2-45e8-abb5-bea1bdd1179b.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/c/0/d/dataset_c0d43144-479a-422d-a029-6a328848e187.dat[M::main] Real time: 0.290 sec; CPU: 0.289 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm (Test #2)" name="1" time="26.020347833633423">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::main] ===> Step 1: reading read mappings <===[M::ma_hit_read::0.243*1.00] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)[M::main] ===> Step 2: 1-pass (crude) read selection <===[M::ma_hit_sub::0.265*1.00] 10122 query sequences remain after sub[M::ma_hit_cut::0.270*1.00] 171862 hits remain after cut[M::ma_hit_flt::0.275*1.00] 165533 hits remain after filtering; crude coverage after filtering: 11.51[M::main] ===> Step 3: 2-pass (fine) read selection <===[M::ma_hit_sub::0.287*1.00] 9994 query sequences remain after sub[M::ma_hit_cut::0.292*1.00] 163595 hits remain after cut[M::ma_hit_contained::0.299*1.00] 1772 sequences and 10061 hits remain after containment removal[M::main] ===> Step 4: graph cleaning <===[M::ma_sg_gen] read 9758 arcs[M::main] ===> Step 4.1: transitive reduction <===[M::asg_arc_del_trans] transitively reduced 4694 arcs[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 484 asymmetric arcs[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===[M::asg_cut_tip] cut 282 tips[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 26 asymmetric arcs[M::asg_arc_del_short] removed 38 short overlaps[M::asg_cut_tip] cut 53 tips[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips[M::asg_arc_del_multi] removed 0 multi-arcs[M::asg_arc_del_asymm] removed 2 asymmetric arcs[M::asg_arc_del_short] removed 2 short overlaps[M::asg_cut_tip] cut 2 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===[M::asg_cut_internal] cut 0 internal sequences[M::asg_cut_biloop] cut 0 small bi-loops[M::asg_cut_tip] cut 0 tips[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips[M::main] ===> Step 4.5: aggressively cutting short overlaps <===[M::asg_arc_del_short] removed 0 short overlaps[M::main] ===> Step 5: generating unitigs <===[M::main] Version: 0.3-r179[M::main] CMD: miniasm -f /galaxy/server/database/objects/2/f/e/dataset_2fed784d-c0af-4901-86b1-c763abe3aebe.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/1/f/1/dataset_1f1a5002-a4c4-4b03-bf5f-1d833d140485.dat[M::main] Real time: 0.318 sec; CPU: 0.317 sec
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #1)" name="0" time="41.86599397659302">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "0da30115dbfc06dd",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "reference_source|ref_file": {   "id": "5eeb15d4991c76b8",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/8/f/0/dataset_8f04ee55-b38b-469d-b2c4-ac9c6cf3205e.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/7/c/0/dataset_7c02acbc-9c64-4e83-9fac-e3c10c2d5044.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/8/7/9/dataset_879549aa-721a-4a12-92fe-56e912b0bd03.dat\u0027",  "command_version": "2.17-r941\n",  "create_time": "2021-11-27T16:26:46.500954",  "exit_code": 0,  "external_id": "gxy-drlz2",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "9ae78af223e493c9",  "inputs": {   "fastq_input1": {    "id": "0da30115dbfc06dd",    "src": "hda",    "uuid": "7c02acbc-9c64-4e83-9fac-e3c10c2d5044"   },   "ref_file": {    "id": "5eeb15d4991c76b8",    "src": "hda",    "uuid": "8f04ee55-b38b-469d-b2c4-ac9c6cf3205e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030430.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:27:10"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030430.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:27:10"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.003*0.99] collected minimizers\n[M::mm_idx_gen::0.004*0.79] sorted minimizers\n[M::main::0.004*0.79] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*0.79] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*0.81] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*0.88] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/c/0/dataset_7c02acbc-9c64-4e83-9fac-e3c10c2d5044.dat\n[M::main] Real time: 0.010 sec; CPU: 0.008 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "outputs": {   "alignment_output": {    "id": "addef9cb055877db",    "src": "hda",    "uuid": "879549aa-721a-4a12-92fe-56e912b0bd03"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 122, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 126, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.003*0.99] collected minimizers\n[M::mm_idx_gen::0.004*0.79] sorted minimizers\n[M::main::0.004*0.79] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*0.79] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*0.81] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*0.88] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/c/0/dataset_7c02acbc-9c64-4e83-9fac-e3c10c2d5044.dat\n[M::main] Real time: 0.010 sec; CPU: 0.008 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:27:11.262498",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7q3md98a.sam v. /tmp/history_bam_converted_to_sam_xyxvz7wx.sam )\n--- local_file\n+++ history_data\n@@ -1,171 +1,171 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_19.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t*\t0\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\t*\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:18422:19051/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t*\t0\t0\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t*\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t*\t0\t0\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:18842:24844/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\t*\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t*\t0\t0\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5983:21093/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:7765:18353/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t*\t0\t0\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\t*\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:142\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:14060:21273/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S156M15S\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\t*\tNM:i:1\tms:i:302\tAS:i:302\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:14528:12993/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGAT\t*\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:17657:20856/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t90S161M\t*\t0\t0\tAAAGCGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\t*\tNM:i:1\tms:i:312\tAS:i:312\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16480,+,90M161S,60,2;\n-M01368:8:000000000-A3GHV:1:1103:25519:6301/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t18S184M49S\t*\t0\t0\tAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGCATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATTTCGT\t*\tNM:i:2\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:21\ts1:i:157\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1103:6074:6549/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t108S143M\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\t*\tNM:i:1\tms:i:276\tAS:i:276\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16462,+,108M143S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:11572:8264/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1104:12288:20635/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\t*\tNM:i:3\tms:i:262\tAS:i:262\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:109\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:13832:4398/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t7S132M112S\t*\t0\t0\tCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGACAAAAAAAAACACACAACAACCAACACCCAGTAGACTAGTGCGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1110:15519:10008/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t67M184H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1110:16700:6843/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t25H67M159H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,92S159M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:16531/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t5\t59M192H\t*\t0\t0\tGGTTCCTACTTCAAGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACA\t*\tNM:i:2\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:31\ts2:i:0\tde:f:0.0339\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:8665:25542/1\t2048\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701/1\t2064\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:27103:7153/1\t2064\tgi|251831106|ref|NC_012920.1|\t16508\t12\t7H62M182H\t*\t0\t0\tCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:114\tAS:i:114\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0161\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,69S182M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233/1\t2048\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794/1\t2064\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:17564:15723/1\t2064\tgi|251831106|ref|NC_012920.1|\t16512\t12\t58M193H\t*\t0\t0\tTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:106\tAS:i:106\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0172\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,58S193M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:18714:24788/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490/1\t2048\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050/1\t2064\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t*\t0\t0\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:8763:7859/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t19\t51M200H\t*\t0\t0\tGCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:100\tAS:i:100\tnn:i:0\ttp:A:P\tcm:i:4\ts1:i:38\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1113:5741:16959/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t11\t51M200H\t*\t0\t0\tTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:92\tAS:i:92\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:13575:19255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:16350:22621/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272/1\t2064\tgi|251831106|ref|NC_012920.1|\t16522\t11\t48M203H\t*\t0\t0\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145/1\t2048\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258/1\t2048\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t5H43M203H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:19224:11655/1\t2048\tgi|251831106|ref|NC_012920.1|\t16530\t11\t40M211H\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:80\tAS:i:80\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,40S186M25S,60,2;\trl:i:0\n" ], "status": "failure", "test_index": 0, "time_seconds": 41.86599397659302, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*0.99] collected minimizers[M::mm_idx_gen::0.004*0.79] sorted minimizers[M::main::0.004*0.79] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*0.79] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.004*0.81] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.009*0.88] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/c/0/dataset_7c02acbc-9c64-4e83-9fac-e3c10c2d5044.dat[M::main] Real time: 0.010 sec; CPU: 0.008 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #2)" name="1" time="41.23535132408142">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.94] collected minimizers[M::mm_idx_gen::0.005*0.80] sorted minimizers[M::main::0.005*0.81] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*0.81] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*0.82] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.010*1.11] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/c/0/dataset_7c02acbc-9c64-4e83-9fac-e3c10c2d5044.dat[M::main] Real time: 0.011 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #3)" name="2" time="33.06223464012146">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|fastq_input1": {   "id": "602f073861d0fb6c",   "src": "hda"  },  "fastq_input|fastq_input2": {   "id": "3e4333f137d77e6f",   "src": "hda"  },  "fastq_input|fastq_input_selector": "paired",  "reference_source|ref_file": {   "id": "84cae5f68485af6d",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/d/2/5/dataset_d25068fd-6d6f-4cec-85df-4e8f18169374.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/1/4/0/dataset_140b4724-016b-44ac-9d25-65aed1ed2908.dat\u0027 \u0027/galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/c/5/3/dataset_c53137b1-3ec8-48aa-8fbc-e52643be35c4.dat\u0027",  "command_version": "2.17-r941\n",  "create_time": "2021-11-27T16:27:02.442752",  "exit_code": 0,  "external_id": "gxy-2xc6l",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "6ff7bea04d567177",  "inputs": {   "fastq_input1": {    "id": "602f073861d0fb6c",    "src": "hda",    "uuid": "140b4724-016b-44ac-9d25-65aed1ed2908"   },   "fastq_input2": {    "id": "3e4333f137d77e6f",    "src": "hda",    "uuid": "e93aa990-e3b2-4ae2-990f-867a97da7df0"   },   "ref_file": {    "id": "84cae5f68485af6d",    "src": "hda",    "uuid": "d25068fd-6d6f-4cec-85df-4e8f18169374"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030436.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:27:16"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030436.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:27:16"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.004*0.92] collected minimizers\n[M::mm_idx_gen::0.006*0.74] sorted minimizers\n[M::main::0.006*0.74] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*0.74] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*0.75] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.21] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/4/0/dataset_140b4724-016b-44ac-9d25-65aed1ed2908.dat /galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat\n[M::main] Real time: 0.019 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "outputs": {   "alignment_output": {    "id": "3fe9e8ee4d1a32dc",    "src": "hda",    "uuid": "c53137b1-3ec8-48aa-8fbc-e52643be35c4"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 127, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.004*0.92] collected minimizers\n[M::mm_idx_gen::0.006*0.74] sorted minimizers\n[M::main::0.006*0.74] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*0.74] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*0.75] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.21] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/4/0/dataset_140b4724-016b-44ac-9d25-65aed1ed2908.dat /galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat\n[M::main] Real time: 0.019 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:27:18.106382",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_k4bwdnhz.sam v. /tmp/history_bam_converted_to_sam_l8mx4ur5.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1\u003e11111@11111A111A100000000////011110//\u003e\u003e/12@1@22B/////1@\u003e21/\u003e\u003e/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t\u003eA@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@\u003c1\u003e@FFFGHHHHFHEFGDABFFGG/@DCE\u003cCG1\u003cGF0/DD000=\u003cDHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#\u003eAABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA\u003c@HFDG0HHGGHGBDFGFG\u003cDDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11\u003e\u003eABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA\u003c.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF\u003cGGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n" ], "status": "failure", "test_index": 2, "time_seconds": 33.06223464012146, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.92] collected minimizers[M::mm_idx_gen::0.006*0.74] sorted minimizers[M::main::0.006*0.74] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*0.74] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*0.75] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.017*1.21] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/4/0/dataset_140b4724-016b-44ac-9d25-65aed1ed2908.dat /galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat[M::main] Real time: 0.019 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #4)" name="3" time="30.074300050735474">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|fastq_input1": {   "id": "265ee236fde0f3d7",   "src": "hda"  },  "fastq_input|fastq_input2": {   "id": "3e4333f137d77e6f",   "src": "hda"  },  "fastq_input|fastq_input_selector": "paired",  "reference_source|ref_file": {   "id": "84cae5f68485af6d",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/d/2/5/dataset_d25068fd-6d6f-4cec-85df-4e8f18169374.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/7/5/f/dataset_75fd22cf-ba1b-4443-a0d1-1f0b3578520b.dat\u0027 \u0027/galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/7/0/f/dataset_70fe45e2-1f33-4300-be6b-c87c7c9e2ab5.dat\u0027",  "command_version": "2.17-r941\n",  "create_time": "2021-11-27T16:27:10.772981",  "exit_code": 0,  "external_id": "gxy-pqcm9",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "27c27ec7d4e44146",  "inputs": {   "fastq_input1": {    "id": "265ee236fde0f3d7",    "src": "hda",    "uuid": "75fd22cf-ba1b-4443-a0d1-1f0b3578520b"   },   "fastq_input2": {    "id": "3e4333f137d77e6f",    "src": "hda",    "uuid": "e93aa990-e3b2-4ae2-990f-867a97da7df0"   },   "ref_file": {    "id": "84cae5f68485af6d",    "src": "hda",    "uuid": "d25068fd-6d6f-4cec-85df-4e8f18169374"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030438.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:27:18"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030438.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:27:18"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.003*1.10] collected minimizers\n[M::mm_idx_gen::0.004*1.18] sorted minimizers\n[M::main::0.004*1.18] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.18] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.014*1.43] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/5/f/dataset_75fd22cf-ba1b-4443-a0d1-1f0b3578520b.dat /galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat\n[M::main] Real time: 0.016 sec; CPU: 0.021 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "outputs": {   "alignment_output": {    "id": "d76f9279dbc5242c",    "src": "hda",    "uuid": "70fe45e2-1f33-4300-be6b-c87c7c9e2ab5"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 132, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.003*1.10] collected minimizers\n[M::mm_idx_gen::0.004*1.18] sorted minimizers\n[M::main::0.004*1.18] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.18] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.014*1.43] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/5/f/dataset_75fd22cf-ba1b-4443-a0d1-1f0b3578520b.dat /galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat\n[M::main] Real time: 0.016 sec; CPU: 0.021 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:27:20.563637",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_wd9sj_5s.sam v. /tmp/history_bam_converted_to_sam_rjzp3wng.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1\u003e11111@11111A111A100000000////011110//\u003e\u003e/12@1@22B/////1@\u003e21/\u003e\u003e/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t\u003eA@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@\u003c1\u003e@FFFGHHHHFHEFGDABFFGG/@DCE\u003cCG1\u003cGF0/DD000=\u003cDHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#\u003eAABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA\u003c@HFDG0HHGGHGBDFGFG\u003cDDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11\u003e\u003eABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA\u003c.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF\u003cGGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n" ], "status": "failure", "test_index": 3, "time_seconds": 30.074300050735474, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.10] collected minimizers[M::mm_idx_gen::0.004*1.18] sorted minimizers[M::main::0.004*1.18] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*1.18] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.004*1.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.014*1.43] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/5/f/dataset_75fd22cf-ba1b-4443-a0d1-1f0b3578520b.dat /galaxy/server/database/objects/e/9/3/dataset_e93aa990-e3b2-4ae2-990f-867a97da7df0.dat[M::main] Real time: 0.016 sec; CPU: 0.021 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #5)" name="4" time="25.209821224212646">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "fastq_input|fastq_input1": {   "id": "b033a1e063da37ba",   "src": "hdca"  },  "fastq_input|fastq_input_selector": "paired_collection",  "reference_source|ref_file": {   "id": "44311f5d566eeb2c",   "src": "hda"  },  "reference_source|reference_source_selector": "history" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/8/e/4/dataset_8e4fd76f-a45a-4fff-a20e-36c7d766f3d4.dat\u0027 reference.fa \u0026\u0026 minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa \u0027/galaxy/server/database/objects/0/6/0/dataset_060ec537-2a07-46c1-ac6c-0879679d37d6.dat\u0027 \u0027/galaxy/server/database/objects/6/0/0/dataset_600e22ea-622f-45a3-b081-8e5feb77e189.dat\u0027 -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o \u0027/galaxy/server/database/objects/c/2/8/dataset_c2841cab-c933-4880-a9ea-edf9fe58758f.dat\u0027",  "command_version": "2.17-r941\n",  "create_time": "2021-11-27T16:27:27.895978",  "exit_code": 0,  "external_id": "gxy-gc69x",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "6ed6f4e45e6eb401",  "inputs": {   "fastq_input11": {    "id": "faeeaf4e23a54805",    "src": "hda",    "uuid": "060ec537-2a07-46c1-ac6c-0879679d37d6"   },   "fastq_input12": {    "id": "094b3980747fe959",    "src": "hda",    "uuid": "600e22ea-622f-45a3-b081-8e5feb77e189"   },   "ref_file": {    "id": "44311f5d566eeb2c",    "src": "hda",    "uuid": "8e4fd76f-a45a-4fff-a20e-36c7d766f3d4"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1638030454.0000000",    "title": "Job End Time",    "value": "2021-11-27 16:27:34"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1638030454.0000000",    "title": "Job Start Time",    "value": "2021-11-27 16:27:34"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16000.0000000",    "title": "Memory Allocated (MB)",    "value": "16000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Cores Allocated",    "value": "2"   }  ],  "job_stderr": "[M::mm_idx_gen::0.003*1.00] collected minimizers\n[M::mm_idx_gen::0.005*1.14] sorted minimizers\n[M::main::0.005*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.14] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.14] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.47] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/6/0/dataset_060ec537-2a07-46c1-ac6c-0879679d37d6.dat /galaxy/server/database/objects/6/0/0/dataset_600e22ea-622f-45a3-b081-8e5feb77e189.dat\n[M::main] Real time: 0.018 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "job_stdout": "",  "model_class": "Job",  "outputs": {   "alignment_output": {    "id": "730fd81f68104dd0",    "src": "hda",    "uuid": "c2841cab-c933-4880-a9ea-edf9fe58758f"   }  },  "params": {   "__input_ext": "\"input\"",   "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}",   "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}",   "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}",   "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 136, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"  },  "state": "ok",  "stderr": "\n[M::mm_idx_gen::0.003*1.00] collected minimizers\n[M::mm_idx_gen::0.005*1.14] sorted minimizers\n[M::main::0.005*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.14] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.14] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.47] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/6/0/dataset_060ec537-2a07-46c1-ac6c-0879679d37d6.dat /galaxy/server/database/objects/6/0/0/dataset_600e22ea-622f-45a3-b081-8e5feb77e189.dat\n[M::main] Real time: 0.018 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T16:27:36.328311",  "user_email": "alex@fake.org" }, "output_problems": [  "Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_o_pef1v6.sam v. /tmp/history_bam_converted_to_sam_j1i4m0j_.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_16.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_17.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1\u003e11111@11111A111A100000000////011110//\u003e\u003e/12@1@22B/////1@\u003e21/\u003e\u003e/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t\u003eA@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@\u003c1\u003e@FFFGHHHHFHEFGDABFFGG/@DCE\u003cCG1\u003cGF0/DD000=\u003cDHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#\u003eAABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA\u003c@HFDG0HHGGHGBDFGFG\u003cDDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11\u003e\u003eABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA\u003c.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF\u003cGGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n" ], "status": "failure", "test_index": 4, "time_seconds": 25.209821224212646, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.00] collected minimizers[M::mm_idx_gen::0.005*1.14] sorted minimizers[M::main::0.005*1.14] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.14] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.14] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.017*1.47] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/6/0/dataset_060ec537-2a07-46c1-ac6c-0879679d37d6.dat /galaxy/server/database/objects/6/0/0/dataset_600e22ea-622f-45a3-b081-8e5feb77e189.dat[M::main] Real time: 0.018 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #6)" name="5" time="15.644240140914917">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: aptMan1,hg18,otoGar1,ce9,hg18nohaps,dasNov3,equCab2chrM,hg19_rCRS_pUC18_phiX174,CpipJ1,burkPseu_668,monDom5,anoGam1,calJac3canon,rn3canon,galGal4,caePb3,borEut13,felCat8,panTro1canon,tetNig1,tetNig2,equCab2,hg38canon,dm6,droGri1,hg19female,panTro2canon,ce10,tetNig2canon,xenTro1,gadMor1,petMar1,caeJap4,mm7canon,hg_g1k_v37,caePb2,fr1,ponAbe2,ce8,melUnd1,burkPseu_1106A,Amel_4.5,Bombyx_mori_p50T_2.0,galGal3,aplCal1,hg19chrM,xenTro3,mm10,hg19canon,rn3,bosTauMd3,Spur_v2.6,saiBol1,droVir2,echTel1,Hydra_JCVI,taeGut1,tetNig1canon,Araly1,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir3,mm9canon,fr2,danRer6,ci2canon,droMoj1,equCab1,monDom4,susScr2,rheMac2,galGal2,susScr1,burkPseu_K96243,droGri2,apiMel3,lMaj5,oviAri1,eschColi_O157H7_TW14359,sacCer2,galGal3canon,micMur1,PhumU1,papAnu2,tupBel1,droSim1,danRer2,danRer10,danRer4,eriEur1,bosTau6,mm8,rn4,canFam2,ce6,droEre1,nomLeu1,caeRem3,priPac1,apiMel1,droYak1,latCha1,strPur3,taeGut2,cb3canon,droMoj3,rn4canon,mm7,bosTau8,chrPic1,burkPseu_1710B,mm9female,caeJap2,Xanthomonas_oryzae_MAFF_311018,ce4,canFam1,felCat4,cavPor3,bosTau4,criGri1,braFlo1,dm3,droAna3,baciSubt,droMoj2,nomLeu3,caeRem4,dasNov1,choHof1,ailMel1,papHam1,eschColi_K12_W3110,ce7,bosTau3,droAna2,dm2,oryLat2,eschColi_O157H7,calJac3,pseuAeru_PAO1,oryCun2,caeRem1,ce2,pseuAeru_PA7,gorGor3,calJac1,mm9,oryLat1,xenTro2,apiMel2,droVir1,venter1,Tcas_3.0,caeRem2,melGal1,eschColi_O157H7_EDL933,AaegL1,caeJap3,sacCer1,danRer3,Homo_sapiens_AK1,turTru2,hg18chr21,gasAcu1,ce3,bordBron,galGal2canon,geoFor1,Arabidopsis_thaliana_TAIR10,eschColi_APEC_O1,sacCer3,musFur1,eschColi_K12_DH10B,hg18canon,phiX,oryLat2canon,mm8canon,hg38,Arabidopsis_thaliana_TAIR9,cb3full,droAna1,panTro3canon,pseuAeru_UCBPP_PA14,speTri2,hg17,hg19,ce5,eschColi_K12,Xanthomonas_oryzae_KACC10331,allMis1,droPer1,bosTau5,rn6,taeGut1canon,hg38female,oryCun1,vicPac2,27835,sarHar1,felCat4canon,Ptrichocarpa_156,triCas2,ci2full,monDom1,loxAfr3,droWil1,susScr3,eschColi_O157H7_EC4115,dp3,droYak2,anoCar1,IscaW1,caePb1,cerSim1,ornAna1,Schizosaccharomyces_pombe_1.1,bosTau2,dp4,sorAra1,Homo_sapiens_nuHg19_mtrCRS,myoLuc2,panTro2,Sscrofa9.58,Zea_mays_B73_RefGen_v2,panTro1,strePneu_R6,felCat5,loxAfr1,hg17canon,danRer5,ente638,Tcacao_1.0,eschColi_CFT073,panTro3full,panPan1,otoGar3,vicPac1,AgamP3,hetGla1,pUC18,Xanthomonas_oryzae_PXO99A,droSec1,felCat3,nomLeu2,panTro4,rn5,tarSyr1,hg19chrX,strPur2,canFam3,droEre2,rheMac3,dipOrd1,apiMel4,bosTau7,caeJap1,danRer7,anoCar2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: aptMan1,hg18,otoGar1,ce9,hg18nohaps,dasNov3,equCab2chrM,hg19_rCRS_pUC18_phiX174,CpipJ1,burkPseu_668,monDom5,anoGam1,calJac3canon,rn3canon,galGal4,caePb3,borEut13,felCat8,panTro1canon,tetNig1,tetNig2,equCab2,hg38canon,dm6,droGri1,hg19female,panTro2canon,ce10,tetNig2canon,xenTro1,gadMor1,petMar1,caeJap4,mm7canon,hg_g1k_v37,caePb2,fr1,ponAbe2,ce8,melUnd1,burkPseu_1106A,Amel_4.5,Bombyx_mori_p50T_2.0,galGal3,aplCal1,hg19chrM,xenTro3,mm10,hg19canon,rn3,bosTauMd3,Spur_v2.6,saiBol1,droVir2,echTel1,Hydra_JCVI,taeGut1,tetNig1canon,Araly1,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir3,mm9canon,fr2,danRer6,ci2canon,droMoj1,equCab1,monDom4,susScr2,rheMac2,galGal2,susScr1,burkPseu_K96243,droGri2,apiMel3,lMaj5,oviAri1,eschColi_O157H7_TW14359,sacCer2,galGal3canon,micMur1,PhumU1,papAnu2,tupBel1,droSim1,danRer2,danRer10,danRer4,eriEur1,bosTau6,mm8,rn4,canFam2,ce6,droEre1,nomLeu1,caeRem3,priPac1,apiMel1,droYak1,latCha1,strPur3,taeGut2,cb3canon,droMoj3,rn4canon,mm7,bosTau8,chrPic1,burkPseu_1710B,mm9female,caeJap2,Xanthomonas_oryzae_MAFF_311018,ce4,canFam1,felCat4,cavPor3,bosTau4,criGri1,braFlo1,dm3,droAna3,baciSubt,droMoj2,nomLeu3,caeRem4,dasNov1,choHof1,ailMel1,papHam1,eschColi_K12_W3110,ce7,bosTau3,droAna2,dm2,oryLat2,eschColi_O157H7,calJac3,pseuAeru_PAO1,oryCun2,caeRem1,ce2,pseuAeru_PA7,gorGor3,calJac1,mm9,oryLat1,xenTro2,apiMel2,droVir1,venter1,Tcas_3.0,caeRem2,melGal1,eschColi_O157H7_EDL933,AaegL1,caeJap3,sacCer1,danRer3,Homo_sapiens_AK1,turTru2,hg18chr21,gasAcu1,ce3,bordBron,galGal2canon,geoFor1,Arabidopsis_thaliana_TAIR10,eschColi_APEC_O1,sacCer3,musFur1,eschColi_K12_DH10B,hg18canon,phiX,oryLat2canon,mm8canon,hg38,Arabidopsis_thaliana_TAIR9,cb3full,droAna1,panTro3canon,pseuAeru_UCBPP_PA14,speTri2,hg17,hg19,ce5,eschColi_K12,Xanthomonas_oryzae_KACC10331,allMis1,droPer1,bosTau5,rn6,taeGut1canon,hg38female,oryCun1,vicPac2,27835,sarHar1,felCat4canon,Ptrichocarpa_156,triCas2,ci2full,monDom1,loxAfr3,droWil1,susScr3,eschColi_O157H7_EC4115,dp3,droYak2,anoCar1,IscaW1,caePb1,cerSim1,ornAna1,Schizosaccharomyces_pombe_1.1,bosTau2,dp4,sorAra1,Homo_sapiens_nuHg19_mtrCRS,myoLuc2,panTro2,Sscrofa9.58,Zea_mays_B73_RefGen_v2,panTro1,strePneu_R6,felCat5,loxAfr1,hg17canon,danRer5,ente638,Tcacao_1.0,eschColi_CFT073,panTro3full,panPan1,otoGar3,vicPac1,AgamP3,hetGla1,pUC18,Xanthomonas_oryzae_PXO99A,droSec1,felCat3,nomLeu2,panTro4,rn5,tarSyr1,hg19chrX,strPur2,canFam3,droEre2,rheMac3,dipOrd1,apiMel4,bosTau7,caeJap1,danRer7,anoCar2)", "inputs": {  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "b8ede519b403af2c",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 5, "time_seconds": 15.644240140914917, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #7)" name="6" time="17.781912803649902">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: aptMan1,hg18,otoGar1,ce9,hg18nohaps,dasNov3,equCab2chrM,hg19_rCRS_pUC18_phiX174,CpipJ1,burkPseu_668,monDom5,anoGam1,calJac3canon,rn3canon,galGal4,caePb3,borEut13,felCat8,panTro1canon,tetNig1,tetNig2,equCab2,hg38canon,dm6,droGri1,hg19female,panTro2canon,ce10,tetNig2canon,xenTro1,gadMor1,petMar1,caeJap4,mm7canon,hg_g1k_v37,caePb2,fr1,ponAbe2,ce8,melUnd1,burkPseu_1106A,Amel_4.5,Bombyx_mori_p50T_2.0,galGal3,aplCal1,hg19chrM,xenTro3,mm10,hg19canon,rn3,bosTauMd3,Spur_v2.6,saiBol1,droVir2,echTel1,Hydra_JCVI,taeGut1,tetNig1canon,Araly1,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir3,mm9canon,fr2,danRer6,ci2canon,droMoj1,equCab1,monDom4,susScr2,rheMac2,galGal2,susScr1,burkPseu_K96243,droGri2,apiMel3,lMaj5,oviAri1,eschColi_O157H7_TW14359,sacCer2,galGal3canon,micMur1,PhumU1,papAnu2,tupBel1,droSim1,danRer2,danRer10,danRer4,eriEur1,bosTau6,mm8,rn4,canFam2,ce6,droEre1,nomLeu1,caeRem3,priPac1,apiMel1,droYak1,latCha1,strPur3,taeGut2,cb3canon,droMoj3,rn4canon,mm7,bosTau8,chrPic1,burkPseu_1710B,mm9female,caeJap2,Xanthomonas_oryzae_MAFF_311018,ce4,canFam1,felCat4,cavPor3,bosTau4,criGri1,braFlo1,dm3,droAna3,baciSubt,droMoj2,nomLeu3,caeRem4,dasNov1,choHof1,ailMel1,papHam1,eschColi_K12_W3110,ce7,bosTau3,droAna2,dm2,oryLat2,eschColi_O157H7,calJac3,pseuAeru_PAO1,oryCun2,caeRem1,ce2,pseuAeru_PA7,gorGor3,calJac1,mm9,oryLat1,xenTro2,apiMel2,droVir1,venter1,Tcas_3.0,caeRem2,melGal1,eschColi_O157H7_EDL933,AaegL1,caeJap3,sacCer1,danRer3,Homo_sapiens_AK1,turTru2,hg18chr21,gasAcu1,ce3,bordBron,galGal2canon,geoFor1,Arabidopsis_thaliana_TAIR10,eschColi_APEC_O1,sacCer3,musFur1,eschColi_K12_DH10B,hg18canon,phiX,oryLat2canon,mm8canon,hg38,Arabidopsis_thaliana_TAIR9,cb3full,droAna1,panTro3canon,pseuAeru_UCBPP_PA14,speTri2,hg17,hg19,ce5,eschColi_K12,Xanthomonas_oryzae_KACC10331,allMis1,droPer1,bosTau5,rn6,taeGut1canon,hg38female,oryCun1,vicPac2,27835,sarHar1,felCat4canon,Ptrichocarpa_156,triCas2,ci2full,monDom1,loxAfr3,droWil1,susScr3,eschColi_O157H7_EC4115,dp3,droYak2,anoCar1,IscaW1,caePb1,cerSim1,ornAna1,Schizosaccharomyces_pombe_1.1,bosTau2,dp4,sorAra1,Homo_sapiens_nuHg19_mtrCRS,myoLuc2,panTro2,Sscrofa9.58,Zea_mays_B73_RefGen_v2,panTro1,strePneu_R6,felCat5,loxAfr1,hg17canon,danRer5,ente638,Tcacao_1.0,eschColi_CFT073,panTro3full,panPan1,otoGar3,vicPac1,AgamP3,hetGla1,pUC18,Xanthomonas_oryzae_PXO99A,droSec1,felCat3,nomLeu2,panTro4,rn5,tarSyr1,hg19chrX,strPur2,canFam3,droEre2,rheMac3,dipOrd1,apiMel4,bosTau7,caeJap1,danRer7,anoCar2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: aptMan1,hg18,otoGar1,ce9,hg18nohaps,dasNov3,equCab2chrM,hg19_rCRS_pUC18_phiX174,CpipJ1,burkPseu_668,monDom5,anoGam1,calJac3canon,rn3canon,galGal4,caePb3,borEut13,felCat8,panTro1canon,tetNig1,tetNig2,equCab2,hg38canon,dm6,droGri1,hg19female,panTro2canon,ce10,tetNig2canon,xenTro1,gadMor1,petMar1,caeJap4,mm7canon,hg_g1k_v37,caePb2,fr1,ponAbe2,ce8,melUnd1,burkPseu_1106A,Amel_4.5,Bombyx_mori_p50T_2.0,galGal3,aplCal1,hg19chrM,xenTro3,mm10,hg19canon,rn3,bosTauMd3,Spur_v2.6,saiBol1,droVir2,echTel1,Hydra_JCVI,taeGut1,tetNig1canon,Araly1,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir3,mm9canon,fr2,danRer6,ci2canon,droMoj1,equCab1,monDom4,susScr2,rheMac2,galGal2,susScr1,burkPseu_K96243,droGri2,apiMel3,lMaj5,oviAri1,eschColi_O157H7_TW14359,sacCer2,galGal3canon,micMur1,PhumU1,papAnu2,tupBel1,droSim1,danRer2,danRer10,danRer4,eriEur1,bosTau6,mm8,rn4,canFam2,ce6,droEre1,nomLeu1,caeRem3,priPac1,apiMel1,droYak1,latCha1,strPur3,taeGut2,cb3canon,droMoj3,rn4canon,mm7,bosTau8,chrPic1,burkPseu_1710B,mm9female,caeJap2,Xanthomonas_oryzae_MAFF_311018,ce4,canFam1,felCat4,cavPor3,bosTau4,criGri1,braFlo1,dm3,droAna3,baciSubt,droMoj2,nomLeu3,caeRem4,dasNov1,choHof1,ailMel1,papHam1,eschColi_K12_W3110,ce7,bosTau3,droAna2,dm2,oryLat2,eschColi_O157H7,calJac3,pseuAeru_PAO1,oryCun2,caeRem1,ce2,pseuAeru_PA7,gorGor3,calJac1,mm9,oryLat1,xenTro2,apiMel2,droVir1,venter1,Tcas_3.0,caeRem2,melGal1,eschColi_O157H7_EDL933,AaegL1,caeJap3,sacCer1,danRer3,Homo_sapiens_AK1,turTru2,hg18chr21,gasAcu1,ce3,bordBron,galGal2canon,geoFor1,Arabidopsis_thaliana_TAIR10,eschColi_APEC_O1,sacCer3,musFur1,eschColi_K12_DH10B,hg18canon,phiX,oryLat2canon,mm8canon,hg38,Arabidopsis_thaliana_TAIR9,cb3full,droAna1,panTro3canon,pseuAeru_UCBPP_PA14,speTri2,hg17,hg19,ce5,eschColi_K12,Xanthomonas_oryzae_KACC10331,allMis1,droPer1,bosTau5,rn6,taeGut1canon,hg38female,oryCun1,vicPac2,27835,sarHar1,felCat4canon,Ptrichocarpa_156,triCas2,ci2full,monDom1,loxAfr3,droWil1,susScr3,eschColi_O157H7_EC4115,dp3,droYak2,anoCar1,IscaW1,caePb1,cerSim1,ornAna1,Schizosaccharomyces_pombe_1.1,bosTau2,dp4,sorAra1,Homo_sapiens_nuHg19_mtrCRS,myoLuc2,panTro2,Sscrofa9.58,Zea_mays_B73_RefGen_v2,panTro1,strePneu_R6,felCat5,loxAfr1,hg17canon,danRer5,ente638,Tcacao_1.0,eschColi_CFT073,panTro3full,panPan1,otoGar3,vicPac1,AgamP3,hetGla1,pUC18,Xanthomonas_oryzae_PXO99A,droSec1,felCat3,nomLeu2,panTro4,rn5,tarSyr1,hg19chrX,strPur2,canFam3,droEre2,rheMac3,dipOrd1,apiMel4,bosTau7,caeJap1,danRer7,anoCar2)", "inputs": {  "alignment_options|A": "2",  "alignment_options|B": "8",  "alignment_options|E": "2",  "alignment_options|E2": "1",  "alignment_options|O": "12",  "alignment_options|O2": "32",  "alignment_options|s": "40",  "alignment_options|z": "400",  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "b8ede519b403af2c",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "mapping_options|min_occ_floor": "1000",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 6, "time_seconds": 17.781912803649902, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #8)" name="7" time="25.722114086151123">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.016*0.90] collected minimizers[M::mm_idx_gen::0.029*1.38] sorted minimizers[M::main::0.029*1.38] loaded/built the index for 25 target sequence(s)[M::mm_mapopt_update::0.031*1.36] mid_occ = 3[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25[M::mm_idx_stat::0.033*1.34] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935[M::worker_pipeline::0.042*1.40] mapped 25 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/8/1/a/dataset_81a65d50-1f64-4310-8821-f69874479b51.dat[M::main] Real time: 0.047 sec; CPU: 0.063 sec; Peak RSS: 0.009 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2 (Test #9)" name="8" time="22.03416419029236">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.79] collected minimizers[M::mm_idx_gen::0.005*0.89] sorted minimizers[M::main::0.005*0.89] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*0.90] mid_occ = 9[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*0.90] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057[M::worker_pipeline::0.069*0.98] mapped 1 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/5/8/2/dataset_5829d891-e3aa-4f8d-ba5b-1815a476a46e.dat[M::main] Real time: 0.070 sec; CPU: 0.069 sec; Peak RSS: 0.010 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #1)" name="0" time="1840.2409811019897">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "graph_clean|min_component_size": "1000",  "graph_clean|min_dead_end_size": "1000",  "linear_seqs": "0",  "lr_align|scores": "3,-6,-5,-2",  "min_fasta_length": "100",  "mode": "normal",  "paired_unpaired|fastq_input1": {   "id": "f08c54dcadd50a6a",   "src": "hda"  },  "paired_unpaired|fastq_input2": {   "id": "55400332a5736edd",   "src": "hda"  },  "paired_unpaired|fastq_input_selector": "paired",  "pilon|min_polish_size": "1000",  "pilon|no_pilon": false,  "rotation|no_rotate": false,  "rotation|start_gene_cov": "95",  "rotation|start_gene_id": "90",  "spades|depth_filter": "0.25",  "spades|kmer_count": "10",  "spades|max_kmer_frac": "0.95",  "spades|min_kmer_frac": "0.2",  "spades|no_correct": true }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/c/c/8/dataset_cc83c32c-eff0-4d13-a26b-fac5913e0632.dat\u0027 fq1.fastq \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/2/8/2/dataset_282a74ab-deb6-4402-b1d9-f8dae890fae0.dat\u0027 fq2.fastq \u0026\u0026 pilon=`pilon --jar_dir` \u0026\u0026 unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 \u0027fq1.fastq\u0027 -2 \u0027fq2.fastq\u0027 --mode \u0027normal\u0027 --min_fasta_length \u0027100\u0027 --linear_seqs \u00270\u0027 --no_correct --min_kmer_frac \u00270.2\u0027 --max_kmer_frac \u00270.95\u0027 --kmer_count \u002710\u0027 --depth_filter \u00270.25\u0027  --start_gene_id \u002790.0\u0027 --start_gene_cov \u002795.0\u0027  --min_polish_size \u00271000\u0027 --min_component_size \u00271000\u0027 --min_dead_end_size \u00271000\u0027 --scores \u00273,-6,-5,-2\u0027",  "command_version": null,  "create_time": "2021-11-27T16:33:27.216836",  "exit_code": null,  "external_id": "gxy-ptmrp",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "77ce058debd3f9a8",  "inputs": {   "fastq_input1": {    "id": "f08c54dcadd50a6a",    "src": "hda",    "uuid": "cc83c32c-eff0-4d13-a26b-fac5913e0632"   },   "fastq_input2": {    "id": "55400332a5736edd",    "src": "hda",    "uuid": "282a74ab-deb6-4402-b1d9-f8dae890fae0"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "assembly": {    "id": "a6079d5faee94d87",    "src": "hda",    "uuid": "d3f88884-623d-450b-a4f8-737463372419"   },   "assembly_graph": {    "id": "c2c5eba09a491efb",    "src": "hda",    "uuid": "49071cd5-d8b1-457f-85be-446f2c63d399"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",   "linear_seqs": "\"0\"",   "long": null,   "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}",   "min_anchor_seg_len": "\"\"",   "min_fasta_length": "\"100\"",   "mode": "\"normal\"",   "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 261, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 262, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}",   "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",   "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:03:46.818690",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 1840.2409811019897, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #2)" name="1" time="1838.7827577590942">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "graph_clean|min_component_size": "1000",  "graph_clean|min_dead_end_size": "1000",  "linear_seqs": "0",  "long": {   "id": "047bcf82eb8e8460",   "src": "hda"  },  "lr_align|scores": "3,-6,-5,-2",  "min_fasta_length": "100",  "mode": "normal",  "paired_unpaired|fastq_input1": {   "id": "f08c54dcadd50a6a",   "src": "hda"  },  "paired_unpaired|fastq_input2": {   "id": "55400332a5736edd",   "src": "hda"  },  "paired_unpaired|fastq_input_selector": "paired",  "pilon|min_polish_size": "1000",  "pilon|no_pilon": false,  "rotation|no_rotate": false,  "rotation|start_gene_cov": "95",  "rotation|start_gene_id": "90",  "spades|depth_filter": "0.25",  "spades|kmer_count": "10",  "spades|max_kmer_frac": "0.95",  "spades|min_kmer_frac": "0.2",  "spades|no_correct": true }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/c/c/8/dataset_cc83c32c-eff0-4d13-a26b-fac5913e0632.dat\u0027 fq1.fastq \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/2/8/2/dataset_282a74ab-deb6-4402-b1d9-f8dae890fae0.dat\u0027 fq2.fastq \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/a/1/2/dataset_a120b1b7-894f-420e-b58c-d1703c6ef19d.dat\u0027 \u0027lr.fasta\u0027 \u0026\u0026 pilon=`pilon --jar_dir` \u0026\u0026 unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 \u0027fq1.fastq\u0027 -2 \u0027fq2.fastq\u0027 -l lr.fasta --mode \u0027normal\u0027 --min_fasta_length \u0027100\u0027 --linear_seqs \u00270\u0027 --no_correct --min_kmer_frac \u00270.2\u0027 --max_kmer_frac \u00270.95\u0027 --kmer_count \u002710\u0027 --depth_filter \u00270.25\u0027  --start_gene_id \u002790.0\u0027 --start_gene_cov \u002795.0\u0027  --min_polish_size \u00271000\u0027 --min_component_size \u00271000\u0027 --min_dead_end_size \u00271000\u0027 --scores \u00273,-6,-5,-2\u0027",  "command_version": null,  "create_time": "2021-11-27T16:33:41.750971",  "exit_code": null,  "external_id": "gxy-bjmpk",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "96d6b289544809d1",  "inputs": {   "fastq_input1": {    "id": "f08c54dcadd50a6a",    "src": "hda",    "uuid": "cc83c32c-eff0-4d13-a26b-fac5913e0632"   },   "fastq_input2": {    "id": "55400332a5736edd",    "src": "hda",    "uuid": "282a74ab-deb6-4402-b1d9-f8dae890fae0"   },   "long": {    "id": "047bcf82eb8e8460",    "src": "hda",    "uuid": "a120b1b7-894f-420e-b58c-d1703c6ef19d"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "assembly": {    "id": "6f37627df07ad7e6",    "src": "hda",    "uuid": "b81423f3-20be-4132-8b78-d0c58ff9672f"   },   "assembly_graph": {    "id": "25292b7e6cc3d196",    "src": "hda",    "uuid": "81c1f050-3796-41f0-af13-59497b133295"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",   "linear_seqs": "\"0\"",   "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}",   "min_anchor_seg_len": "\"\"",   "min_fasta_length": "\"100\"",   "mode": "\"normal\"",   "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 261, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 262, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}",   "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}",   "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",   "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:03:46.849012",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 1, "time_seconds": 1838.7827577590942, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #3)" name="2" time="1824.5184071063995">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "graph_clean|min_component_size": "1000",  "graph_clean|min_dead_end_size": "1000",  "linear_seqs": "0",  "lr_align|scores": "3,-6,-5,-2",  "min_fasta_length": "100",  "mode": "normal",  "paired_unpaired|fastq_input1": {   "id": "097b2f57ba466a46",   "src": "hdca"  },  "paired_unpaired|fastq_input_selector": "paired_collection",  "pilon|min_polish_size": "1000",  "pilon|no_pilon": true,  "rotation|no_rotate": false,  "rotation|start_gene_cov": "95",  "rotation|start_gene_id": "90",  "spades|depth_filter": "0.25",  "spades|kmer_count": "10",  "spades|max_kmer_frac": "0.95",  "spades|min_kmer_frac": "0.2",  "spades|no_correct": true }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/c/c/8/dataset_cc83c32c-eff0-4d13-a26b-fac5913e0632.dat\u0027 fq1.fastq \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/2/8/2/dataset_282a74ab-deb6-4402-b1d9-f8dae890fae0.dat\u0027 fq2.fastq \u0026\u0026 pilon=`pilon --jar_dir` \u0026\u0026 unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 \u0027fq1.fastq\u0027 -2 \u0027fq2.fastq\u0027 --mode \u0027normal\u0027 --min_fasta_length \u0027100\u0027 --linear_seqs \u00270\u0027 --no_correct --min_kmer_frac \u00270.2\u0027 --max_kmer_frac \u00270.95\u0027 --kmer_count \u002710\u0027 --depth_filter \u00270.25\u0027  --start_gene_id \u002790.0\u0027 --start_gene_cov \u002795.0\u0027 --no_pilon --min_polish_size \u00271000\u0027 --min_component_size \u00271000\u0027 --min_dead_end_size \u00271000\u0027 --scores \u00273,-6,-5,-2\u0027",  "command_version": null,  "create_time": "2021-11-27T16:33:42.568838",  "exit_code": null,  "external_id": "gxy-mdgsx",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "d6df486b047d293d",  "inputs": {   "fastq_input11": {    "id": "f08c54dcadd50a6a",    "src": "hda",    "uuid": "cc83c32c-eff0-4d13-a26b-fac5913e0632"   },   "fastq_input12": {    "id": "55400332a5736edd",    "src": "hda",    "uuid": "282a74ab-deb6-4402-b1d9-f8dae890fae0"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "assembly": {    "id": "95ed43965db18dff",    "src": "hda",    "uuid": "103499df-c3ea-4192-ab23-26e539244fe7"   },   "assembly_graph": {    "id": "7843b51f8ef788a4",    "src": "hda",    "uuid": "be39c134-749f-4fd8-9755-b4fc2be7cf71"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",   "linear_seqs": "\"0\"",   "long": null,   "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}",   "min_anchor_seg_len": "\"\"",   "min_fasta_length": "\"100\"",   "mode": "\"normal\"",   "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 4, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}",   "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"true\"}",   "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",   "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:03:47.970666",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 1824.5184071063995, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler (Test #4)" name="3" time="1816.8973264694214">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "long": {   "id": "beaeaf337e8f9b79",   "src": "hda"  },  "min_anchor_seg_len": "10",  "paired_unpaired|fastq_input_selector": "none",  "spades|kmers": "21,23" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/8/1/d/dataset_81d5572b-bbd4-4a48-a147-30ac56800676.dat\u0027 \u0027lr.fasta\u0027 \u0026\u0026 pilon=`pilon --jar_dir` \u0026\u0026 unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -l lr.fasta --mode \u0027normal\u0027 --min_fasta_length \u0027100\u0027 --linear_seqs \u00270\u0027 --min_anchor_seg_len \u002710\u0027  --min_kmer_frac \u00270.2\u0027 --max_kmer_frac \u00270.95\u0027 --kmers \u002721,23\u0027 --kmer_count \u002710\u0027 --depth_filter \u00270.25\u0027  --start_gene_id \u002790.0\u0027 --start_gene_cov \u002795.0\u0027  --min_polish_size \u00271000\u0027 --min_component_size \u00271000\u0027 --min_dead_end_size \u00271000\u0027 --scores \u00273,-6,-5,-2\u0027",  "command_version": null,  "create_time": "2021-11-27T16:33:47.217190",  "exit_code": null,  "external_id": "gxy-7nvcv",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "2bd7f1c69ee4a31d",  "inputs": {   "long": {    "id": "beaeaf337e8f9b79",    "src": "hda",    "uuid": "81d5572b-bbd4-4a48-a147-30ac56800676"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "assembly": {    "id": "b602be3d47bf394f",    "src": "hda",    "uuid": "486ee3db-3301-4fa1-8716-a53ac7075107"   },   "assembly_graph": {    "id": "7d60c97069e841e1",    "src": "hda",    "uuid": "0285914f-7f4f-4987-901e-6ea12e922623"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",   "linear_seqs": "\"0\"",   "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}",   "min_anchor_seg_len": "\"10\"",   "min_fasta_length": "\"100\"",   "mode": "\"normal\"",   "paired_unpaired": "{\"__current_case__\": 3, \"fastq_input_selector\": \"none\"}",   "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}",   "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",   "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"21,23\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"false\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:03:51.580882",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 3, "time_seconds": 1816.8973264694214, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count (Test #1)" name="0" time="37.111605405807495">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Extract exon regions from  /galaxy/server/database/objects/f/2/e/dataset_f2e6835e-8a21-4c00-8fd2-64fa0bb8fd72.dat...Counting total fragment ...  DoneTotal fragment = 20.0                Total exonic fragment = 2.0                  1 transcripts finished 2 transcripts finished 3 transcripts finished 4 transcripts finished 5 transcripts finished 6 transcripts finished 7 transcripts finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size (Test #1)" name="0" time="38.4758243560791">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation (Test #1)" name="0" time="27.80012011528015">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  Doneshuffling alignments ... Donesampling 5% (245) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 10% (491) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 15% (737) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 20% (983) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 25% (1229) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 30% (1474) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 35% (1720) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 40% (1966) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 45% (2212) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 50% (2458) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 55% (2703) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 60% (2949) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 65% (3195) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 70% (3441) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 75% (3687) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 80% (3932) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 85% (4178) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 90% (4424) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 95% (4670) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...sampling 100% (4916) fragments ...assign reads to transcripts in /galaxy/server/database/objects/9/2/8/dataset_92807f4a-047e-4684-85ae-ca7aea98fc87.dat ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #1)" name="0" time="36.22624349594116">
        
            
            <system-out><![CDATA[
            Skip multi-hits:FalseRun wigToBigWig outfile.wig /galaxy/server/database/objects/5/a/2/dataset_5a204980-404c-4e60-b130-8ba4b58dd723.dat outfile.bw 
            ]]></system-out>
            <system-err><![CDATA[
            No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #2)" name="1" time="33.715559005737305">
        
            
            <system-out><![CDATA[
            Skip multi-hits:TrueRun wigToBigWig outfile.wig /galaxy/server/database/objects/c/8/d/dataset_c8dfeb80-d838-43cd-b044-1a7abdff68b3.dat outfile.bw 
            ]]></system-out>
            <system-err><![CDATA[
            No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #3)" name="2" time="34.09610319137573">
        
            
            <system-out><![CDATA[
            Skip multi-hits:False
            ]]></system-out>
            <system-err><![CDATA[
            No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig (Test #4)" name="3" time="34.941354751586914">
        
            
            <system-out><![CDATA[
            Skip multi-hits:FalseRun wigToBigWig outfile.wig /galaxy/server/database/objects/c/8/d/dataset_c8dfeb80-d838-43cd-b044-1a7abdff68b3.dat outfile.bw 
            ]]></system-out>
            <system-err><![CDATA[
            Calcualte wigsum ... No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skippedtotal wigsum is:1960.0No alignments for chr19_gl000208_random. skippedNo alignments for chr21_gl000210_random. skippedNo alignments for chr6_apd_hap1. skippedProcessing chr13 ...Processing chr12 ...Processing chr11 ...Processing chr10 ...Processing chr17 ...Processing chr16 ...Processing chr15 ...Processing chr14 ...Processing chr19 ...Processing chr18 ...No alignments for chr9_gl000198_random. skippedNo alignments for chrUn_gl000239. skippedNo alignments for chrUn_gl000238. skippedNo alignments for chrUn_gl000233. skippedNo alignments for chrUn_gl000232. skippedNo alignments for chrUn_gl000231. skippedNo alignments for chrUn_gl000230. skippedNo alignments for chrUn_gl000237. skippedNo alignments for chrUn_gl000236. skippedNo alignments for chrUn_gl000235. skippedNo alignments for chrUn_gl000234. skippedNo alignments for chr6_qbl_hap6. skippedNo alignments for chr11_gl000202_random. skippedNo alignments for chr17_gl000206_random. skippedNo alignments for chr6_cox_hap2. skippedNo alignments for chr4_gl000193_random. skippedNo alignments for chrUn_gl000248. skippedNo alignments for chrUn_gl000249. skippedNo alignments for chrUn_gl000246. skippedNo alignments for chrUn_gl000247. skippedNo alignments for chrUn_gl000244. skippedNo alignments for chrUn_gl000245. skippedNo alignments for chrUn_gl000242. skippedNo alignments for chrUn_gl000243. skippedNo alignments for chrUn_gl000240. skippedNo alignments for chrUn_gl000241. skippedNo alignments for chr17_gl000204_random. skippedNo alignments for chr17_ctg5_hap1. skippedNo alignments for chr17_gl000205_random. skippedNo alignments for chr9_gl000199_random. skippedNo alignments for chr9_gl000201_random. skippedProcessing chr8 ...No alignments for chr6_ssto_hap7. skippedNo alignments for chr8_gl000197_random. skippedNo alignments for chr6_dbb_hap3. skippedNo alignments for chr7_gl000195_random. skippedNo alignments for chr1_gl000191_random. skippedNo alignments for chr4_ctg9_hap1. skippedProcessing chr3 ...No alignments for chrUn_gl000229. skippedProcessing chr1 ...No alignments for chr17_gl000203_random. skippedNo alignments for chr4_gl000194_random. skippedProcessing chrY ...Processing chrX ...No alignments for chr9_gl000200_random. skippedProcessing chr9 ...Processing chrM ...No alignments for chr8_gl000196_random. skippedNo alignments for chr6_mann_hap4. skippedNo alignments for chrUn_gl000211. skippedNo alignments for chrUn_gl000213. skippedNo alignments for chrUn_gl000212. skippedNo alignments for chrUn_gl000215. skippedNo alignments for chrUn_gl000214. skippedNo alignments for chrUn_gl000217. skippedNo alignments for chrUn_gl000216. skippedNo alignments for chrUn_gl000219. skippedNo alignments for chrUn_gl000218. skippedNo alignments for chr19_gl000209_random. skippedProcessing chr22 ...Processing chr20 ...Processing chr21 ...No alignments for chr6_mcf_hap5. skippedProcessing chr7 ...Processing chr6 ...Processing chr5 ...Processing chr4 ...No alignments for chrUn_gl000228. skippedProcessing chr2 ...No alignments for chr1_gl000192_random. skippedNo alignments for chrUn_gl000224. skippedNo alignments for chrUn_gl000225. skippedNo alignments for chrUn_gl000226. skippedNo alignments for chrUn_gl000227. skippedNo alignments for chrUn_gl000220. skippedNo alignments for chrUn_gl000221. skippedNo alignments for chrUn_gl000222. skippedNo alignments for chrUn_gl000223. skippedNo alignments for chr18_gl000207_random. skipped/bin/sh: wigToBigWig: not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat (Test #1)" name="0" time="18.726496696472168">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile (Test #1)" name="0" time="65.20350790023804">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  DoneTotoal reads used: 40
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile (Test #2)" name="1" time="33.883418798446655">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  DoneTotoal reads used: 40
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile (Test #1)" name="0" time="19.157262802124023">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Process BAM file ...  Total reads used: 0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage (Test #1)" name="0" time="40.87800121307373">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            @ 2021-11-27 16:23:50: Read BED file (reference gene model) ...@ 2021-11-27 16:23:50: Total 7 transcripts loaded@ 2021-11-27 16:23:50: Get BAM file(s) ...pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam@ 2021-11-27 16:23:50: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...SampleSkewnesspairend_strandspecific_51mer_hg19_chr1_1_100000_bam3.366683083597443@ 2021-11-27 16:23:50: Running R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage (Test #2)" name="1" time="41.97399616241455">
        
            
            <system-out><![CDATA[
            null device           1 null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            @ 2021-11-27 16:23:53: Read BED file (reference gene model) ...@ 2021-11-27 16:23:53: Total 7 transcripts loaded@ 2021-11-27 16:23:53: Get BAM file(s) ...pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bampairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bampairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam@ 2021-11-27 16:23:53: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...@ 2021-11-27 16:23:53: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...@ 2021-11-27 16:23:53: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...SampleSkewnesspairend_strandspecific_51mer_hg19_chr1_1_100000_bam3.366683083597443pairend_strandspecific_51mer_hg19_chr1_1_100000_bam.13.366683083597443pairend_strandspecific_51mer_hg19_chr1_1_100000_bam.23.366683083597443@ 2021-11-27 16:23:53: Running R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2 (Test #1)" name="0" time="67.88668608665466">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            calculating coverage over gene body ...  1 genes finished  2 genes finished  5 genes finished  6 genes finished  7 genes finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment (Test #1)" name="0" time="39.71194791793823">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Reading reference gene model /galaxy/server/database/objects/a/4/7/dataset_a4786175-9be1-412e-a904-fa258e74a9fc.dat ... DoneLoading SAM/BAM file ...  FinishedTotal 30 usable reads were sampled
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance (Test #1)" name="0" time="34.592154026031494">
        
            
            <system-out><![CDATA[
            NameMeanMediansdoutput96.47368421052636787.858705014265null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Get exon regions from /galaxy/server/database/objects/a/a/6/dataset_aa652723-dc2e-4a12-98a7-1824995f9619.dat ...Load BAM file ...  DoneTotal read pairs  used 20
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile (Test #1)" name="0" time="21.79334807395935">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  DoneTotoal reads used: 40
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation (Test #1)" name="0" time="67.50824546813965">
        
            
            <system-out><![CDATA[
            null device           1 null device           1 total = 4
            ]]></system-out>
            <system-err><![CDATA[
            Reading reference bed file:  /galaxy/server/database/objects/b/7/d/dataset_b7d1b65b-fe5a-4f87-bf0f-f763ff7e0c02.dat  ...  DoneLoad BAM file ...  Done===================================================================Total splicing  Events:4Known Splicing Events:1Partial Novel Splicing Events:1Novel Splicing Events:1Total splicing  Junctions:3Known Splicing Junctions:1Partial Novel Splicing Junctions:1Novel Splicing Junctions:1===================================================================
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation (Test #1)" name="0" time="27.483524322509766">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            reading reference bed file:  /galaxy/server/database/objects/a/3/2/dataset_a32ea950-a07c-4605-975c-336aa0e009d2.dat  ...  Done! Total 14 known splicing junctions.Load BAM file ...  Doneshuffling alignments ... Donesampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.sampling 35% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.sampling 40% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.sampling 45% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.sampling 50% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.sampling 55% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.sampling 60% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.sampling 65% (1) splicing reads. 1 splicing junctions. 0 known splicing junctions. 1 novel splicing junctions.sampling 70% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.sampling 75% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.sampling 80% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.sampling 85% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.sampling 90% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.sampling 95% (2) splicing reads. 2 splicing junctions. 0 known splicing junctions. 2 novel splicing junctions.sampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile (Test #1)" name="0" time="37.01918983459473">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Process BAM file ...  No mismatches found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC (Test #1)" name="0" time="24.584163188934326">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Read BAM file ...  Donewriting GC content ...writing R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC (Test #1)" name="0" time="67.828049659729">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Read BAM file ...  Donegenerating data matrix ...generating R script  ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution (Test #1)" name="0" time="35.70002841949463">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            processing /galaxy/server/database/objects/3/0/1/dataset_3010dc7e-3269-4934-8c90-06b46e96b724.dat ... Doneprocessing /galaxy/server/database/objects/b/a/1/dataset_ba111766-dbe4-42a7-b7ad-e4413ec4853b.dat ... Finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication (Test #1)" name="0" time="66.93416666984558">
        
            
            <system-out><![CDATA[
            null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Load BAM file ...  Donereport duplicte rate based on sequence ...report duplicte rate based on mapping  ...generate R script ...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #1)" name="0" time="21.111451864242554">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #2)" name="1" time="21.445509910583496">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #3)" name="2" time="25.551007747650146">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... DoneCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer (Test #4)" name="3" time="19.198055267333984">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... DoneCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality (Test #1)" name="0" time="20.490142822265625">
        
            
            <system-out><![CDATA[
            null device           1 null device           1 
            ]]></system-out>
            <system-err><![CDATA[
            Read BAM file ...  Done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin (Test #1)" name="0" time="28.54508352279663">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            @ 2021-11-27 16:24:44: Get BAM file(s) ...Total 1 BAM file(s):input.bam@ 2021-11-27 16:24:44: Processing input.bam 2 transcripts finished
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #1)" name="0" time="1834.389081954956">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "kmer_choice|kmers": "33",  "libraries_0|files_0|file_type|fwd_reads": {   "id": "84a996dae40fe7eb",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "44818e7bc7bab459",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "sc": false }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/6/0/1/dataset_6011ab61-6162-49d0-bf55-9423d602fd77.dat --pe1-2 fastq:/galaxy/server/database/objects/b/b/c/dataset_bbc209e3-4c90-4b69-a114-a6cfa855b50d.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/238/configs/tmp9clejplw\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/1/0/2/dataset_102165e5-3660-45c8-a28b-dafd6a101d81.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/238/configs/tmp9clejplw\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/1/f/d/dataset_1fdde53f-62cc-4253-9558-b07946b20c42.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:04:04.553289",  "exit_code": null,  "external_id": "gxy-26lpn",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "934181bea8e3d1de",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "84a996dae40fe7eb",    "src": "hda",    "uuid": "6011ab61-6162-49d0-bf55-9423d602fd77"   },   "libraries_0|files_0|rev_reads": {    "id": "44818e7bc7bab459",    "src": "hda",    "uuid": "bbc209e3-4c90-4b69-a114-a6cfa855b50d"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "out_contig_stats": {    "id": "a7b8951f292c54e0",    "src": "hda",    "uuid": "102165e5-3660-45c8-a28b-dafd6a101d81"   },   "out_contigs": {    "id": "83d854051eb38be3",    "src": "hda",    "uuid": "50edda6f-9a4e-4893-8eae-f73642e3e799"   },   "out_log": {    "id": "9a3d6b6a292d1e87",    "src": "hda",    "uuid": "77b54943-1af1-4459-a2d2-d3ec29573b4e"   },   "out_scaffold_stats": {    "id": "528c22aa5f5ad6c9",    "src": "hda",    "uuid": "1fdde53f-62cc-4253-9558-b07946b20c42"   },   "out_scaffolds": {    "id": "28a8ed56a17fbd1b",    "src": "hda",    "uuid": "79099d90-ae96-4ab3-8100-2609c299c5aa"   }  },  "params": {   "__input_ext": "\"fastq\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"false\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 279, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 280, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"false\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"false\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:34:21.558410",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 1834.389081954956, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #2)" name="1" time="1822.585704088211">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "kmer_choice|kmers": "33",  "libraries_0|files_0|file_type|fwd_reads": {   "id": "1ebca6b4c6502b8d",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "a0d98080b098e5f5",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "onlyassembler": true,  "sc": false }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output  --only-assembler  -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fasta:/galaxy/server/database/objects/7/c/d/dataset_7cd2f299-7913-44c4-8cf6-cd20cdf816cd.dat --pe1-2 fasta:/galaxy/server/database/objects/d/6/e/dataset_d6eff024-3a7f-4bef-864f-7b29060fa51a.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/237/configs/tmp3egejik9\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/f/2/9/dataset_f29a8680-db91-4049-adb7-4412df4f5f47.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/237/configs/tmp3egejik9\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/8/9/8/dataset_898e7490-27c9-4373-95d5-8434250a9e0f.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:04:02.907839",  "exit_code": null,  "external_id": "gxy-bhrft",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "c19c9102b6167a41",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "1ebca6b4c6502b8d",    "src": "hda",    "uuid": "7cd2f299-7913-44c4-8cf6-cd20cdf816cd"   },   "libraries_0|files_0|rev_reads": {    "id": "a0d98080b098e5f5",    "src": "hda",    "uuid": "d6eff024-3a7f-4bef-864f-7b29060fa51a"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "out_contig_stats": {    "id": "179e7d8fe6277a44",    "src": "hda",    "uuid": "f29a8680-db91-4049-adb7-4412df4f5f47"   },   "out_contigs": {    "id": "5faea181107a45f9",    "src": "hda",    "uuid": "d1c64959-37f7-45ab-ac9b-d5c6502d691a"   },   "out_log": {    "id": "ddd5c108b982701d",    "src": "hda",    "uuid": "ccb8c5a0-36a5-43df-89dd-ffa3acb0a5a6"   },   "out_scaffold_stats": {    "id": "18485ac2d3dc7b25",    "src": "hda",    "uuid": "898e7490-27c9-4373-95d5-8434250a9e0f"   },   "out_scaffolds": {    "id": "376fe2ceb8326872",    "src": "hda",    "uuid": "35fa8ace-5e2b-4b23-ba76-d3753e8db2f1"   }  },  "params": {   "__input_ext": "\"fasta\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"false\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 273, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 275, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"true\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"false\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:34:09.493602",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 1, "time_seconds": 1822.585704088211, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #3)" name="2" time="1834.857023715973">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "kmer_choice|kmers": "33",  "libraries_0|files_0|file_type|fwd_reads": {   "id": "629b3998c8c7affd",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "40c6722f62db9ce7",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "sc": false }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/e/e/7/dataset_ee79ab91-ca91-4e1f-900b-9eb1406c50da.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/8/5/c/dataset_85c01c25-0b68-4299-9c2c-90ea7325c96f.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/239/configs/tmplbj_g2ia\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/1/0/1/dataset_1014ca9b-b84d-47f2-9b1b-8d5c358fd91e.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/239/configs/tmplbj_g2ia\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/b/a/9/dataset_ba91dc38-c4aa-4bbd-9ef9-51b3e4057596.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:04:16.481776",  "exit_code": null,  "external_id": "gxy-8szht",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "6052ef435dd4252f",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "629b3998c8c7affd",    "src": "hda",    "uuid": "ee79ab91-ca91-4e1f-900b-9eb1406c50da"   },   "libraries_0|files_0|rev_reads": {    "id": "40c6722f62db9ce7",    "src": "hda",    "uuid": "85c01c25-0b68-4299-9c2c-90ea7325c96f"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "out_contig_stats": {    "id": "142021340a9d74cc",    "src": "hda",    "uuid": "1014ca9b-b84d-47f2-9b1b-8d5c358fd91e"   },   "out_contigs": {    "id": "eb516de0ac4c30ae",    "src": "hda",    "uuid": "4c1c0fa4-4ece-498c-8041-b8df050194c7"   },   "out_log": {    "id": "acc0d7f786dabbe7",    "src": "hda",    "uuid": "e4fe56b5-f100-40d9-8823-b20236807780"   },   "out_scaffold_stats": {    "id": "a5ef653405d5e40d",    "src": "hda",    "uuid": "ba91dc38-c4aa-4bbd-9ef9-51b3e4057596"   },   "out_scaffolds": {    "id": "074caa05daab06ca",    "src": "hda",    "uuid": "0b7d77b8-b498-4c3e-ac86-bf93d3b80e35"   }  },  "params": {   "__input_ext": "\"fastq.gz\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"false\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 277, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 278, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"false\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"false\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:34:22.766670",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 1834.857023715973, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #4)" name="3" time="1829.9260838031769">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "kmer_choice|auto_kmer_choice": true,  "libraries_0|files_0|file_type|fwd_reads": {   "id": "84a996dae40fe7eb",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "44818e7bc7bab459",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "sc": false }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250}  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/6/0/1/dataset_6011ab61-6162-49d0-bf55-9423d602fd77.dat --pe1-2 fastq:/galaxy/server/database/objects/b/b/c/dataset_bbc209e3-4c90-4b69-a114-a6cfa855b50d.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/240/configs/tmpi5jwewok\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/a/0/4/dataset_a047aad9-bf3d-4e09-b34d-b3b5476c0d88.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/240/configs/tmpi5jwewok\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/8/d/e/dataset_8de5b720-9ece-4af4-88e6-7afc880e4b1e.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:04:17.154827",  "exit_code": null,  "external_id": "gxy-62plh",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "4d7dc59d8a14bd0c",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "84a996dae40fe7eb",    "src": "hda",    "uuid": "6011ab61-6162-49d0-bf55-9423d602fd77"   },   "libraries_0|files_0|rev_reads": {    "id": "44818e7bc7bab459",    "src": "hda",    "uuid": "bbc209e3-4c90-4b69-a114-a6cfa855b50d"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "out_contig_stats": {    "id": "1af6e4d0b5195f73",    "src": "hda",    "uuid": "a047aad9-bf3d-4e09-b34d-b3b5476c0d88"   },   "out_contigs": {    "id": "149c7645c08e5ac1",    "src": "hda",    "uuid": "b3faea97-4f76-411b-ade1-fa6a5659a793"   },   "out_log": {    "id": "dcb33e7380304e98",    "src": "hda",    "uuid": "3c8e3460-c623-4ac9-a6ce-af140835c4ca"   },   "out_scaffold_stats": {    "id": "b27ff8c85140e326",    "src": "hda",    "uuid": "8de5b720-9ece-4af4-88e6-7afc880e4b1e"   },   "out_scaffolds": {    "id": "58adcd1af8defb79",    "src": "hda",    "uuid": "51322056-8a67-4591-9bb5-20c2022d8db7"   }  },  "params": {   "__input_ext": "\"fastq\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"false\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 1, \"auto_kmer_choice\": \"true\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 279, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 280, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"false\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"false\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T17:34:21.623060",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 3, "time_seconds": 1829.9260838031769, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #5)" name="4" time="1814.5450189113617">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "kmer_choice|kmers": "77",  "libraries_0|files_0|file_type|fwd_reads": {   "id": "2a3a6bc251139116",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "d25559dc677540c5",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "sc": false }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"77\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/5/8/2/dataset_5826c306-481d-453a-b610-e378bb0dbed8.dat --pe1-2 fastq:/galaxy/server/database/objects/c/a/c/dataset_caca8612-5b16-4729-b985-ad38876aa765.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/243/configs/tmpna0_6nzy\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/2/6/9/dataset_2690f1b4-9e55-4b1c-be61-2dfda39e5e1a.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/243/configs/tmpna0_6nzy\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/4/0/1/dataset_401fccae-7b47-48f6-af56-5d6a2371c0b8.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:34:18.834119",  "exit_code": null,  "external_id": "gxy-xgtk6",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "c03b4afa3fef094a",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "2a3a6bc251139116",    "src": "hda",    "uuid": "5826c306-481d-453a-b610-e378bb0dbed8"   },   "libraries_0|files_0|rev_reads": {    "id": "d25559dc677540c5",    "src": "hda",    "uuid": "caca8612-5b16-4729-b985-ad38876aa765"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "out_contig_stats": {    "id": "f889f3be9f94d362",    "src": "hda",    "uuid": "2690f1b4-9e55-4b1c-be61-2dfda39e5e1a"   },   "out_contigs": {    "id": "9655cfbdeb64c44f",    "src": "hda",    "uuid": "6c5e4583-56d3-4fef-b890-857a78d37f54"   },   "out_log": {    "id": "1cb0c023e734c5a9",    "src": "hda",    "uuid": "91474e22-da2c-4470-8ff4-b3153e369393"   },   "out_scaffold_stats": {    "id": "6e062e869542d649",    "src": "hda",    "uuid": "401fccae-7b47-48f6-af56-5d6a2371c0b8"   },   "out_scaffolds": {    "id": "09572f7c22cdcb6e",    "src": "hda",    "uuid": "76874071-f1e1-426b-94ba-6b2bab0be67d"   }  },  "params": {   "__input_ext": "\"fastq\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"false\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"77\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 301, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 302, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"false\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"false\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T18:04:24.350671",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 4, "time_seconds": 1814.5450189113617, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #6)" name="5" time="1823.3775038719177">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "contig_graph_out": true,  "kmer_choice|kmers": "33",  "libraries_0|files_0|file_type|fwd_reads": {   "id": "d47c1422e2e5842b",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "3511d1da6a2b7300",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "sc": false,  "scaffold_graph_out": true }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/7/6/6/dataset_76632ca1-e8c1-4f55-865f-ec595f36345e.dat --pe1-2 fastq:/galaxy/server/database/objects/7/2/0/dataset_720e4716-1993-4097-9011-894c929c8ca5.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/251/configs/tmp170ziz7z\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/7/5/f/dataset_75f3d28d-b978-4701-8585-6098ff3f7ba8.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/251/configs/tmp170ziz7z\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/2/4/6/dataset_2468b5d6-0a86-4a10-aee8-833eb553d088.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:34:37.951218",  "exit_code": null,  "external_id": "gxy-ffvqh",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "89d08791817cd935",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "d47c1422e2e5842b",    "src": "hda",    "uuid": "76632ca1-e8c1-4f55-865f-ec595f36345e"   },   "libraries_0|files_0|rev_reads": {    "id": "3511d1da6a2b7300",    "src": "hda",    "uuid": "720e4716-1993-4097-9011-894c929c8ca5"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "contig_graph": {    "id": "bce79f0b0a1655de",    "src": "hda",    "uuid": "a3265065-e9c2-41a4-b5fd-97999b0a37c8"   },   "out_contig_stats": {    "id": "cddc52e8967193bb",    "src": "hda",    "uuid": "75f3d28d-b978-4701-8585-6098ff3f7ba8"   },   "out_contigs": {    "id": "a46b3f7f6d3b5aa9",    "src": "hda",    "uuid": "99196c22-d33a-426e-be9c-84f1beb583f2"   },   "out_log": {    "id": "868416931b598cd5",    "src": "hda",    "uuid": "6ea4194a-e130-4af9-8d9d-3fe06c8abd36"   },   "out_scaffold_stats": {    "id": "1f37488860cdf398",    "src": "hda",    "uuid": "2468b5d6-0a86-4a10-aee8-833eb553d088"   },   "out_scaffolds": {    "id": "ad83fb715026620e",    "src": "hda",    "uuid": "03c7a9e8-6cc1-41b1-89ed-2f98e1dcaaf7"   },   "scaffold_graph": {    "id": "1368438a2d603191",    "src": "hda",    "uuid": "e4077836-7427-45cb-af1b-42d5169848b8"   }  },  "params": {   "__input_ext": "\"fastqsanger\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"true\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 309, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 311, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"false\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"true\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T18:04:44.382681",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 5, "time_seconds": 1823.3775038719177, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #7)" name="6" time="1821.8121469020844">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "kmer_choice|kmers": "33",  "libraries_0|files_0|file_type|fwd_reads": {   "id": "d47c1422e2e5842b",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "3511d1da6a2b7300",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "sc": false }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/7/6/6/dataset_76632ca1-e8c1-4f55-865f-ec595f36345e.dat --pe1-2 fastq:/galaxy/server/database/objects/7/2/0/dataset_720e4716-1993-4097-9011-894c929c8ca5.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/250/configs/tmp3mpvzgkf\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/2/7/0/dataset_27016221-a8e4-4796-b227-7487eb9c6b42.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/250/configs/tmp3mpvzgkf\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/d/1/1/dataset_d11a9cfb-12e2-4321-802b-d36ac3732df2.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:34:37.948396",  "exit_code": null,  "external_id": "gxy-f9v7d",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "7d4833ab11cc9888",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "d47c1422e2e5842b",    "src": "hda",    "uuid": "76632ca1-e8c1-4f55-865f-ec595f36345e"   },   "libraries_0|files_0|rev_reads": {    "id": "3511d1da6a2b7300",    "src": "hda",    "uuid": "720e4716-1993-4097-9011-894c929c8ca5"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "out_contig_stats": {    "id": "09d60c7f2e9e28de",    "src": "hda",    "uuid": "27016221-a8e4-4796-b227-7487eb9c6b42"   },   "out_contigs": {    "id": "d8c9a69fd6ddc500",    "src": "hda",    "uuid": "4c09786a-449a-436d-9497-68a7acdfee5e"   },   "out_log": {    "id": "336560a08e04e1d2",    "src": "hda",    "uuid": "322e1414-667f-4092-b34e-66d16f46762a"   },   "out_scaffold_stats": {    "id": "df969242e3cf56c5",    "src": "hda",    "uuid": "d11a9cfb-12e2-4321-802b-d36ac3732df2"   },   "out_scaffolds": {    "id": "c3ffafabdb97b093",    "src": "hda",    "uuid": "1d58987d-7a59-4203-9712-6439d9b332bc"   }  },  "params": {   "__input_ext": "\"fastqsanger\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"false\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 309, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 311, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"false\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"false\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T18:04:43.086073",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 6, "time_seconds": 1821.8121469020844, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades (Test #8)" name="7" time="1826.4975142478943">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "careful": false,  "kmer_choice|kmers": "33",  "libraries_0|files_0|file_type|fwd_reads": {   "id": "fcec7ccc77e2de06",   "src": "hda"  },  "libraries_0|files_0|file_type|rev_reads": {   "id": "70e4cd21da4cbfe8",   "src": "hda"  },  "libraries_0|lib_type": "paired_end",  "sc": false }, "job": {  "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi \u0026\u0026  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/1/a/4/dataset_1a4a439e-7f76-455c-a816-dbedffffc0db.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/2/2/9/dataset_2293e686-ec31-4246-bb58-46a987843c4e.dat \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/252/configs/tmp19c0dhnb\u0027 \u003c contigs.fasta \u003e \u0027/galaxy/server/database/objects/2/d/a/dataset_2da7b16c-43fb-4e50-9e8f-f43acc256b5d.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/252/configs/tmp19c0dhnb\u0027 \u003c scaffolds.fasta \u003e \u0027/galaxy/server/database/objects/c/f/3/dataset_cf39f105-db4b-4dd8-9e9b-e7758cae29a1.dat\u0027",  "command_version": null,  "create_time": "2021-11-27T17:34:43.437159",  "exit_code": null,  "external_id": "gxy-fw72s",  "galaxy_version": "21.05",  "history_id": "b033a1e063da37ba",  "id": "d0b3efaae295c1b0",  "inputs": {   "libraries_0|files_0|fwd_reads": {    "id": "fcec7ccc77e2de06",    "src": "hda",    "uuid": "1a4a439e-7f76-455c-a816-dbedffffc0db"   },   "libraries_0|files_0|rev_reads": {    "id": "70e4cd21da4cbfe8",    "src": "hda",    "uuid": "2293e686-ec31-4246-bb58-46a987843c4e"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "outputs": {   "out_contig_stats": {    "id": "6460bce51a475f8f",    "src": "hda",    "uuid": "2da7b16c-43fb-4e50-9e8f-f43acc256b5d"   },   "out_contigs": {    "id": "d96318cabf9bf457",    "src": "hda",    "uuid": "a4ce4598-fe53-4c34-a363-632aa4dee671"   },   "out_log": {    "id": "9577f6f291fd29ee",    "src": "hda",    "uuid": "29dbe512-84ee-47d5-8da2-956f9a3735b6"   },   "out_scaffold_stats": {    "id": "0722517a179bec35",    "src": "hda",    "uuid": "cf39f105-db4b-4dd8-9e9b-e7758cae29a1"   },   "out_scaffolds": {    "id": "fed8a7d028a01b67",    "src": "hda",    "uuid": "d76920b4-4c23-4e95-9a98-20a89b65f836"   }  },  "params": {   "__input_ext": "\"fastqsanger.gz\"",   "careful": "\"false\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contig_graph_out": "\"false\"",   "cov": "{\"__current_case__\": 0, \"state\": \"off\"}",   "dbkey": "\"?\"",   "iontorrent": "\"false\"",   "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}",   "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 312, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 313, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]",   "nanopore_reads": null,   "onlyassembler": "\"false\"",   "pacbio_reads": null,   "sanger_reads": null,   "sc": "\"false\"",   "scaffold_graph_out": "\"false\"",   "trusted_contigs": null,   "untrusted_contigs": null  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2021-11-27T18:04:49.173590",  "user_email": "alex@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 7, "time_seconds": 1826.4975142478943, "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>